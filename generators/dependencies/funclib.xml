<?xml version="1.0"?>
<doc>
    <assembly>
        <name>funclib</name>
    </assembly>
    <members>
        <member name="F:funclib.Collections.Internal.Constants.HASH_TABLE_THRESHOLD">
            <summary>
            The maximum number of entries to before changing the <see cref="T:funclib.Collections.ArrayMap"/> implementation to a <see cref="T:funclib.Collections.HashMap"/>.
            </summary>
        </member>
        <member name="T:funclib.Components.Core.AddWatch">
            <summary>
            Adds a watch function to an <see cref="T:funclib.Components.Core.IRef"/> variable. The
            watch function must implement the <see cref="T:funclib.Components.Core.IFunction"/> interface
            and take 4 arguments. The key, the reference, its old-state and its new
            state. Whenever the <see cref="T:funclib.Components.Core.IRef"/>'s state changes all registered
            watches will be called. The functions will be synchronously called. Note:
            an <see cref="T:funclib.Components.Core.IAtom"/>'s state may have changed prior to calling the 
            function so use th old/new state argument instead of deref'ing the 
            state again.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.AddWatch.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Adds a watch function to an <see cref="T:funclib.Components.Core.IRef"/> variable. The
            watch function must implement the <see cref="T:funclib.Components.Core.IFunction"/> interface
            and take 4 arguments. The key, the reference, its old-state and its new
            state. Whenever the <see cref="T:funclib.Components.Core.IRef"/>'s state changes all registered
            watches will be called. The functions will be synchronously called. Note:
            an <see cref="T:funclib.Components.Core.IAtom"/>'s state may have changed prior to calling the 
            function so use th old/new state argument instead of deref'ing the 
            state again.
            </summary>
            <param name="ref">An object that implements the <see cref="T:funclib.Components.Core.IRef"/> interface.</param>
            <param name="key">A unique key for the function.</param>
            <param name="fn">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface and takes 4 arguments.</param>
            <returns>
            Returns this <see cref="T:funclib.Components.Core.ARef"/> object.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.And">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns 
            a logical false (null or false) then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.And.Invoke">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns 
            a logical false (null or false) then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
            <returns>
            Returns true.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.And.Invoke(System.Object)">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns 
            a logical false (null or false) then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
            <param name="x">Object to return.</param>
            <remarks>
            If x implements interface <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> then the object's
            Invoke() method is executed and sets its results to x.
            </remarks>
            <returns>
            Returns x or the result of calling Invoke on x.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.And.Invoke(System.Object,System.Object[])">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns 
            a logical false (null or false) then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
            <param name="x">First object to test.</param>
            <param name="next">Rest of the objects to test.</param>
            <remarks>
            If x implements interface <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> then the object's
            Invoke() method is executed and sets its results to x.
            </remarks>
            <returns>
            Returns the first logical false, otherwise the last object evaluated.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Apply">
            <summary>
            Applies <see cref="T:funclib.Components.Core.IFunction"/> f to the argument list formed prepending 
            intervening arguments to args.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Apply.Invoke(System.Object,System.Object)">
            <summary>
            Applies <see cref="T:funclib.Components.Core.IFunction"/> f to the argument list formed perpending 
            intervening arguments to args.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="args">An object that can be <see cref="T:funclib.Components.Core.Seq"/> against for the arguments for f.</param>
            <returns>
            Returns the results of executing f with the given arguments.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Apply.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Applies <see cref="T:funclib.Components.Core.IFunction"/> f to the argument list formed perpending 
            intervening arguments to args.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">First argument pass to f.</param>
            <param name="args">An object that can be <see cref="T:funclib.Components.Core.Seq"/> against for the rest of the arguments for f.</param>
            <returns>
            Returns the results of executing f with the given arguments.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Apply.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies <see cref="T:funclib.Components.Core.IFunction"/> f to the argument list formed perpending 
            intervening arguments to args.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">First argument pass to f.</param>
            <param name="y">Second argument pass to f.</param>
            <param name="args">An object that can be <see cref="T:funclib.Components.Core.Seq"/> against for the rest of the arguments for f.</param>
            <returns>
            Returns the results of executing f with the given arguments.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Apply.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies <see cref="T:funclib.Components.Core.IFunction"/> f to the argument list formed perpending 
            intervening arguments to args.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">First argument pass to f.</param>
            <param name="y">Second argument pass to f.</param>
            <param name="z">Third argument passed to f.</param>
            <param name="args">An object that can be <see cref="T:funclib.Components.Core.Seq"/> against for the rest of the arguments for f.</param>
            <returns>
            Returns the results of executing f with the given arguments.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Apply.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Applies <see cref="T:funclib.Components.Core.IFunction"/> f to the argument list formed perpending 
            intervening arguments to args.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="a">First argument pass to f.</param>
            <param name="b">Second argument pass to f.</param>
            <param name="c">Third argument passed to f.</param>
            <param name="d">Fourth argument passed to f.</param>
            <param name="args">Rest of the arguments passed to f.</param>
            <returns>
            Returns the results of executing f with the given arguments.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ARef.Deref">
            <summary>
            Returns the current state of <see cref="T:funclib.Components.Core.IDeref"/> variable.
            </summary>
            <returns>
            Returns the current state of <see cref="T:funclib.Components.Core.IDeref"/> variable.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ARef.SetValidator(funclib.Components.Core.IFunction)">
            <summary>
            Sets the validator function for <see cref="T:funclib.Components.Core.IRef"/> variables. Validator 
            function must be null or a side-effect-free <see cref="T:funclib.Components.Core.IFunction"/> of
            one argument, which will be passed the intended new state of any state
            change. If the new state is unacceptable, the function should either
            return <see cref="!:false"/> or throw an exception.
            </summary>
            <param name="vf">>An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface, that takes one parameter.</param>
        </member>
        <member name="M:funclib.Components.Core.ARef.GetValidator">
            <summary>
            Returns the current validator function, otherwise null.
            </summary>
            <returns>
            Returns the current validator function, otherwise null.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ARef.GetWatches">
            <summary>
            Returns all the watches currently setup for this <see cref="T:funclib.Components.Core.ARef"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:funclib.Components.Core.ARef.AddWatch(System.Object,funclib.Components.Core.IFunction)">
            <summary>
            Adds a watch function to an <see cref="T:funclib.Components.Core.IRef"/> variable. The
            watch function must implement the <see cref="T:funclib.Components.Core.IFunction"/> interface
            and take 4 arguments. The key, the reference, its old-state and its new
            state. Whenever the <see cref="T:funclib.Components.Core.IRef"/>'s state changes all registered
            watches will be called. The functions will be synchronously called. Note:
            an <see cref="T:funclib.Components.Core.IAtom"/>'s state may have changed prior to calling the 
            function so use th old/new state argument instead of deref'ing the 
            state again.
            </summary>
            <param name="key">A unique key for the function.</param>
            <param name="callback">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface and takes 4 arguments.</param>
            <returns>
            Returns this <see cref="T:funclib.Components.Core.ARef"/> object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ARef.RemoveWatch(System.Object)">
            <summary>
            Removes a watch from the <see cref="T:funclib.Components.Core.ARef"/>'s reference.
            </summary>
            <param name="key">A unique key for the function to be removed.</param>
            <returns>
            Returns this <see cref="T:funclib.Components.Core.ARef"/> object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ARef.NotifyWatches(System.Object,System.Object)">
            <summary>
            Notifies all watches registered to the <see cref="T:funclib.Components.Core.ARef"/> variable.
            </summary>
            <param name="oldVal">The old state of the <see cref="T:funclib.Components.Core.ARef"/>.</param>
            <param name="newVal">The new state of the <see cref="T:funclib.Components.Core.ARef"/>.</param>
        </member>
        <member name="T:funclib.Components.Core.ArrayMap">
            <summary>
            Constructs an <see cref="T:funclib.Collections.ArrayMap"/>. If any keys are equal,
            they are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Assoc"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.ArrayMap.Invoke">
            <summary>
            Constructs an <see cref="T:funclib.Collections.ArrayMap"/>. If any keys are equal,
            they are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Assoc"/>.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.ArrayMap.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ArrayMap.Invoke(System.Object[])">
            <summary>
            Constructs an <see cref="T:funclib.Collections.ArrayMap"/>. If any keys are equal,
            they are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Assoc"/>.
            </summary>
            <param name="keyvals">List of Key, Value pairs.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.ArrayMap"/> with Key/Value pairs added.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Assoc">
            <summary>
            Assoc[iate]. When applied to a map, returns a new map of the same (hash/sort) type.
            that contains the mapping of key(s) to val(s). When applied to a vector, returns
            a new vector that contains val at index. Note -> index must be less than or equal to
            count of vector.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Assoc.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Assoc[iate]. When applied to a map, returns a new map of the same (hash/sort) type.
            that contains the mapping of key(s) to val(s). When applied to a vector, returns
            a new vector that contains val at index. Note -> index must be less than or equal to
            count of vector.
            </summary>
            <param name="map">Object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="key">The key of the object to associate in the map.</param>
            <param name="val">The value of the object to associate in the map.</param>
            <returns>
            Returns a new map with the same type of the map object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Assoc.Invoke(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Assoc[iate]. When applied to a map, returns a new map of the same (hash/sort) type.
            that contains the mapping of key(s) to val(s). When applied to a vector, returns
            a new vector that contains val at index. Note -> index must be less than or equal to
            count of vector.
            </summary>
            <param name="map">Object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="key">The key of the object to associate in the map.</param>
            <param name="val">The value of the object to associate in the map.</param>
            <param name="kvs">Rest of the key/value pairs to associate in the map with.</param>
            <returns>
            Returns a new map with the same type of the map object.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.AssocIn">
            <summary>
            Associates a value n a nested associative structure, where ks is a 
            sequence of keys and v is the new value. Returns a new nested structure.
            If any levels do not exists, a new <see cref="T:funclib.Collections.HashMap"/> 
            will be created.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.AssocIn.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Associates a value n a nested associative structure, where ks is a 
            sequence of keys and v is the new value. Returns a new nested structure.
            If any levels do not exists, a new <see cref="T:funclib.Collections.HashMap"/> 
            will be created.
            </summary>
            <param name="m">Object that implements the <see cref="!:IAssociative"/> interface.</param>
            <param name="ks">A sequence of keys to find the key/value pair to update.</param>
            <param name="v">A new value for the last key to update with.</param>
            <returns>
            A new nested associative with the value replaced.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Assocǃ">
            <summary>
            When applied to a transient map, addes mapping of key(s) to vals(s). 
            When applied to a transient vector, sets the val at index. Note -> 
            index must be less than or equal to the count of vector. Returns coll.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Assocǃ.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            When applied to a transient map, addes mapping of key(s) to vals(s). 
            When applied to a transient vector, sets the val at index. Note -> 
            index must be less than or equal to the count of vector. Returns coll.
            </summary>
            <param name="coll">An object that implements the <see cref="T:funclib.Collections.Internal.ITransientAssociative"/> interface.</param>
            <param name="key">The key of the object to associate in the map.</param>
            <param name="val">The value of the object to associate in the map.</param>
            <returns>
            Returns the modified coll object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Assocǃ.Invoke(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            When applied to a transient map, addes mapping of key(s) to vals(s). 
            When applied to a transient vector, sets the val at index. Note -> 
            index must be less than or equal to the count of vector. Returns coll.
            </summary>
            <param name="coll">An object that implements the <see cref="T:funclib.Collections.Internal.ITransientAssociative"/> interface.</param>
            <param name="key">The key of the object to associate in the map.</param>
            <param name="val">The value of the object to associate in the map.</param>
            <param name="kvs">Rest of the key/value pairs to associate in the map with.</param>
            <returns>
            Returns the modified coll object.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Atom">
            <summary>
            Creates and returns an <see cref="T:funclib.Components.Core.Atom"/> with an initial value or x
            and zero or more options:
                :validator = validate-fn
            Validate-fn must be nil or a side effect free <see cref="T:funclib.Components.Core.IFunction"/>
            of one argument. Which will be passed the intended new state on any
            state change. If the new state is unacceptable, the validate-fn should
            return false or throw an exception.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Atom.#ctor">
            <summary>
            Creates a new <see cref="T:funclib.Components.Core.Atom"/> object.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Atom.Deref">
            <summary>
            Returns the current state of ref.
            </summary>
            <returns>
            Returns the current state of ref.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Atom.CompareAndSet(System.Object,System.Object)">
            <summary>
            Atomically sets the value of the <see cref="T:funclib.Components.Core.IAtom"/>
            to the new value if and only if the current value of 
            the <see cref="T:funclib.Components.Core.IAtom"/> is identical to the oldVal.
            Returns <see cref="!:true"/> if set happened, otherwise <see cref="!:false"/>.
            </summary>
            <param name="oldVal">Current state of the atom.</param>
            <param name="newVal">New state of the atom after successful swap.</param>
            <returns>
            Returns <see cref="!:true"/> if set happened, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Atom.Reset(System.Object)">
            <summary>
            Sets the value of the <see cref="T:funclib.Components.Core.IAtom"/> to a new value. Returns
            <see cref="T:funclib.Collections.IVector"/> of the old, new, the value of the <see cref="T:funclib.Components.Core.IAtom"/>
            before and after the rest.
            </summary>
            <param name="newVal">New state of the atom after successful reset.</param>
            <returns>
            Returns <see cref="T:funclib.Collections.IVector"/> of the old, new, the value of the <see cref="T:funclib.Components.Core.IAtom"/>
            before and after the rest.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Atom.Swap(System.Object)">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Atom.Swap(System.Object,System.Object)">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Second parameter of the function.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Atom.Swap(System.Object,System.Object,System.Object)">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Second parameter of the function.</param>
            <param name="y">Third parameter of the function.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Atom.Swap(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Second parameter of the function.</param>
            <param name="y">Third parameter of the function.</param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:funclib.Components.Core.Atom.Invoke(System.Object)">
            <summary>
            Creates and returns an <see cref="T:funclib.Components.Core.Atom"/> with an initial value or x
            and zero or more options:
                :validator = validate-fn
            Validate-fn must be nil or a side effect free <see cref="T:funclib.Components.Core.IFunction"/>
            of one argument. Which will be passed the intended new state on any
            state change. If the new state is unacceptable, the validate-fn should
            return false or throw an exception.
            </summary>
            <param name="x">Initial value of the <see cref="T:funclib.Components.Core.Atom"/>.</param>
            <returns>
            Returns a new <see cref="T:funclib.Components.Core.Atom"/> with the initial value set.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Atom.Invoke(System.Object,System.Object[])">
            <summary>
            Creates and returns an <see cref="T:funclib.Components.Core.Atom"/> with an initial value or x
            and zero or more options:
                :validator = validate-fn
            Validate-fn must be nil or a side effect free <see cref="T:funclib.Components.Core.IFunction"/>
            of one argument. Which will be passed the intended new state on any
            state change. If the new state is unacceptable, the validate-fn should
            return false or throw an exception.
            </summary>
            <param name="x">Initial value of the <see cref="T:funclib.Components.Core.Atom"/>.</param>
            <param name="options">Key/Value pair of options. options are:
                :validator = validate-fn
            </param>
            <returns>
            Returns a new <see cref="T:funclib.Components.Core.Atom"/> with the initial value set.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:funclib.Components.Core.BitAnd" -->
        <!-- Badly formed XML comment ignored for member "M:funclib.Components.Core.BitAnd.Invoke(System.Object,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:funclib.Components.Core.BitAnd.Invoke(System.Object,System.Object,System.Object[])" -->
        <member name="T:funclib.Components.Core.Boolean">
            <summary>
            If x is a <see cref="T:System.Boolean"/> return x, otherwise return x != null.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Boolean.Invoke(System.Object)">
            <summary>
            If x is a <see cref="T:System.Boolean"/> return x, otherwise return x != null.
            </summary>
            <param name="x">Object to coerce into a boolean.</param>
            <returns>
            Returns a <see cref="T:System.Boolean"/> that indicates either the value of x if its a boolean, otherwise the result of x != null.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.ButLast">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of all but the last item. In linear time.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.ButLast.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of all but the last item. In linear time.
            </summary>
            <param name="coll">List of times to process.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.ISeq"/> of all items except for the last item.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Char">
            <summary>
            Coerce to char
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Char.Invoke(System.Object)">
            <summary>
            Coerce to char
            </summary>
            <param name="x">The number to convert to a <see cref="T:System.Char"/>.</param>
            <returns>
            Returns a <see cref="T:System.Char"/> value.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Class">
            <summary>
            Returns the type of an object.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Class.Invoke(System.Object)">
            <summary>
            Returns the type of an object.
            </summary>
            <param name="x">Object to get the type of.</param>
            <returns>
            Returns the <see cref="T:System.Type"/> of object x.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Comp">
            <summary>
            Takes a set of functions and returns a function that is the composition of
            those functions. The returned <see cref="T:funclib.Components.Core.Comp.Function"/> takes a variable number 
            of args, applies the right-most of functions to the args, the next function
            (right-to-left) to the result, ect.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Comp.Invoke">
            <summary>
            Takes a set of functions and returns a function that is the composition of
            those functions. The returned <see cref="T:funclib.Components.Core.Comp.Function"/> takes a variable number 
            of args, applies the right-most of functions to the args, the next function
            (right-to-left) to the result, ect.
            </summary>
            <returns>
            Returns the <see cref="T:funclib.Components.Core.Identity"/> fucntion;
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Comp.Invoke(System.Object)">
            <summary>
            Takes a set of functions and returns a function that is the composition of
            those functions. The returned <see cref="T:funclib.Components.Core.Comp.Function"/> takes a variable number 
            of args, applies the right-most of functions to the args, the next function
            (right-to-left) to the result, ect.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <returns>
            Returns the passed in function.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Comp.Invoke(System.Object,System.Object)">
            <summary>
            Takes a set of functions and returns a function that is the composition of
            those functions. The returned <see cref="T:funclib.Components.Core.Comp.Function"/> takes a variable number 
            of args, applies the right-most of functions to the args, the next function
            (right-to-left) to the result, ect.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="g">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Returns <see cref="T:funclib.Components.Core.Comp.Function"/> with f and g composed together.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Comp.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Takes a set of functions and returns a function that is the composition of
            those functions. The returned <see cref="T:funclib.Components.Core.Comp.Function"/> takes a variable number 
            of args, applies the right-most of functions to the args, the next function
            (right-to-left) to the result, ect.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="g">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="fs">Array of objects that implement the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Returns <see cref="T:funclib.Components.Core.Comp.Function"/> with f, g and fs composed together.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Comp.Function">
            <summary>
            Internal function that does the <see cref="T:funclib.Components.Core.Comp"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Comp.Function.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Components.Core.Comp.Function"/> object.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="g">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
        </member>
        <member name="M:funclib.Components.Core.Comp.Function.Invoke">
            <summary>
            Invoke g, with the output passed to f.
            </summary>
            <returns>
            Returns the results of calling f.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Comp.Function.Invoke(System.Object)">
            <summary>
            Invoke g with parameter x, then passing the results to f.
            </summary>
            <param name="x">Function g's argument.</param>
            <returns>
            Returns the results of calling f.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:funclib.Components.Core.Comp.Function.Invoke(System.Object,System.Object)" -->
        <member name="M:funclib.Components.Core.Comp.Function.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Invoke g with parameter x, y and z, then passing the results to f.
            </summary>
            <param name="x">Function g's first argument.</param>
            <param name="y">Function g's second argument.</param>
            <param name="z">Function g's third argument.</param>
            <returns>
            Returns the results of calling f.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Comp.Function.Invoke(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Invoke g with parameter x, y, z and args, then passing the results to f.
            </summary>
            <param name="x">Function g's first argument.</param>
            <param name="y">Function g's second argument.</param>
            <param name="z">Function g's third argument.</param>
            <param name="args">Function g's rest of the arguments.</param>
            <returns>
            Returns the results of calling f.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Comparator">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> function that can be coerced into 
            the <see cref="T:funclib.FunctionComparer"/> that implements <see cref="T:System.Collections.IComparer"/> 
            interface.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Comparator.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> function that can be coerced into 
            the <see cref="T:funclib.FunctionComparer"/> that implements <see cref="T:System.Collections.IComparer"/> 
            interface.
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> that when invoked should return : -1 if pred.Invoke(x, y) is truthy, or 1 if pred.Invoke(y, x) is truthy, otherwise 0
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Compare">
            <summary>
            Comparator, that returns a negative number, zero, or positive number when x
            is logically 'less than', 'equal to' or 'greater than' y. Same as 
            <see cref="M:System.IComparable.CompareTo(System.Object)"/> except it works for null and 
            compares numbers and collections in a type-independent manner.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Compare.Invoke(System.Object,System.Object)">
            <summary>
            Comparator, that returns a negative number, zero, or positive number when x
            is logically 'less than', 'equal to' or 'greater than' y. Same as 
            <see cref="M:System.IComparable.CompareTo(System.Object)"/> except it works for null and 
            compares numbers and collections in a type-independent manner.
            </summary>
            <param name="x">Object that is either null, number or implements the <see cref="T:System.IComparable"/> interface.</param>
            <param name="y">Other that is eitehr null, number or an object to test.</param>
            <returns>
            Returns a <see cref="T:System.Int32"/> thats a negative number when  x 'less than' y, zero when x 'equal to' y or positive number
            x 'greater than' y.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.CompareAndSetǃ">
            <summary>
            Atomically sets the value of the <see cref="T:funclib.Components.Core.IAtom"/>
            to the new value if and only if the current value of 
            the <see cref="T:funclib.Components.Core.IAtom"/> is identical to the oldVal.
            Returns <see cref="!:true"/> if set happened, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.CompareAndSetǃ.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Atomically sets the value of the <see cref="T:funclib.Components.Core.IAtom"/>
            to the new value if and only if the current value of 
            the <see cref="T:funclib.Components.Core.IAtom"/> is identical to the oldVal.
            Returns <see cref="!:true"/> if set happened, otherwise <see cref="!:false"/>.
            </summary>
            <param name="atom">An object that implements the <see cref="T:funclib.Components.Core.IAtom"/> interface.</param>
            <param name="oldVal">Current state of the atom.</param>
            <param name="newVal">New state of the atom after successful swap.</param>
            <returns>
            Returns <see cref="!:true"/> if set happened, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Complement">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> and returns the function that takes the same arguments
            with the same effects, if any, and returns the opposite truthy value.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Complement.Invoke(System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> and returns the function that takes the same arguments
            with the same effects, if any, and returns the opposite truthy value.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.Complement.Function"/> that returns a <see cref="T:System.Boolean"/> value which is the opposite truthy value.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Complement.Function">
            <summary>
            Internal function that does the <see cref="T:funclib.Components.Core.Complement"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Complement.Function.#ctor(System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Components.Core.Complement.Function"/> object.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
        </member>
        <member name="M:funclib.Components.Core.Complement.Function.Invoke">
            <summary>
            Returns the opposite truthy value when calling the function with no parameters.
            </summary>
            <returns>
            Returns a <see cref="T:System.Boolean"/> that the opposite truthy value when calling the function.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Complement.Function.Invoke(System.Object)">
            <summary>
            Returns the opposite truthy value when calling the function with one parameters.
            </summary>
            <param name="x">The first parameter in the function.</param>
            <returns>
            Returns a <see cref="T:System.Boolean"/> that the opposite truthy value when calling the function.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Complement.Function.Invoke(System.Object,System.Object)">
            <summary>
            Returns the opposite truthy value when calling the function with two parameters.
            </summary>
            <param name="x">The first parameter in the function.</param>
            <param name="y">The second parameter in the function.</param>
            <returns>
            Returns a <see cref="T:System.Boolean"/> that the opposite truthy value when calling the function.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Complement.Function.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns the opposite truthy value when calling the function with more than two parameters.
            </summary>
            <param name="x">The first parameter in the function.</param>
            <param name="y">The second parameter in the function.</param>
            <param name="zs">The rest of the parameters in the function.</param>
            <returns>
            Returns a <see cref="T:System.Boolean"/> that the opposite truthy value when calling the function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Concat">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> representing the concatenation of the elements
            in the supplied colls.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Concat.Invoke">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> representing the concatenation of the elements
            in the supplied colls.
            </summary>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/>, when invoked returns null.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Concat.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> representing the concatenation of the elements
            in the supplied colls.
            </summary>
            <param name="x">Object to return via a lazy implementation.</param>
            <returns>
            Returna a <see cref="T:funclib.Components.Core.LazySeq"/>, when invoked returns x.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Concat.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> representing the concatenation of the elements
            in the supplied colls.
            </summary>
            <param name="x">First collection in the concatenation.</param>
            <param name="y">Second collection to be concatenated.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> that will concatenate y to x.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Concat.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> representing the concatenation of the elements
            in the supplied colls.
            </summary>
            <param name="x">First collection in the concatenation.</param>
            <param name="y">Second collection to be concatenated.</param>
            <param name="zs">Other collections to be concatenated with.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> that will concatentat zs, y to x.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Conj">
            <summary>
            Conj[oin]. Returns a new collection with the x 'added'. If 
            coll is null, returns a new <see cref="T:funclib.Collections.List"/> with 
            x as its first item. The addition may happen at different places
            depending on the concrete type of the collection.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Conj.Invoke">
            <summary>
            Conj[oin]. Returns a new collection with the x 'added'. If 
            coll is null, returns a new <see cref="T:funclib.Collections.List"/> with 
            x as its first item. The addition may happen at different places
            depending on the concrete type of the collection.
            </summary>
            <returns>
            Returns an <see cref="F:funclib.Collections.Vector.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Conj.Invoke(System.Object)">
            <summary>
            Conj[oin]. Returns a new collection with the x 'added'. If 
            coll is null, returns a new <see cref="T:funclib.Collections.List"/> with 
            x as its first item. The addition may happen at different places
            depending on the concrete type of the collection.
            </summary>
            <param name="coll">Object that implements the <see cref="T:funclib.Collections.ICollection"/> interface.</param>
            <returns>
            Returns the coll object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Conj.Invoke(System.Object,System.Object)">
            <summary>
            Conj[oin]. Returns a new collection with the x 'added'. If 
            coll is null, returns a new <see cref="T:funclib.Collections.List"/> with 
            x as its first item. The addition may happen at different places
            depending on the concrete type of the collection.
            </summary>
            <param name="coll">Object that implements the <see cref="T:funclib.Collections.ICollection"/> interface.</param>
            <param name="x">Object to add to the collection.</param>
            <returns>
            If coll is null returns a new <see cref="T:funclib.Collections.List"/>, otherwise returns 
            a new collection with the same concrete type as coll with x <see cref="M:funclib.Collections.ICollection.Cons(System.Object)"/>
            onto the list.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Conj.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Conj[oin]. Returns a new collection with the x 'added'. If 
            coll is null, returns a new <see cref="T:funclib.Collections.List"/> with 
            x as its first item. The addition may happen at different places
            depending on the concrete type of the collection.
            </summary>
            <param name="coll">Object that implements the <see cref="T:funclib.Collections.ICollection"/> interface.</param>
            <param name="x">Object to add to the collection.</param>
            <param name="xs">Array of other objects to add to the collection.</param>
            <returns>
            Returns a new collection with the same concrete type of coll but with the 
            add objects.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Conjǃ">
            <summary>
            Adds x to the transient collection. and returns coll. The addition may happen 
            at different places depending on the concrete type of the collection.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Conjǃ.Invoke">
            <summary>
            Adds x to the transient collection. and returns coll. The addition may happen 
            at different places depending on the concrete type of the collection.
            </summary>
            <returns>
            Returns a <see cref="T:funclib.Collections.ITransientCollection"/> for an empty <see cref="T:funclib.Collections.Vector"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Conjǃ.Invoke(System.Object)">
            <summary>
            Adds x to the transient collection. and returns coll. The addition may happen 
            at different places depending on the concrete type of the collection.
            </summary>
            <param name="coll">Object of the collection to return.</param>
            <returns>
            Returns the coll object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Conjǃ.Invoke(System.Object,System.Object)">
            <summary>
            Adds x to the transient collection. and returns coll. The addition may happen 
            at different places depending on the concrete type of the collection.
            </summary>
            <param name="coll">Object that implement the <see cref="T:funclib.Collections.ITransientCollection"/> interface.</param>
            <param name="x"></param>
            <returns>
            Returns a <see cref="T:funclib.Collections.ITransientCollection"/> with the object added.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Cons">
            <summary>
            Returns a new <see cref="T:funclib.Collections.ISeq"/> where x is the first element and seq is the rest.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Cons.Invoke(System.Object,System.Object)">
            <summary>
            Returns a new <see cref="T:funclib.Collections.ISeq"/> where x is the first element and seq is the rest.
            </summary>
            <param name="x">Object to be the first in the <see cref="T:funclib.Collections.ISeq"/> object.</param>
            <param name="seq">Object to be the rest of the <see cref="T:funclib.Collections.ISeq"/> object.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.ISeq"/> collection.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Constantly">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunctionParams`2"/> that takes any number of 
            arguments and returns x.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Constantly.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunctionParams`2"/> that takes any number of 
            arguments and returns x.
            </summary>
            <param name="x">Object to return.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunctionParams`2"/> when invoked returns x.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Contains">
            <summary>
            Returns true if key is present in the given collection, otherwise false. Note
            that for numerically indexed collections like vectors and arrays, this test is the 
            number key is within the range of indexes. <see cref="T:funclib.Components.Core.Contains"/> operates constant or 
            logarithmic time; it will not perform a linear search for a value.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Contains.Invoke(System.Object,System.Object)">
            <summary>
            Returns true if key is present in the given collection, otherwise false. Note
            that for numerically indexed collections like vectors and arrays, this test is the 
            number key is within the range of indexes. <see cref="T:funclib.Components.Core.Contains"/> operates constant or 
            logarithmic time; it will not perform a linear search for a value.
            </summary>
            <param name="coll">Collection to check if key exists.</param>
            <param name="key">Object to check if contains in the collection.</param>
            <remarks>
            <code>coll</code> can be either:
            - <see cref="T:funclib.Collections.IAssociative"/>,
            - <see cref="T:System.Collections.IDictionary"/>
            - <see cref="T:System.String"/>
            - <see cref="T:System.Array"/>
            - <see cref="T:funclib.Collections.Internal.ITransientSet"/>
            - <see cref="T:funclib.Collections.Internal.ITransientAssociative"/>
            - <see cref="T:funclib.Collections.ISet"/>
            
            <code>key</code> needs to be an <see cref="T:System.Int32"/> if coll is either a <see cref="T:System.String"/> or <see cref="T:System.Array"/>.
            </remarks>
            <returns>
            Returns a <see cref="T:System.Boolean"/>: true if key is present in the collection, otherwise false.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Count">
            <summary>
            Returns the number of items in the collection. Passing null as coll returns 0.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Count.Invoke(System.Object)">
            <summary>
            Returns the number of items in the collection. Passing null as coll returns 0.
            </summary>
            <param name="coll">Object to count the number of items exists in the collection.</param>
            <remarks>
            <code>coll</code> can be:
            - <see cref="T:funclib.Collections.ICounted"/>
            - <see cref="T:funclib.Collections.ICollection"/>
            - <see cref="T:System.String"/>
            - <see cref="T:System.Collections.ICollection"/>
            - <see cref="T:System.Collections.IDictionary"/>
            - <see cref="T:System.Collections.DictionaryEntry"/>
            - <see cref="T:funclib.Collections.KeyValuePair"/>
            - <see cref="T:System.Array"/>
            </remarks>
            <returns>
            Returns an <see cref="T:System.Int32"/> of the number of items in the collection.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Dec">
            <summary>
            Returns a number one less than num.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Dec.Invoke(System.Object)">
            <summary>
            Returns a number one less than num.
            </summary>
            <param name="x">A number to decrease by one.</param>
            <returns>
            Returns either a <see cref="T:System.Double"/> or <see cref="T:System.Int64"/> depending on 
            what type x is.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Deref">
            <summary>
            Returns the current state of <see cref="T:funclib.Components.Core.IDeref"/> variable.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Deref.Invoke(System.Object)">
            <summary>
            Returns the current state of <see cref="T:funclib.Components.Core.IDeref"/> variable.
            </summary>
            <param name="ref">Object that implements the <see cref="T:funclib.Components.Core.IDeref"/> interface.</param>
            <returns>
            Returns the current state of <see cref="T:funclib.Components.Core.IDeref"/> variable.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Disj">
            <summary>
            Disj[oin]. Returns a new set of the same concrete type, that 
            does not contain they key(s).
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Disj.Invoke(System.Object)">
            <summary>
            Disj[oin]. Returns a new set of the same concrete type, that 
            does not contain they key(s).
            </summary>
            <param name="set">Object that implements the <see cref="T:funclib.Collections.ISet"/> interface.</param>
            <returns>
            Returns the set object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Disj.Invoke(System.Object,System.Object)">
            <summary>
            Disj[oin]. Returns a new set of the same concrete type, that 
            does not contain they key(s).
            </summary>
            <param name="set">Object the implements the <see cref="T:funclib.Collections.ISet"/> interface.</param>
            <param name="key">Object to remove from the set.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.ISet"/> collection without the key.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Disj.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Disj[oin]. Returns a new set of the same concrete type, that 
            does not contain they key(s).
            </summary>
            <param name="set">Object the implements the <see cref="T:funclib.Collections.ISet"/> interface.</param>
            <param name="key">Object to remove from the set.</param>
            <param name="ks">An array of other object to remove from the set.</param>
            <returns>
            Returns null if the set parameter is null, otherwise removes all items from the
            <see cref="T:funclib.Collections.ISet"/> collection and returns a new <see cref="T:funclib.Collections.ISet"/> collection.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Disjǃ">
            <summary>
            Returns a <see cref="T:funclib.Collections.Internal.ITransientSet"/> of the same concrete type that
            does not contain key(s).
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Disjǃ.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.Internal.ITransientSet"/> of the same concrete type that
            does not contain key(s).
            </summary>
            <param name="set">Object that implements the <see cref="T:funclib.Collections.Internal.ITransientSet"/> interface.</param>
            <returns>
            Returns the set object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Disjǃ.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.Internal.ITransientSet"/> of the same concrete type that
            does not contain key(s).
            </summary>
            <param name="set">Object that implements the <see cref="T:funclib.Collections.Internal.ITransientSet"/> interface.</param>
            <param name="key">Object to remove from the set.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Internal.ITransientSet"/> without the key.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Disjǃ.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Collections.Internal.ITransientSet"/> of the same concrete type that
            does not contain key(s).
            </summary>
            <param name="set">Object that implements the <see cref="T:funclib.Collections.Internal.ITransientSet"/> interface.</param>
            <param name="key">Object to remove from the set.</param>
            <param name="ks">An array of other object to remove from the set.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Internal.ITransientSet"/> without all of the items.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Dissoc">
            <summary>
            Dissoc[iate]. Returns a new map of the same concrete type,
            that does not contain a mapping for the key(s).
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Dissoc.Invoke(System.Object)">
            <summary>
            Dissoc[iate]. Returns a new map of the same concrete type,
            that does not contain a mapping for the key(s).
            </summary>
            <param name="map">Object that implements the <see cref="T:funclib.Collections.IMap"/> interface.</param>
            <returns>
            Returns the map object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Dissoc.Invoke(System.Object,System.Object)">
            <summary>
            Dissoc[iate]. Returns a new map of the same concrete type,
            that does not contain a mapping for the key(s).
            </summary>
            <param name="map">Object that implements the <see cref="T:funclib.Collections.IMap"/> interface.</param>
            <param name="key">Key to be removed from the map.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.IMap"/> collection with out the key.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Dissoc.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Dissoc[iate]. Returns a new map of the same concrete type,
            that does not contain a mapping for the key(s).
            </summary>
            <param name="map">Object that implements the <see cref="T:funclib.Collections.IMap"/> interface.</param>
            <param name="key">Key to be removed from the map.</param>
            <param name="ks">An array of other object to remove from the map.</param>
            <returns>
            Returns null if the map parameter is null, otherwise removes all items from
            the <see cref="T:funclib.Collections.IMap"/> collection and returns a new <see cref="T:funclib.Collections.IMap"/> collection.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Dissocǃ">
            <summary>
            Returns a <see cref="T:funclib.Collections.Internal.ITransientMap"/> of the same concrete type that 
            doesn't contain the same <see cref="T:funclib.Collections.KeyValuePair"/>
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Dissocǃ.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.Internal.ITransientMap"/> of the same concrete type that 
            doesn't contain the same <see cref="T:funclib.Collections.KeyValuePair"/>
            </summary>
            <param name="map">Object that implements the <see cref="T:funclib.Collections.Internal.ITransientMap"/> interface.</param>
            <param name="key">Key for the <see cref="T:funclib.Collections.KeyValuePair"/> to remove from the map.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Internal.ITransientMap"/> collection without the given key.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Dissocǃ.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Collections.Internal.ITransientMap"/> of the same concrete type that 
            doesn't contain the same <see cref="T:funclib.Collections.KeyValuePair"/>
            </summary>
            <param name="map">Object that implements the <see cref="T:funclib.Collections.Internal.ITransientMap"/> interface.</param>
            <param name="key">Key for the <see cref="T:funclib.Collections.KeyValuePair"/> to remove from the map.</param>
            <param name="ks">An array of keys for the <see cref="T:funclib.Collections.KeyValuePair"/> to remove from the map.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Internal.ITransientMap"/> collection without all the given keys.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Distinct">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of elements of coll without duplicate values.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Distinct.Invoke">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of elements of coll without duplicate values.
            </summary>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> that returns a <see cref="T:funclib.Components.Core.Distinct.TransducerFunction"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Distinct.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of elements of coll without duplicate values.
            </summary>
            <param name="coll">A collection of items to return distinct with.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of unique items from coll.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Divide">
            <summary>
            Divides number(s).
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Divide.Invoke(System.Object)">
            <summary>
            Divides number(s).
            </summary>
            <param name="x">The numerator of the equation.</param>
            <returns>
            Returns either <see cref="T:System.Double"/> or <see cref="T:System.Int64"/> depending on the input. With 1 as the denominator.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Divide.Invoke(System.Object,System.Object)">
            <summary>
            Divides number(s).
            </summary>
            <param name="x">The denominator of the equation.</param>
            <param name="y">The numerator of the equation.</param>
            <returns>
            Returns either <see cref="T:System.Double"/> or <see cref="T:System.Int64"/> depending on the input for the equation: x/y
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Divide.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Divides number(s).
            </summary>
            <param name="x">The denominator of the equation.</param>
            <param name="y">The numerator of the equation.</param>
            <param name="more">Rest of the numerators applied left-to-right.</param>
            <returns>
            Returns either <see cref="T:System.Double"/> or <see cref="T:System.Int64"/> depending on the input for the equation: x/y/more...
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Do">
            <summary>
            Evaluates the expressions in order and returns the value of the last. 
            If no expressions are supplied, returns null.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Do.Invoke(System.Object[])">
            <summary>
            Evaluates the expressions in order and returns the value of the last. 
            If no expressions are supplied, returns null.
            </summary>
            <param name="rest">Objects array.</param>
            <returns>
            Returns the value of the last.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.DoAll">
            <summary>
            For <see cref="T:funclib.Components.Core.LazySeq"/> that are produced via other functions and have side effects. 
            The side effects are not produces until the sequence is consumed. <see cref="T:funclib.Components.Core.DoAll"/> 
            walks though successive next, retains the head and returns it, thus causing the 
            entire seq to reside in memory at one time.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.DoAll.Invoke(System.Object)">
            <summary>
            For <see cref="T:funclib.Components.Core.LazySeq"/> that are produced via other functions and have side effects. 
            The side effects are not produces until the sequence is consumed. <see cref="T:funclib.Components.Core.DoAll"/> 
            walks though successive next, retains the head and returns it, thus causing the 
            entire seq to reside in memory at one time.
            </summary>
            <param name="coll"><see cref="T:funclib.Components.Core.LazySeq"/> to consume.</param>
            <returns>
            Returns the <see cref="T:funclib.Components.Core.LazySeq"/> already consumed.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.DoAll.Invoke(System.Object,System.Object)">
            <summary>
            For <see cref="T:funclib.Components.Core.LazySeq"/> that are produced via other functions and have side effects. 
            The side effects are not produces until the sequence is consumed. <see cref="T:funclib.Components.Core.DoAll"/> 
            walks though successive next, retains the head and returns it, thus causing the 
            entire seq to reside in memory at one time.
            </summary>
            <param name="n">The <see cref="T:System.Int32"/> times to walk the sequence.</param>
            <param name="coll"><see cref="T:funclib.Components.Core.LazySeq"/> to consume.</param>
            <returns>
            Returns the <see cref="T:funclib.Components.Core.LazySeq"/> already consumed.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.DoRun">
            <summary>
            For <see cref="T:funclib.Components.Core.LazySeq"/> that are produced via other functions and have side effects. 
            The side effects are not produces until the sequence is consumed. <see cref="T:funclib.Components.Core.DoAll"/> 
            walks though successive next, retains the head and returns it, thus causing the 
            entire seq to reside in memory at one time.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.DoRun.Invoke(System.Object)">
            <summary>
            For <see cref="T:funclib.Components.Core.LazySeq"/> that are produced via other functions and have side effects. 
            The side effects are not produces until the sequence is consumed. <see cref="T:funclib.Components.Core.DoAll"/> 
            walks though successive next, retains the head and returns it, thus causing the 
            entire seq to reside in memory at one time.
            </summary>
            <param name="coll">A <see cref="T:funclib.Components.Core.LazySeq"/> to consume.</param>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.DoRun.Invoke(System.Object,System.Object)">
            <summary>
            For <see cref="T:funclib.Components.Core.LazySeq"/> that are produced via other functions and have side effects. 
            The side effects are not produces until the sequence is consumed. <see cref="T:funclib.Components.Core.DoAll"/> 
            walks though successive next, retains the head and returns it, thus causing the 
            entire seq to reside in memory at one time.
            </summary>
            <param name="n">The <see cref="T:System.Int32"/> times to walk the sequence.</param>
            <param name="coll"><see cref="T:funclib.Components.Core.LazySeq"/> to consume.</param>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.DoTimes">
            <summary>
            Repeatedly execute body (presumably for side-effects).
            </summary>
        </member>
        <member name="M:funclib.Components.Core.DoTimes.#ctor(System.Int32,System.Func{System.Int32,System.Object})">
            <summary>
            Constructor for the <see cref="T:funclib.Components.Core.DoTimes"/> class.
            </summary>
            <param name="n">Number of times to execute the fn.</param>
            <param name="fn">The function to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.DoTimes.#ctor(System.Int32,funclib.Components.Core.Generic.IFunction{System.Int32,System.Object})">
            <summary>
            Constructor for the <see cref="T:funclib.Components.Core.DoTimes"/> class.
            </summary>
            <param name="n">Number of times to execute the fn.</param>
            <param name="fn">The function to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.DoTimes.Invoke">
            <summary>
            Executes the function x time.
            </summary>
            <returns>Returns null.</returns>
        </member>
        <member name="T:funclib.Components.Core.Drop">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of all but the first n items in coll.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Drop.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of all but the first n items in coll.
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> of the items to drop from the collection.</param>
            <param name="coll">The collection to drop the first x items from.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of items without the first x items.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.DropLast">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of all but the last n items. Default is 1.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.DropLast.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of all but the last n items. Default is 1.
            </summary>
            <param name="coll">Collection of items to remove the last one from.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> with all but the last item.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.DropLast.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of all but the last n items. Default is 1.
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> of the last times from the collection.</param>
            <param name="coll">The collection to remove from.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of items without the last n items.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.DropWhile">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the items in coll starting from the first item 
            for which the predicate returns a logical false.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.DropWhile.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the items in coll starting from the first item 
            for which the predicate returns a logical false.
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="coll">List of times to process.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> with items starting from the first logically false item in coll.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Empty">
            <summary>
            Returns an empty <see cref="T:funclib.Collections.ICollection"/> of the same category as coll or null.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Empty.Invoke(System.Object)">
            <summary>
            Returns an empty <see cref="T:funclib.Collections.ICollection"/> of the same category as coll or null.
            </summary>
            <param name="coll">An object to empty.</param>
            <returns>
            Returns an empty <see cref="T:funclib.Collections.ICollection"/> of the same category as coll. If coll
            doesn't implement the <see cref="T:funclib.Collections.ICollection"/> interface returns null.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.EnsureReduced">
            <summary>
            If x is already <see cref="T:funclib.Components.Core.IsReduced"/>, return it else return <see cref="T:funclib.Components.Core.Reduced"/> value.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.EnsureReduced.Invoke(System.Object)">
            <summary>
            If x is already <see cref="T:funclib.Components.Core.IsReduced"/>, return it else return <see cref="T:funclib.Components.Core.Reduced"/> value.
            </summary>
            <param name="x">Object to reduce or not.</param>
            <returns>
            If x is already <see cref="T:funclib.Components.Core.IsReduced"/>, return it else return <see cref="T:funclib.Components.Core.Reduced"/> value.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.EveryPred">
            <summary>
            Takes a set of predicates, <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>, and returns a <see cref="T:funclib.Components.Core.IFunction"/>. This
            function composes all the predicates that returns a logical true value against all of its arguments, else
            it returns false. Note: f is short-circuiting in that it will stop execution on the first
            argument that triggers a logical false result against the original predicates.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.EveryPred.Invoke(System.Object)">
            <summary>
            Takes a set of predicates, <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>, and returns a <see cref="T:funclib.Components.Core.IFunction"/>. This
            function composes all the predicates that returns a logical true value against all of its arguments, else
            it returns false. Note: f is short-circuiting in that it will stop execution on the first
            argument that triggers a logical false result against the original predicates.
            </summary>
            <param name="p">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <returns>
            Returns <see cref="!:true"/> if p returns a logical true, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.EveryPred.Invoke(System.Object,System.Object)">
            <summary>
            Takes a set of predicates, <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>, and returns a <see cref="T:funclib.Components.Core.IFunction"/>. This
            function composes all the predicates that returns a logical true value against all of its arguments, else
            it returns false. Note: f is short-circuiting in that it will stop execution on the first
            argument that triggers a logical false result against the original predicates.
            </summary>
            <param name="p1">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="p2">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <returns>
            Returns <see cref="!:true"/> if p returns a logical true, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.EveryPred.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Takes a set of predicates, <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>, and returns a <see cref="T:funclib.Components.Core.IFunction"/>. This
            function composes all the predicates that returns a logical true value against all of its arguments, else
            it returns false. Note: f is short-circuiting in that it will stop execution on the first
            argument that triggers a logical false result against the original predicates.
            </summary>
            <param name="p1">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="p2">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="p3">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <returns>
            Returns <see cref="!:true"/> if p returns a logical true, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.EveryPred.Invoke(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Takes a set of predicates, <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>, and returns a <see cref="T:funclib.Components.Core.IFunction"/>. This
            function composes all the predicates that returns a logical true value against all of its arguments, else
            it returns false. Note: f is short-circuiting in that it will stop execution on the first
            argument that triggers a logical false result against the original predicates.
            </summary>
            <param name="p1">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="p2">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="p3">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="ps">Rest of objects that implement <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <returns>
            Returns <see cref="!:true"/> if p returns a logical true, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.EveryPred.Function">
            <summary>
            Internal function that does the <see cref="T:funclib.Components.Core.EveryPred"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.EveryPred.Function.Invoke">
            <summary>
            Returns <see cref="!:true"/>.
            </summary>
            <returns>
            Always returns <see cref="!:true"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.EveryPred.Function.Invoke(System.Object)">
            <summary>
            Returns the result of executing the supplied predicates.
            </summary>
            <param name="x">The object to test the predicates with.</param>
            <returns>
            Returns <see cref="!:true"/> if p returns a logical true, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.EveryPred.Function.Invoke(System.Object,System.Object)">
            <summary>
            Returns the result of executing the supplied predicates.
            </summary>
            <param name="x">First object to test the predicates with.</param>
            <param name="y">Second object to test the predicates with.</param>
            <returns>
            Returns <see cref="!:true"/> if p returns a logical true, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.EveryPred.Function.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns the result of executing the supplied predicates.
            </summary>
            <param name="x">First object to test the predicates with.</param>
            <param name="y">Second object to test the predicates with.</param>
            <param name="z">Third object to test the predicates with.</param>
            <returns>
            Returns <see cref="!:true"/> if p returns a logical true, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.EveryPred.Function.Invoke(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Returns the result of executing the supplied predicates.
            </summary>
            <param name="x">First object to test the predicates with.</param>
            <param name="y">Second object to test the predicates with.</param>
            <param name="z">Third object to test the predicates with.</param>
            <param name="args">Rest of the objects being tested.</param>
            <returns>
            Returns <see cref="!:true"/> if p returns a logical true, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Falsy">
            <summary>
            Returns <see cref="!:true"/> if the object is a logical false. i.e. 
            If source is null or source is bool and that value is false.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Falsy.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if the object is a logical false. i.e. 
            If source is null or source is bool and that value is false.
            </summary>
            <param name="source">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if the object is a logical false. i.e. 
            If source is null or source is bool and that value is false.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.FFirst">
            <summary>
            Returns the first item's first item. Same as <see cref="!:First.Invoke(First.Invoke(object))"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.FFirst.Invoke(System.Object)">
            <summary>
            Returns the first item's first item. Same as <see cref="!:First.Invoke(First.Invoke(object))"/>.
            </summary>
            <param name="x">Object to return the first item's first item.</param>
            <returns>
            Returns the first item's first item
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Filter">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of items in coll for which predicate returns a logical true.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Filter.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of items in coll for which predicate returns a logical true.
            </summary>
            <param name="pred">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">An object to test.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of items in coll for which predicate returns a logical true.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Find">
            <summary>
            Returns the <see cref="T:funclib.Collections.KeyValuePair"/> for the key, or null if key is not present.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Find.Invoke(System.Object,System.Object)">
            <summary>
            Returns the <see cref="T:funclib.Collections.KeyValuePair"/> for the key, or null if key is not present.
            </summary>
            <param name="map">An object that implements either <see cref="T:funclib.Collections.IAssociative"/>, <see cref="T:System.Collections.IDictionary"/> or <see cref="T:funclib.Collections.Internal.ITransientAssociative"/> interface.</param>
            <param name="key">The key we want to find in the map.</param>
            <returns>
            Returns the <see cref="T:funclib.Collections.KeyValuePair"/> for the key, or null if key is not present.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.First">
            <summary>
            Returns the first time in the collection. Calls <see cref="T:funclib.Components.Core.Seq"/> on the collection.
            If coll is null, return null.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.First.Invoke(System.Object)">
            <summary>
            Returns the first time in the collection. Calls <see cref="T:funclib.Components.Core.Seq"/> on the collection.
            If coll is null, return null.
            </summary>
            <param name="coll">An object that is <see cref="T:funclib.Components.Core.Seq"/>able.</param>
            <returns>
            Returns the first time in the collection. Calls <see cref="T:funclib.Components.Core.Seq"/> on the collection.
            If coll is null, return null.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Flatten">
            <summary>
            Takes any nested combination of <see cref="T:funclib.Collections.ISequential"/> 
            things (<see cref="T:funclib.Collections.List"/>, <see cref="T:funclib.Collections.Vector"/>, etc.) and returns
            their contents as a single, flat sequence.  <see cref="!:Flatten.Invoke(null)"/> returns an
            empty sequence.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Flatten.Invoke(System.Object)">
            <summary>
            Takes any nested combination of <see cref="T:funclib.Collections.ISequential"/> 
            things (<see cref="T:funclib.Collections.List"/>, <see cref="T:funclib.Collections.Vector"/>, etc.) and returns
            their contents as a single, flat sequence.  <see cref="!:Flatten.Invoke(null)"/> returns an
            empty sequence.
            </summary>
            <param name="x">Object to flatten.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> that when invoked flattens the sequence.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.FNext">
            <summary>
            Returns the first item's next list. Same as <see cref="!:First.Invoke(Next.Invoke(object))"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.FNext.Invoke(System.Object)">
            <summary>
            Returns the first item's next list. Same as <see cref="!:First.Invoke(Next.Invoke(object))"/>.
            </summary>
            <param name="x">Object to return the first item's next list.</param>
            <returns>
            Returns the first item's next list.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.FNull">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f, and returns a <see cref="T:funclib.Components.Core.FNull.Function"/> that calls f, replacing
            a null first argument with the supplied value x. Higher arity versions can replace arguments in
            the second and third positions.  Note: that the function f can take any number of arguments,
            not just the one(s) being null-patched.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.FNull.Invoke(System.Object,System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f, and returns a <see cref="T:funclib.Components.Core.FNull.Function"/> that calls f, replacing
            a null first argument with the supplied value x. Higher arity versions can replace arguments in
            the second and third positions.  Note: that the function f can take any number of arguments,
            not just the one(s) being null-patched.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Object to replace a first parameter passed thats null.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.FNull.Function"/> that is null-patched.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.FNull.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f, and returns a <see cref="T:funclib.Components.Core.FNull.Function"/> that calls f, replacing
            a null first argument with the supplied value x. Higher arity versions can replace arguments in
            the second and third positions.  Note: that the function f can take any number of arguments,
            not just the one(s) being null-patched.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Object to replace a first parameter passed thats null.</param>
            <param name="y">Object to replace a second parameter passed thats null.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.FNull.Function"/> that is null-patched.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.FNull.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f, and returns a <see cref="T:funclib.Components.Core.FNull.Function"/> that calls f, replacing
            a null first argument with the supplied value x. Higher arity versions can replace arguments in
            the second and third positions.  Note: that the function f can take any number of arguments,
            not just the one(s) being null-patched.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Object to replace a first parameter passed thats null.</param>
            <param name="y">Object to replace a second parameter passed thats null.</param>
            <param name="z">Object to replace a third parameter passed thats null.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.FNull.Function"/> that is null-patched.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.FNull.Function">
            <summary>
            Internal function that does the <see cref="T:funclib.Components.Core.FNull"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.FNull.Function.Invoke(System.Object)">
            <summary>
            Execute the <see cref="T:funclib.Components.Core.IFunction"/>
            </summary>
            <param name="a">Parameter of the function.</param>
            <returns>
            Returns the results of invoking the <see cref="T:funclib.Components.Core.IFunction"/> function.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.FNull.Function.Invoke(System.Object,System.Object)">
            <summary>
            Execute the <see cref="T:funclib.Components.Core.IFunction"/>
            </summary>
            <param name="a">First parameter of the function.</param>
            <param name="b">Second parameter of the function.</param>
            <returns>
            Returns the results of invoking the <see cref="T:funclib.Components.Core.IFunction"/> function.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.FNull.Function.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Execute the <see cref="T:funclib.Components.Core.IFunction"/>
            </summary>
            <param name="a">First parameter of the function.</param>
            <param name="b">Second parameter of the function.</param>
            <param name="c">Third parameter of the function.</param>
            <returns>
            Returns the results of invoking the <see cref="T:funclib.Components.Core.IFunction"/> function.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.FNull.Function.Invoke(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Execute the <see cref="T:funclib.Components.Core.IFunction"/>
            </summary>
            <param name="a">First parameter of the function.</param>
            <param name="b">Second parameter of the function.</param>
            <param name="c">Third parameter of the function.</param>
            <param name="ds">Rest of the parameters of the function.</param>
            <returns>
            Returns the results of invoking the <see cref="T:funclib.Components.Core.IFunction"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Format">
            <summary>
            Formats a string using <see cref="M:System.String.Format(System.String,System.Object[])"/> format syntax.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Format.Invoke(System.Object,System.Object[])">
            <summary>
            Formats a string using <see cref="M:System.String.Format(System.String,System.Object[])"/> format syntax.
            </summary>
            <param name="fmt">The string to be formatted.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>
            Returns the formated <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Frequencies">
            <summary>
            Returns a map from distinct items in coll to the number of times they appear.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Frequencies.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.HashMap"/> from distinct items in coll to the number of times they appear.
            </summary>
            <param name="coll">An object to run distinct against.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.HashMap"/> from distinct items in coll to the number of times they appear.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Generic.FunctionParams`5">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.FunctionParams`5"/> from a <see cref="!:Func&lt;T1, T2, T3, T4[], TResult&gt;"/>.
            </summary>
            <typeparam name="T1">First parameter of the function.</typeparam>
            <typeparam name="T2">Second parameter of the function.</typeparam>
            <typeparam name="T3">Third parameter of the function.</typeparam>
            <typeparam name="TRest">Generic type of the rest of the parameters.</typeparam>
            <typeparam name="TResult">Generic type of the return object.</typeparam>
        </member>
        <member name="M:funclib.Components.Core.Generic.FunctionParams`5.#ctor(System.Func{`0,`1,`2,`3[],`4})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.FunctionParams`5"/> from a <see cref="!:Func&lt;T1, T2, T3, T4[], TResult&gt;"/>.
            </summary>
            <param name="x">A <see cref="!:Func&lt;T1, T2, T3, T4[], TResult&gt;"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Generic.FunctionParams`5.Invoke(`0,`1,`2,`3[])">
            <summary>
            Invokes the <see cref="!:Func&lt;T1, T2, T3, T4[], TResult&gt;"/>.
            </summary>
            <param name="x">First parameter of the function.</param>
            <param name="y">Second parameter of the function.</param>
            <param name="z">Third parameter of the function.</param>
            <param name="args">Array of parameters.</param>
            <returns>
            Returns the results of the <see cref="!:Func&lt;T1, T2, T3, T4[], TResult&gt;"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Generic.FunctionParams`4">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.FunctionParams`4"/> from a <see cref="!:Func&lt;T1, T2, T3[], TResult&gt;"/>.
            </summary>
            <typeparam name="T1">First parameter of the function.</typeparam>
            <typeparam name="T2">Second parameter of the function.</typeparam>
            <typeparam name="TRest">Generic type of the rest of the parameters.</typeparam>
            <typeparam name="TResult">Generic type of the return object.</typeparam>
        </member>
        <member name="M:funclib.Components.Core.Generic.FunctionParams`4.#ctor(System.Func{`0,`1,`2[],`3})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.FunctionParams`4"/> from a <see cref="!:Func&lt;T1, T2, T3[], TResult&gt;"/>.
            </summary>
            <param name="x">A <see cref="!:Func&lt;T1, T2, T3[], TResult&gt;"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Generic.FunctionParams`4.Invoke(`0,`1,`2[])">
            <summary>
            Invokes the <see cref="!:Func&lt;T1, T2, T3[], TResult&gt;"/>.
            </summary>
            <param name="x">First parameter of the function.</param>
            <param name="y">Second parameter of the function.</param>
            <param name="args">Array of parameters.</param>
            <returns>
            Returns the results of the <see cref="!:Func&lt;T1, T2, T3[], TResult&gt;"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Generic.FunctionParams`3">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.FunctionParams`3"/> from a <see cref="!:Func&lt;T1, T2[], TResult&gt;"/>.
            </summary>
            <typeparam name="T1">First parameter of the function.</typeparam>
            <typeparam name="TRest">Generic type of the rest of the parameters.</typeparam>
            <typeparam name="TResult">Generic type of the return object.</typeparam>
        </member>
        <member name="M:funclib.Components.Core.Generic.FunctionParams`3.#ctor(System.Func{`0,`1[],`2})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.FunctionParams`3"/> from a <see cref="!:Func&lt;T1, T2[], TResult&gt;"/>.
            </summary>
            <param name="x">A <see cref="!:Func&lt;T1, T2[], TResult&gt;"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Generic.FunctionParams`3.Invoke(`0,`1[])">
            <summary>
            Invokes the <see cref="!:Func&lt;T1, T2[], TResult&gt;"/>.
            </summary>
            <param name="x">First parameter of the function.</param>
            <param name="args">Array of parameters.</param>
            <returns>
            Returns the results of the <see cref="!:Func&lt;T1, T2[], TResult&gt;"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Generic.FunctionParams`2">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.FunctionParams`2"/> from a <see cref="!:Func&lt;T1[], TResult&gt;"/>.
            </summary>
            <typeparam name="TRest">Generic type of the parameter array.</typeparam>
            <typeparam name="TResult">Generic type of the return object.</typeparam>
        </member>
        <member name="M:funclib.Components.Core.Generic.FunctionParams`2.#ctor(System.Func{`0[],`1})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.FunctionParams`2"/> from a <see cref="!:Func&lt;T1[], TResult&gt;"/>.
            </summary>
            <param name="x">A <see cref="!:Func&lt;T1[], TResult&gt;"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Generic.FunctionParams`2.Invoke(`0[])">
            <summary>
            Invokes the <see cref="!:Func&lt;T1[], TResult&gt;"/>.
            </summary>
            <param name="args">Array of parameters of the function.</param>
            <returns>
            Returns the results of the <see cref="!:Func&lt;T1[], TResult&gt;"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Generic.Function`7">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`7"/> from a <see cref="T:System.Func`7"/>.
            </summary>
            <typeparam name="T1">Generic type of the first input object.</typeparam>
            <typeparam name="T2">Generic type of the second input object.</typeparam>
            <typeparam name="T3">Generic type of the third input object.</typeparam>
            <typeparam name="T4">Generic type of the fourth input object.</typeparam>
            <typeparam name="T5">Generic type of the fifth input object.</typeparam>
            <typeparam name="T6">Generic type of the sixth input object.</typeparam>
            <typeparam name="TResult">Generic type of the return object.</typeparam>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`7.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`7"/> from a <see cref="T:System.Func`7"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`7"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`7.Invoke(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the <see cref="T:System.Func`6"/>.
            </summary>
            <param name="a">First parameter of the function.</param>
            <param name="b">Second parameter of the function.</param>
            <param name="c">Third parameter of the function.</param>
            <param name="d">Fourth parameter of the function.</param>
            <param name="e">Fifth parameter of the function.</param>
            <param name="f">Sixth parameter of the function.</param>
            <returns>
            Returns the results of the <see cref="T:System.Func`7"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Generic.Function`6">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`6"/> from a <see cref="T:System.Func`6"/>.
            </summary>
            <typeparam name="T1">Generic type of the first input object.</typeparam>
            <typeparam name="T2">Generic type of the second input object.</typeparam>
            <typeparam name="T3">Generic type of the third input object.</typeparam>
            <typeparam name="T4">Generic type of the fourth input object.</typeparam>
            <typeparam name="T5">Generic type of the fifth input object.</typeparam>
            <typeparam name="TResult">Generic type of the return object.</typeparam>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`6.#ctor(System.Func{`0,`1,`2,`3,`4,`5})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`6"/> from a <see cref="T:System.Func`6"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`6"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`6.Invoke(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the <see cref="T:System.Func`5"/>.
            </summary>
            <param name="a">First parameter of the function.</param>
            <param name="b">Second parameter of the function.</param>
            <param name="c">Third parameter of the function.</param>
            <param name="d">Fourth parameter of the function.</param>
            <param name="e">Fifth parameter of the function.</param>
            <returns>
            Returns the results of the <see cref="T:System.Func`6"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Generic.Function`5">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`5"/> from a <see cref="T:System.Func`5"/>.
            </summary>
            <typeparam name="T1">Generic type of the first input object.</typeparam>
            <typeparam name="T2">Generic type of the second input object.</typeparam>
            <typeparam name="T3">Generic type of the third input object.</typeparam>
            <typeparam name="T4">Generic type of the fourth input object.</typeparam>
            <typeparam name="TResult">Generic type of the return object.</typeparam>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`5.#ctor(System.Func{`0,`1,`2,`3,`4})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`5"/> from a <see cref="T:System.Func`5"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`5"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`5.Invoke(`0,`1,`2,`3)">
            <summary>
            Invokes the <see cref="T:System.Func`5"/>.
            </summary>
            <param name="a">First parameter of the function.</param>
            <param name="b">Second parameter of the function.</param>
            <param name="c">Third parameter of the function.</param>
            <param name="d">Fourth parameter of the function.</param>
            <returns>
            Returns the results of the <see cref="T:System.Func`5"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Generic.Function`4">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`4"/> from a <see cref="T:System.Func`4"/>.
            </summary>
            <typeparam name="T1">Generic type of the first input object.</typeparam>
            <typeparam name="T2">Generic type of the second input object.</typeparam>
            <typeparam name="T3">Generic type of the third input object.</typeparam>
            <typeparam name="TResult">Generic type of the return object.</typeparam>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`4.#ctor(System.Func{`0,`1,`2,`3})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`4"/> from a <see cref="T:System.Func`4"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`4"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`4.Invoke(`0,`1,`2)">
            <summary>
            Invokes the <see cref="T:System.Func`4"/>.
            </summary>
            <param name="x">First parameter of the function.</param>
            <param name="y">Second parameter of the function.</param>
            <param name="z">Third parameter of the function.</param>
            <returns>
            Returns the results of the <see cref="T:System.Func`4"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Generic.Function`3">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`3"/> from a <see cref="T:System.Func`3"/>.
            </summary>
            <typeparam name="T1">Generic type of the first input object.</typeparam>
            <typeparam name="T2">Generic type of the second input object.</typeparam>
            <typeparam name="TResult">Generic type of the return object.</typeparam>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`3.#ctor(System.Func{`0,`1,`2})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`3"/> from a <see cref="T:System.Func`3"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`3"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`3.Invoke(`0,`1)">
            <summary>
            Invokes the <see cref="T:System.Func`3"/>.
            </summary>
            <param name="x">First parameter of the function.</param>
            <param name="y">Second parameter of the function.</param>
            <returns>
            Returns the results of the <see cref="T:System.Func`3"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Generic.Function`2">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`2"/> from a <see cref="T:System.Func`2"/>.
            </summary>
            <typeparam name="T1">Generic type of the input object.</typeparam>
            <typeparam name="TResult">Generic type of the return object.</typeparam>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`2.#ctor(System.Func{`0,`1})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`2"/> from a <see cref="T:System.Func`2"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`2"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`2.Invoke(`0)">
            <summary>
            Invokes the <see cref="T:System.Func`2"/>.
            </summary>
            <param name="x">First parameter of the function.</param>
            <returns>
            Returns the results of the <see cref="T:System.Func`2"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Generic.Function`1">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`1"/> from a <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="TResult">Generic type of the return object.</typeparam>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`1.#ctor(System.Func{`0})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`1"/> from a <see cref="T:System.Func`1"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`1"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Generic.Function`1.Invoke">
            <summary>
            Invokes the <see cref="T:System.Func`1"/>.
            </summary>
            <returns>
            Returns the results of the <see cref="T:System.Func`1"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Get">
            <summary>
            Returns the value mapped to the key, notFound or null if key is not present.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Get.Invoke(System.Object,System.Object)">
            <summary>
            Returns the value mapped to the key, notFound or null if key is not present.
            </summary>
            <param name="map">Object to pull key from.</param>
            <param name="key">If object is a map object, key is the key, otherwise key is an integer of the index.</param>
            <returns>
            Returns the value mapped to the key, notFound or null if key is not present.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Get.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns the value mapped to the key, notFound or null if key is not present.
            </summary>
            <param name="map">Object to pull key from.</param>
            <param name="key">If object is a map object, key is the key, otherwise key is an integer of the index.</param>
            <param name="notFound">Object that returns if the key is not found.</param>
            <returns>
            Returns the value mapped to the key, notFound or null if key is not present.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.GetIn">
            <summary>
            Returns the value in a nested associative structure, where ks
            is a sequence of keys. Returns null if the key is not present,
            otherwise notFound value if supplied.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.GetIn.Invoke(System.Object,System.Object)">
            <summary>
            Returns the value in a nested associative structure, where ks
            is a sequence of keys. Returns null if the key is not present,
            otherwise notFound value if supplied.
            </summary>
            <param name="m">Object to pull the final key from.</param>
            <param name="ks">Sequence of keys.</param>
            <returns>
            Returns the key found otherwise null.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.GetIn.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns the value in a nested associative structure, where ks
            is a sequence of keys. Returns null if the key is not present,
            otherwise notFound value if supplied.
            </summary>
            <param name="m">Object to pull the final key from.</param>
            <param name="ks">Sequence of keys.</param>
            <param name="notFound">Object to return if key is not found.</param>
            <returns>
            Returns the key found otherwise notFound.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.GetValidator">
            <summary>
            Gets the validator function for a <see cref="T:funclib.Components.Core.IRef"/> variable.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.GetValidator.Invoke(System.Object)">
            <summary>
            Gets the validator function for a <see cref="T:funclib.Components.Core.IRef"/> variable.
            </summary>
            <param name="ref">An object that implements the <see cref="T:funclib.Components.Core.IRef"/> interface.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.IFunction"/> that takes one parameter.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.GroupBy">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.HashMap"/> of elements of coll keyed by the result of 
            <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> f. The value at each key will be a 
            <see cref="T:funclib.Components.Core.Vector"/> of the corresponding elements, in the order they appeared 
            in coll.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.GroupBy.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.HashMap"/> of elements of coll keyed by the result of 
            <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> f. The value at each key will be a 
            <see cref="T:funclib.Components.Core.Vector"/> of the corresponding elements, in the order they appeared 
            in coll.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">A collection of items to group by.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.HashMap"/> of elements of coll keyed by the result of 
            <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> f.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.HashMap">
            <summary>
            Returns a new <see cref="T:funclib.Collections.HashMap"/> with the supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Assoc"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.HashMap.Invoke">
            <summary>
            Returns a new <see cref="T:funclib.Collections.HashMap"/> with the supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Assoc"/>.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.HashMap.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.HashMap.Invoke(System.Object[])">
            <summary>
            Returns a new <see cref="T:funclib.Collections.HashMap"/> with the supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Assoc"/>.
            </summary>
            <param name="keyvals">Key/value pairs adding to the <see cref="T:funclib.Collections.HashMap"/> data structure.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.HashMap"/> with the supplied mappings.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.HashSet">
            <summary>
            Returns a new <see cref="T:funclib.Collections.HashSet"/> with the supplied keys. Any 
            equal keys are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Conj"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.HashSet.Invoke">
            <summary>
            Returns a new <see cref="T:funclib.Collections.HashSet"/> with the supplied keys. Any 
            equal keys are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Conj"/>.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.HashSet.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.HashSet.Invoke(System.Object[])">
            <summary>
            Returns a new <see cref="T:funclib.Collections.HashSet"/> with the supplied keys. Any 
            equal keys are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Conj"/>.
            </summary>
            <param name="keys">Keys to add to <see cref="T:funclib.Collections.HashSet"/> data structure.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.HashSet"/> with the supplied keys.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IAtom">
            <summary>
            The interface for a <see cref="T:funclib.Components.Core.IAtom"/> variable.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IAtom.Swap(System.Object)">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IAtom.Swap(System.Object,System.Object)">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Second parameter of the function.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IAtom.Swap(System.Object,System.Object,System.Object)">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Second parameter of the function.</param>
            <param name="y">Third parameter of the function.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IAtom.Swap(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Second parameter of the function.</param>
            <param name="y">Third parameter of the function.</param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:funclib.Components.Core.IAtom.CompareAndSet(System.Object,System.Object)">
            <summary>
            Atomically sets the value of the <see cref="T:funclib.Components.Core.IAtom"/>
            to the new value if and only if the current value of 
            the <see cref="T:funclib.Components.Core.IAtom"/> is identical to the oldVal.
            Returns <see cref="!:true"/> if set happened, otherwise <see cref="!:false"/>.
            </summary>
            <param name="oldVal">Current state of the atom.</param>
            <param name="newVal">New state of the atom after successful swap.</param>
            <returns>
            Returns <see cref="!:true"/> if set happened, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IAtom.Reset(System.Object)">
            <summary>
            Sets the value of the <see cref="T:funclib.Components.Core.IAtom"/> to a new value. Returns
            <see cref="T:funclib.Collections.IVector"/> of the old, new, the value of the <see cref="T:funclib.Components.Core.IAtom"/>
            before and after the rest.
            </summary>
            <param name="newVal">New state of the atom after successful reset.</param>
            <returns>
            Returns <see cref="T:funclib.Collections.IVector"/> of the old, new, the value of the <see cref="T:funclib.Components.Core.IAtom"/>
            before and after the rest.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Identity">
            <summary>
            Returns its argument.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Identity.Invoke(System.Object)">
            <summary>
            Returns its argument.
            </summary>
            <param name="x">Argument to return.</param>
            <returns>
            Returns its argument.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Inc">
            <summary>
            Returns a number one greater than x.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Inc.Invoke(System.Object)">
            <summary>
            Returns a number one greater than x.
            </summary>
            <param name="x">Number to incremental by one.</param>
            <returns>
            Returns a number one greater than x.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Interleave">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Interleave.Invoke">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.List.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Interleave.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </summary>
            <param name="c1">The collection returned lazily.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of c1.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Interleave.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </summary>
            <param name="c1">First collection to interleave.</param>
            <param name="c2">Second collection to interleave.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Interleave.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </summary>
            <param name="c1">First collection to interleave.</param>
            <param name="c2">Second collection to interleave.</param>
            <param name="colls">Rest of the collections to interleave.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Interpose">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of elements separated by sep.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Interpose.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of elements separated by sep.
            </summary>
            <param name="sep">Separator object.</param>
            <param name="coll">Collection to insert the separtor with.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of elements separated by sep.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Into">
            <summary>
            Returns a new collection consisting of to with all of the items of from conjoined.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Into.Invoke">
            <summary>
            Returns a new collection consisting of to with all of the items of from conjoined.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.Vector.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Into.Invoke(System.Object)">
            <summary>
            Returns a new collection consisting of to with all of the items of from conjoined.
            </summary>
            <param name="to">Object returned.</param>
            <returns>
            Returns the to object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Into.Invoke(System.Object,System.Object)">
            <summary>
            Returns a new collection consisting of to with all of the items of from conjoined.
            </summary>
            <param name="to">Object to conjoin values to.</param>
            <param name="from">Object pulling values to be conjoined.</param>
            <returns>
            Returns a new collection with the same data type of to consisting of to with all of the items of from conjoined.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Into.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns a new collection consisting of to with all of the items of from conjoined. 
            </summary>
            <param name="to">Object to conjoin values to.</param>
            <param name="xform">A transducer</param>
            <param name="from">Object pulling values to be conjoined.</param>
            <returns>
            Returns a new collection with the same data type of to consisting of to with all of the items of from conjoined.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.InvokeFunction">
            <summary>
            Invokes a <see cref="T:funclib.Components.Core.IFunction"/> function with supplied arguments.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.InvokeFunction.Invoke(System.Object)">
            <summary>
            Invokes a <see cref="T:funclib.Components.Core.IFunction"/> function with supplied arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Returns the result of calling f with no parameters.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.InvokeFunction.Invoke(System.Object,System.Object)">
            <summary>
            Invokes a <see cref="T:funclib.Components.Core.IFunction"/> function with supplied arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">First parameter for the function.</param>
            <returns>
            Returns the result of calling f with one parameters.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.InvokeFunction.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Invokes a <see cref="T:funclib.Components.Core.IFunction"/> function with supplied arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">First parameter for the function.</param>
            <param name="y">Second parameter for the function.</param>
            <returns>
            Returns the result of calling f with two parameters.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.InvokeFunction.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Invokes a <see cref="T:funclib.Components.Core.IFunction"/> function with supplied arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">First parameter for the function.</param>
            <param name="y">Second parameter for the function.</param>
            <param name="z">Third parameter for the function.</param>
            <returns>
            Returns the result of calling f with three parameters.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.InvokeFunction.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Invokes a <see cref="T:funclib.Components.Core.IFunction"/> function with supplied arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="a">First parameter for the function.</param>
            <param name="b">Second parameter for the function.</param>
            <param name="c">Third parameter for the function.</param>
            <param name="ds">Rest of the parameter for the function.</param>
            <returns>
            Returns the result of calling f with all parameters.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IRef">
            <summary>
            Interface for a <see cref="T:funclib.Components.Core.IRef"/> variable.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IRef.SetValidator(funclib.Components.Core.IFunction)">
            <summary>
            Sets the validator, which will validate the value being set to the <see cref="T:funclib.Components.Core.IRef"/>.
            </summary>
            <param name="vf">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
        </member>
        <member name="M:funclib.Components.Core.IRef.GetValidator">
            <summary>
            Returns the current validator function.
            </summary>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.IFunction"/> object of the validator.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IRef.GetWatches">
            <summary>
            Returns the current watches and their functions.
            </summary>
            <returns>
            Returns a <see cref="T:funclib.Collections.IMap"/> with the key/value pair being set to the name of the 
            watch and the function to execute.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IRef.AddWatch(System.Object,funclib.Components.Core.IFunction)">
            <summary>
            Adds a watch function to the <see cref="T:funclib.Components.Core.IRef"/> variable.
            </summary>
            <param name="key">Unique name of the watch.</param>
            <param name="callback">An object that implement the <see cref="T:funclib.Components.Core.IFunction"/> that takes 4 args:
            a key, the reference, its old-state, its new state.</param>
            <returns>
            Returns the reference to the <see cref="T:funclib.Components.Core.IRef"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IRef.RemoveWatch(System.Object)">
            <summary>
            Removes a watch currently on the <see cref="T:funclib.Components.Core.IRef"/>.
            </summary>
            <param name="key">Unique name of the watch to remove.</param>
            <returns>
            Returns the reference to the <see cref="T:funclib.Components.Core.IRef"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsAny">
            <summary>
            Returns <see cref="!:true"/> given any argument.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsAny.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> given any argument.
            </summary>
            <param name="x">Given argument.</param>
            <returns>
            Returns <see cref="!:true"/> given any argument.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsAssociative">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.IAssociative"/> interface, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsAssociative.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.IAssociative"/> interface, otherwise <see cref="!:false"/>.
            </summary>
            <param name="coll">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.IAssociative"/> interface, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsBoolean">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Boolean"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsBoolean.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Boolean"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Boolean"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsChar">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Char"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsChar.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Char"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Char"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsChunkedSeq">
            <summary>
            Returns <see cref="!:true"/> if s is a <see cref="T:funclib.Collections.IChunkedSeq"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsChunkedSeq.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if s is a <see cref="T:funclib.Collections.IChunkedSeq"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="s">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if s is a <see cref="T:funclib.Collections.IChunkedSeq"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsCounted">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.ICounted"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsCounted.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.ICounted"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.ICounted"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsDistinct">
            <summary>
            Returns <see cref="!:true"/> if no two arguments are equal, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsDistinct.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if no two arguments are equal, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Other to test.</param>
            <returns>
            Always returns <see cref="!:true"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsDistinct.Invoke(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if no two arguments are equal, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First object to test.</param>
            <param name="y">Second object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if no two arguments are equal, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsDistinct.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns <see cref="!:true"/> if no two arguments are equal, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First object to test.</param>
            <param name="y">Second object to test.</param>
            <param name="more">Rest of the objects to test.</param>
            <returns>
            Returns <see cref="!:true"/> if no two arguments are equal, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsDouble">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Double"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsDouble.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Double"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Double"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsEmpty">
            <summary>
            Returns <see cref="!:true"/> if coll has no items. Same as <see cref="!:Not.Invoke(Seq.Invoke(object))"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsEmpty.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if coll has no items. Same as <see cref="!:Not.Invoke(Seq.Invoke(object))"/>.
            </summary>
            <param name="coll">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if coll has no items. Same as <see cref="!:Not.Invoke(Seq.Invoke(object))"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsEqualTo">
            <summary>
            Returns <see cref="!:true"/> if values are equal, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsEqualTo.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if values are equal, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsEqualTo.Invoke(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if values are equal, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test against.</param>
            <returns>
            Returns <see cref="!:true"/> if x is equal to y, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsEqualTo.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns <see cref="!:true"/> if values are equal, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test against.</param>
            <param name="more">All other elements to test.</param>
            <returns>
            Returns <see cref="!:true"/> if values are equal, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsEven">
            <summary>
            Returns <see cref="!:true"/> if n is an even number.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsEven.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if n is an even number.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if n is an even number.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsEvery">
            <summary>
            Returns <see cref="!:true"/> if <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> pred is a logical 
            true for every item in the coll, otherwise <see cref="!:false"/>
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsEvery.Invoke(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> pred is a logical 
            true for every item in the coll, otherwise <see cref="!:false"/>
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">The collection to test.</param>
            <returns>
            Returns <see cref="!:true"/> if <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> pred is a logical 
            true for every item in the coll, otherwise <see cref="!:false"/>
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsFalse">
            <summary>
            Returns <see cref="!:true"/> if x is <see cref="!:false"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsFalse.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="!:false"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="!:false"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsFunction">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Components.Core.IFunction"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsFunction.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Components.Core.IFunction"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Components.Core.IFunction"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsGreaterThan">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically decreasing order, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsGreaterThan.Invoke(System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically decreasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <returns>
            Returns true.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsGreaterThan.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically decreasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically decreasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsGreaterThan.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically decreasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <param name="more">Rest of the elements to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically decreasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsGreaterThanOrEqualTo">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-increasing order, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsGreaterThanOrEqualTo.Invoke(System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-increasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <returns>
            Returns true.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsGreaterThanOrEqualTo.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-increasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically non-increasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsGreaterThanOrEqualTo.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-increasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <param name="more">Rest of the elements to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically non-increasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsIdentical">
            <summary>
            Returns <see cref="!:true"/> if x is identical to y, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsIdentical.Invoke(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is identical to y, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First object.</param>
            <param name="y">Object to test against.</param>
            <returns>
            Returns <see cref="!:true"/> if x is identical to y, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsInstance">
            <summary>
            Returns <see cref="!:true"/> if c <see cref="T:System.Type"/> is an instance of x, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsInstance.Invoke(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if c <see cref="T:System.Type"/> is an instance of x, otherwise <see cref="!:false"/>.
            </summary>
            <param name="c">An <see cref="T:System.Type"/> object.</param>
            <param name="x">An object to check type of.</param>
            <returns>
            Returns <see cref="!:true"/> if c <see cref="T:System.Type"/> is an instance of x, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsInt">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Int16"/> or <see cref="T:System.Byte"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsInt.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Int16"/> or <see cref="T:System.Byte"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Int16"/> or <see cref="T:System.Byte"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsInteger">
            <summary>
            Returns <see cref="!:true"/> if x is a 
            <see cref="T:System.Int32"/>, 
            <see cref="T:System.Int64"/>, 
            <see cref="T:System.Int16"/> 
            <see cref="T:System.UInt32"/>, 
            <see cref="T:System.UInt64"/>, 
            <see cref="T:System.UInt16"/> 
            <see cref="T:System.Char"/> 
            <see cref="T:System.Byte"/>, 
            or <see cref="T:System.SByte"/>, 
            otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsInteger.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a 
            <see cref="T:System.Int32"/>, 
            <see cref="T:System.Int64"/>, 
            <see cref="T:System.Int16"/> 
            <see cref="T:System.UInt32"/>, 
            <see cref="T:System.UInt64"/>, 
            <see cref="T:System.UInt16"/> 
            <see cref="T:System.Char"/> 
            <see cref="T:System.Byte"/>, 
            or <see cref="T:System.SByte"/>, 
            otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a 
            <see cref="T:System.Int32"/>, 
            <see cref="T:System.Int64"/>, 
            <see cref="T:System.Int16"/> 
            <see cref="T:System.UInt32"/>, 
            <see cref="T:System.UInt64"/>, 
            <see cref="T:System.UInt16"/> 
            <see cref="T:System.Char"/> 
            <see cref="T:System.Byte"/>, 
            or <see cref="T:System.SByte"/>, 
            otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsLessThan">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically increasing order, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsLessThan.Invoke(System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically increasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <returns>
            Returns true.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsLessThan.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically increasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically increasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsLessThan.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically increasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <param name="more">Rest of the elements to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically increasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsLessThanOrEqualTo">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-decreasing order, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsLessThanOrEqualTo.Invoke(System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-decreasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <returns>
            Returns true.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsLessThanOrEqualTo.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-decreasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically non-decreasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsLessThanOrEqualTo.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-decreasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <param name="more">Rest of the elements to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically non-decreasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsList">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.IList"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsList.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.IList"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.IList"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsMap">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.IMap"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsMap.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.IMap"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.IMap"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsNatInt">
            <summary>
            Returns <see cref="!:true"/> if x is a non-negative <see cref="T:System.Int32"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsNatInt.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a non-negative <see cref="T:System.Int32"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a non-negative <see cref="T:System.Int32"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsNeg">
            <summary>
            Returns <see cref="!:true"/> if x is less than zero, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsNeg.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is less than zero, otherwise <see cref="!:false"/>.
            </summary>
            <param name="num">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is less than zero, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsNegInt">
            <summary>
            Returns <see cref="!:true"/> if x is a a negative <see cref="T:System.Int32"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsNegInt.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a a negative <see cref="T:System.Int32"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a a negative <see cref="T:System.Int32"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsNotAny">
            <summary>
            Returns <see cref="!:false"/> if x is logical true for any item in coll, otherwise <see cref="!:true"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsNotAny.Invoke(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is logical true for any item in coll, otherwise <see cref="!:false"/>.
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">A collection of items to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is logical true for any item in coll, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsNotEqualTo">
            <summary>
            Returns <see cref="!:true"/> if values are not equal, otherwise <see cref="!:false"/>
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsNotEqualTo.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if values are not equal, otherwise <see cref="!:false"/>
            </summary>
            <param name="x">First element to test.</param>
            <returns>
            Returns false.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsNotEqualTo.Invoke(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if values are not equal, otherwise <see cref="!:false"/>
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test</param>
            <returns>
            Returns <see cref="!:true"/> if values are not equal, otherwise <see cref="!:false"/>
            </returns>
        </member>
        <member name="M:funclib.Components.Core.IsNotEqualTo.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns <see cref="!:true"/> if values are not equal, otherwise <see cref="!:false"/>
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test against.</param>
            <param name="more">All other elements to test.</param>
            <returns>
            Returns <see cref="!:true"/> if values are not equal, otherwise <see cref="!:false"/>
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsNotEvery">
            <summary>
            Returns <see cref="!:false"/> if x is logical true for every item in coll, otherwise <see cref="!:true"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsNotEvery.Invoke(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:false"/> if x is logical true for every item in coll, otherwise <see cref="!:true"/>.
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">A collection of items to test.</param>
            <returns>
            Returns <see cref="!:false"/> if x is logical true for every item in coll, otherwise <see cref="!:true"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsNull">
            <summary>
            Returns <see cref="!:true"/> if x is <see cref="!:null"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsNull.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is <see cref="!:null"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is <see cref="!:null"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsNumber">
            <summary>
            Returns <see cref="!:true"/> if x is a number, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsNumber.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a number, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a number, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsOdd">
            <summary>
            Returns <see cref="!:true"/> if x is an odd number, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsOdd.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is an odd number, otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is an odd number, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsPos">
            <summary>
            Returns <see cref="!:true"/> if x is an greater than zero, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsPos.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is an greater than zero, otherwise <see cref="!:false"/>.
            </summary>
            <param name="num">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is an greater than zero, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsPosInt">
            <summary>
            Returns <see cref="!:true"/> if x is a positive <see cref="T:funclib.Components.Core.IsInt"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsPosInt.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a positive <see cref="T:funclib.Components.Core.IsInt"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a positive <see cref="T:funclib.Components.Core.IsInt"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsReduced">
            <summary>
            Returns <see cref="!:true"/> if x is of type <see cref="T:funclib.Components.Core.Reduced"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsReduced.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is of type <see cref="T:funclib.Components.Core.Reduced"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is of type <see cref="T:funclib.Components.Core.Reduced"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsSeq">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.ISeq"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsSeq.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.ISeq"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.ISeq"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsSeqable">
            <summary>
            Returns <see cref="!:true"/> if x can be supported by the <see cref="T:funclib.Components.Core.Seq"/> function, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsSeqable.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x can be supported by the <see cref="T:funclib.Components.Core.Seq"/> function, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x can be supported by the <see cref="T:funclib.Components.Core.Seq"/> function, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsSequential">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISequential"/> interface, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsSequential.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISequential"/> interface, otherwise <see cref="!:false"/>.
            </summary>
            <param name="coll">An object to test against.</param>
            <returns>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISequential"/> interface, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsSet">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISet"/> interface, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsSet.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISequential"/> interface, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISequential"/> interface, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsSome">
            <summary>
            Returns <see cref="!:true"/> if x is not <see cref="!:null"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsSome.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is not <see cref="!:null"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is not <see cref="!:null"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsSorted">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISorted"/> interface, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsSorted.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISorted"/> interface, otherwise <see cref="!:false"/>.
            </summary>
            <param name="coll">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISorted"/> interface, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsString">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.String"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsString.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.String"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.String"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsTrue">
            <summary>
            Returns <see cref="!:true"/> if x is <see cref="!:true"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsTrue.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is <see cref="!:true"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is <see cref="!:true"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsUUID">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Guid"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsUUID.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Guid"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Guid"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsVector">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.IVector"/> interface, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsVector.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.IVector"/> interface, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.IVector"/> interface, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsVolatile">
            <summary>
            Returns <see cref="!:true"/> if x is of type <see cref="!:Volatile"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsVolatile.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is of type <see cref="!:Volatile"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is of type <see cref="!:Volatile"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.IsZero">
            <summary>
            Returns <see cref="!:true"/> if x is zero, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.IsZero.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is zero, otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is zero, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Iterate">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of x, f.Invoke(x), f.Invoke(f.Inovke(x))... 
            f must be free of side-effects.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Iterate.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of x, f.Invoke(x), f.Invoke(f.Inovke(x))... 
            f must be free of side-effects.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="x">First object of sequence.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of x, f.Invoke(x), f.Invoke(f.Inovke(x))... 
            f must be free of side-effects.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Juxt">
            <summary>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="T:funclib.Components.Core.Juxt.Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="T:funclib.Components.Core.Juxt.Function"/> takes a variable number or 
            args, and returns a <see cref="T:funclib.Components.Core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Juxt.Invoke(System.Object)">
            <summary>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="T:funclib.Components.Core.Juxt.Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="T:funclib.Components.Core.Juxt.Function"/> takes a variable number or 
            args, and returns a <see cref="T:funclib.Components.Core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="T:funclib.Components.Core.Juxt.Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="T:funclib.Components.Core.Juxt.Function"/> takes a variable number or 
            args, and returns a <see cref="T:funclib.Components.Core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Juxt.Invoke(System.Object,System.Object)">
            <summary>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="T:funclib.Components.Core.Juxt.Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="T:funclib.Components.Core.Juxt.Function"/> takes a variable number or 
            args, and returns a <see cref="T:funclib.Components.Core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).</summary>
            <param name="f">First object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="g">Second object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="T:funclib.Components.Core.Juxt.Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="T:funclib.Components.Core.Juxt.Function"/> takes a variable number or 
            args, and returns a <see cref="T:funclib.Components.Core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Juxt.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="T:funclib.Components.Core.Juxt.Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="T:funclib.Components.Core.Juxt.Function"/> takes a variable number or 
            args, and returns a <see cref="T:funclib.Components.Core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).</summary>
            <param name="f">First object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="g">Second object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="h">Third object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="T:funclib.Components.Core.Juxt.Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="T:funclib.Components.Core.Juxt.Function"/> takes a variable number or 
            args, and returns a <see cref="T:funclib.Components.Core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Juxt.Invoke(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="T:funclib.Components.Core.Juxt.Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="T:funclib.Components.Core.Juxt.Function"/> takes a variable number or 
            args, and returns a <see cref="T:funclib.Components.Core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).</summary>
            <param name="f">First object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="g">Second object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="h">Third object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="fs">Rest of the object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="T:funclib.Components.Core.Juxt.Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="T:funclib.Components.Core.Juxt.Function"/> takes a variable number or 
            args, and returns a <see cref="T:funclib.Components.Core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Juxt.Function">
            <summary>
            Internal function that does the <see cref="T:funclib.Components.Core.Juxt"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Juxt.Function.Invoke">
            <summary>
            Invoke the functions without any parameters.
            </summary>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> with the results of executing the functions.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Juxt.Function.Invoke(System.Object)">
            <summary>
            Invoke the functions with a single parameter
            </summary>
            <param name="x">First parameter passed to each function.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> with the results of executing the functions.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Juxt.Function.Invoke(System.Object,System.Object)">
            <summary>
            Invoke the functions with a multiple parameter
            </summary>
            <param name="x">First parameter passed to each function.</param>
            <param name="y">Second parameter passed to each function.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> with the results of executing the functions.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Juxt.Function.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Invoke the functions with a multiple parameter
            </summary>
            <param name="x">First parameter passed to each function.</param>
            <param name="y">Second parameter passed to each function.</param>
            <param name="z">Third parameter passed to each function.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> with the results of executing the functions.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Juxt.Function.Invoke(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Invoke the functions with a multiple parameter
            </summary>
            <param name="x">First parameter passed to each function.</param>
            <param name="y">Second parameter passed to each function.</param>
            <param name="z">Third parameter passed to each function.</param>
            <param name="args">Rest of the parameters passed to each function.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> with the results of executing the functions.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Keep">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the non-null results of <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>.
            Note: this means false return values will be included. F must be free of side-effects.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Keep.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the non-null results of <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>.
            Note: this means false return values will be included. F must be free of side-effects.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> implements.</param>
            <param name="coll">A collection of items.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the non-null results of <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>.
            Note: this means false return values will be included. F must be free of side-effects.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Key">
            <summary>
            Returns the key of the <see cref="T:funclib.Collections.KeyValuePair"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Key.Invoke(System.Object)">
            <summary>
            Returns the key of the <see cref="T:funclib.Collections.KeyValuePair"/>.
            </summary>
            <param name="e">An <see cref="T:funclib.Collections.KeyValuePair"/> object.</param>
            <returns>
            Returns the key of the <see cref="T:funclib.Collections.KeyValuePair"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Keys">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the <see cref="T:funclib.Collections.IMap"/>'s keys.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Keys.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the <see cref="T:funclib.Collections.IMap"/>'s keys.
            </summary>
            <param name="map">An object that implements the <see cref="T:funclib.Collections.IMap"/> interface.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the <see cref="T:funclib.Collections.IMap"/>'s keys.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Last">
            <summary>
            Returns the last item in coll, in linear time.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Last.Invoke(System.Object)">
            <summary>
            Returns the last item in coll, in linear time.
            </summary>
            <param name="s">Object to return the last time for.</param>
            <returns>
            Returns the last item in coll, in linear time.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.LazySeq">
            <summary>
            Takes a body of expressions that returns an <see cref="T:funclib.Collections.ISeq"/> or <see cref="!:null"/>, and 
            yields a <see cref="T:funclib.Collections.ISeqable"/> object that will invoke the body only the first time <see cref="M:funclib.Components.Core.LazySeq.Seq"/>
            is called, and will cache the result and return it on all subsequent <see cref="M:funclib.Components.Core.LazySeq.Seq"/> calls.
            </summary>
        </member>
        <member name="P:funclib.Components.Core.LazySeq.Count">
            <summary>
            Returns the count of items, evaluated and caching each item as it counts.
            </summary>
        </member>
        <member name="P:funclib.Components.Core.LazySeq.IsSynchronized">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:funclib.Components.Core.LazySeq.SyncRoot">
            <summary>
            Returns this.
            </summary>
        </member>
        <member name="P:funclib.Components.Core.LazySeq.IsReadOnly">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:funclib.Components.Core.LazySeq.IsFixedSize">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:funclib.Components.Core.LazySeq.Item(System.Int32)">
            <summary>
            Indexer, evaluates and caches each item until it hits the indexer value and returns it.
            </summary>
            <param name="index">The item to retrieve.</param>
            <returns>
            Returns the object at the indexer point.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.#ctor">
            <summary>
            Creates an empty <see cref="T:funclib.Components.Core.LazySeq"/> that yields null.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.#ctor(System.Func{System.Object})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.LazySeq"/> with the fn as its body.
            </summary>
            <param name="fn">A function to evaluate during each <see cref="M:funclib.Components.Core.LazySeq.Seq"/> call.</param>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.#ctor(funclib.Components.Core.Generic.IFunction{System.Object})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.LazySeq"/> with the fn as its body.
            </summary>
            <param name="fn">A function to evaluate during each <see cref="M:funclib.Components.Core.LazySeq.Seq"/> call.</param>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.#ctor(System.Object)">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.LazySeq"/> with the fn returning the object as its body.
            </summary>
            <param name="body">The object to return when <see cref="M:funclib.Components.Core.LazySeq.Seq"/> is called.</param>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.#ctor(funclib.Collections.ISeq)">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.LazySeq"/> with the items of the sequence.
            </summary>
            <param name="e">The sequence of items.</param>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.GetHashCode">
            <summary>
            Gets the hash code for the <see cref="T:funclib.Components.Core.LazySeq"/>.
            </summary>
            <returns>
            Returns the hash code for the <see cref="T:funclib.Components.Core.LazySeq"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.Equals(System.Object)">
            <summary>
            Determine the equality between this <see cref="T:funclib.Components.Core.LazySeq"/> and the object.
            </summary>
            <param name="obj">An object to test its equality against.</param>
            <returns>
            Returns <see cref="!:true"/> of objects are equal, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.Seq">
            <summary>
            Evaluates the item.
            </summary>
            <returns>
            Returns the <see cref="T:funclib.Collections.ISeq"/> object calls.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.Cons(System.Object)">
            <summary>
            Adds object to the <see cref="T:funclib.Components.Core.LazySeq"/>.
            </summary>
            <param name="o">Object to add.</param>
            <returns>
            Returns the <see cref="T:funclib.Collections.ISeq"/> object calls.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.First">
            <summary>
            Returns the first object in the <see cref="T:funclib.Components.Core.LazySeq"/>.
            </summary>
            <returns>
            Returns the first object in the <see cref="T:funclib.Components.Core.LazySeq"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.Next">
            <summary>
            Returns the rest of the objects in the <see cref="T:funclib.Components.Core.LazySeq"/>. If the 
            result of <see cref="T:funclib.Components.Core.LazySeq"/> is null, return null.
            </summary>
            <returns>
            Returns the rest of the objects in the <see cref="T:funclib.Components.Core.LazySeq"/>. If the 
            result of <see cref="T:funclib.Components.Core.LazySeq"/> is null, return null.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.More">
            <summary>
            Returns the rest of the objects in the <see cref="T:funclib.Components.Core.LazySeq"/>. If the 
            result of <see cref="T:funclib.Components.Core.LazySeq"/> is null, return <see cref="F:funclib.Collections.List.EMPTY"/>.
            </summary>
            <returns>
            Returns the rest of the objects in the <see cref="T:funclib.Components.Core.LazySeq"/>. If the 
            result of <see cref="T:funclib.Components.Core.LazySeq"/> is null, return <see cref="F:funclib.Collections.List.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.Empty">
            <summary>
            Returns a <see cref="F:funclib.Collections.List.EMPTY"/>.
            </summary>
            <returns>
            Returns a <see cref="F:funclib.Collections.List.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.LazySeq.Invoke">
            <summary>
            Calls the <see cref="M:funclib.Components.Core.LazySeq.Seq"/> function.
            </summary>
            <returns>
            Returns the result of calling <see cref="M:funclib.Components.Core.LazySeq.Seq"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.List">
            <summary>
            Creates a new <see cref="T:funclib.Collections.List"/> containing the times.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.List.Invoke(System.Object[])">
            <summary>
            Creates a new <see cref="T:funclib.Collections.List"/> containing the times.
            </summary>
            <param name="items">List of items to add.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.List"/> containing the items.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.ListS">
            <summary>
            Creates a new <see cref="T:funclib.Components.Core.Seq"/> containing the items perpended to the rest, the
            last of which will be treated as a sequence.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.ListS.Invoke(System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Components.Core.Seq"/> containing the items perpended to the rest, the
            last of which will be treated as a sequence.
            </summary>
            <param name="args">An object is passed to the <see cref="T:funclib.Components.Core.Seq"/> function.</param>
            <returns>
            Returns the result of calling <see cref="T:funclib.Components.Core.Seq"/> with args.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ListS.Invoke(System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Components.Core.Seq"/> containing the items perpended to the rest, the
            last of which will be treated as a sequence.
            </summary>
            <param name="a">First item in the list.</param>
            <param name="args">Rest of the items.</param>
            <returns>
            Returns the result of calling <see cref="T:funclib.Components.Core.Cons"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ListS.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Components.Core.Seq"/> containing the items perpended to the rest, the
            last of which will be treated as a sequence.
            </summary>
            <param name="a">First item in the list.</param>
            <param name="b">Second item in the list.</param>
            <param name="args">Rest of the times.</param>
            <returns>
            Returns the result of calling <see cref="T:funclib.Components.Core.Cons"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ListS.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Components.Core.Seq"/> containing the items perpended to the rest, the
            last of which will be treated as a sequence.
            </summary>
            <param name="a">First item in the list.</param>
            <param name="b">Second item in the list.</param>
            <param name="c">Third item in the list.</param>
            <param name="args">Rest of the times.</param>
            <returns>
            Returns the result of calling <see cref="T:funclib.Components.Core.Cons"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ListS.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Creates a new <see cref="T:funclib.Components.Core.Seq"/> containing the items perpended to the rest, the
            last of which will be treated as a sequence.
            </summary>
            <param name="a">First item in the list.</param>
            <param name="b">Second item in the list.</param>
            <param name="c">Third item in the list.</param>
            <param name="d">Fourth item in the list.</param>
            <param name="args">Rest of the times.</param>
            <returns>
            Returns the result of calling <see cref="T:funclib.Components.Core.Cons"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Locking">
            <summary>
            Ensures that one thread does not enter a <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> while another
            thread is already executing it.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Locking.#ctor(System.Object,System.Func{System.Object})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Locking"/> object.
            </summary>
            <param name="x">Object to lock.</param>
            <param name="fn"><see cref="T:System.Func`1"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Locking.#ctor(System.Object,funclib.Components.Core.Generic.IFunction{System.Object})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Locking"/> object.
            </summary>
            <param name="x">Object to lock.</param>
            <param name="fn"><see cref="T:funclib.Components.Core.Generic.IFunction`1"/> to execute.</param>
        </member>
        <member name="M:funclib.Components.Core.Locking.Invoke">
            <summary>
            Invokes the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> wrapped with a lock statement.
            </summary>
            <returns>
            Returns the result of calling <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> function.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Map">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in 
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Map.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in 
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="coll">A collection of items.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in 
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Map.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in 
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="c1">A collection of items.</param>
            <param name="c2">A collection of items.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in 
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Map.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in 
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="c1">A collection of items.</param>
            <param name="c2">A collection of items.</param>
            <param name="c3">A collection of items.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in 
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Map.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in 
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="c1">A collection of items.</param>
            <param name="c2">A collection of items.</param>
            <param name="c3">A collection of items.</param>
            <param name="colls">Rest of the collections of items.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in 
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.MapCat">
            <summary>
            Returns the result of applying <see cref="T:funclib.Components.Core.Concat"/> to the result of applying 
            <see cref="T:funclib.Components.Core.Map"/> to f and colls. Thus function f should return a collections.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.MapCat.Invoke(System.Object,System.Object[])">
            <summary>
            Returns the result of applying <see cref="T:funclib.Components.Core.Concat"/> to the result of applying 
            <see cref="T:funclib.Components.Core.Map"/> to f and colls. Thus function f should return a collections.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="colls">A collection of items.</param>
            <returns>
            Returns a collection.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Max">
            <summary>
            Returns the greatest of the numbers.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Max.Invoke(System.Object)">
            <summary>
            Returns the greatest of the numbers.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns x.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Max.Invoke(System.Object,System.Object)">
            <summary>
            Returns the greatest of the numbers.
            </summary>
            <param name="x">First object to test.</param>
            <param name="y">Second object to test.</param>
            <returns>
            Returns the greatest of the numbers.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Max.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns the greatest of the numbers.
            </summary>
            <param name="x">First object to test.</param>
            <param name="y">Second object to test.</param>
            <param name="more">Rest of the objects to test.</param>
            <returns>
            Returns the greatest of the numbers.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Merge">
            <summary>
            Returns a <see cref="T:funclib.Collections.IMap"/> that consists of the rest of the <see cref="T:funclib.Collections.IMap"/> conj-ed onto
            the first. If a key occurs in more than one map, the mapping from the latter (left-to-right)
            will be mapping in the result.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Merge.Invoke(System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Collections.IMap"/> that consists of the rest of the <see cref="T:funclib.Collections.IMap"/> conj-ed onto
            the first. If a key occurs in more than one map, the mapping from the latter (left-to-right)
            will be mapping in the result.
            </summary>
            <param name="maps">List of <see cref="T:funclib.Collections.IMap"/>s to merge together.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IMap"/> that consists of the rest of the <see cref="T:funclib.Collections.IMap"/> conj-ed onto
            the first. If a key occurs in more than one map, the mapping from the latter (left-to-right)
            will be mapping in the result.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.MergeWith">
            <summary>
            Returns a <see cref="T:funclib.Collections.IMap"/> that consists of the rest of the <see cref="!:IMaps"/> conj-ed onto
            the first. If a key occurs in more than one map, the mapping(s0 from the latter (left-to-right)
            will be combined with the mapping in the result by calling f.Invoke(value-in-result, value-in-latter)
            </summary>
        </member>
        <member name="M:funclib.Components.Core.MergeWith.Invoke(System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Collections.IMap"/> that consists of the rest of the <see cref="!:IMaps"/> conj-ed onto
            the first. If a key occurs in more than one map, the mapping(s0 from the latter (left-to-right)
            will be combined with the mapping in the result by calling f.Invoke(value-in-result, value-in-latter)
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="maps">A list of object maps to merge.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IMap"/> that consists of the rest of the <see cref="!:IMaps"/> conj-ed onto
            the first. If a key occurs in more than one map, the mapping(s0 from the latter (left-to-right)
            will be combined with the mapping in the result by calling f.Invoke(value-in-result, value-in-latter)
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Min">
            <summary>
            Returns the least of the numbers.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Min.Invoke(System.Object)">
            <summary>
            Returns the least of the numbers.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns x.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Min.Invoke(System.Object,System.Object)">
            <summary>
            Returns the least of the numbers.
            </summary>
            <param name="x">First object to test.</param>
            <param name="y">Second object to test.</param>
            <returns>
            Returns the greatest of the numbers.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Min.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns the least of the numbers.
            </summary>
            <param name="x">First object to test.</param>
            <param name="y">Second object to test.</param>
            <param name="more">Rest of the objects to test.</param>
            <returns>
            Returns the greatest of the numbers.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Minus">
            <summary>
            If y is not suppled return <see cref="M:funclib.Numbers.Negate(System.Object)"/> of x, else subtract 
            ys from x and returns the result.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Minus.Invoke(System.Object)">
            <summary>
            If y is not suppled return <see cref="M:funclib.Numbers.Negate(System.Object)"/> of x, else subtract 
            ys from x and returns the result.
            </summary>
            <param name="x">Object to <see cref="M:funclib.Numbers.Negate(System.Object)"/>.</param>
            <returns>
            Returns <see cref="M:funclib.Numbers.Negate(System.Object)"/> of x.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Minus.Invoke(System.Object,System.Object)">
            <summary>
            If y is not suppled return <see cref="M:funclib.Numbers.Negate(System.Object)"/> of x, else subtract 
            ys from x and returns the result.
            </summary>
            <param name="x">First number to subtract.</param>
            <param name="y">Second number to subtract.</param>
            <returns>
            Returns the result from subtracting y from x.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Minus.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            If y is not suppled return <see cref="M:funclib.Numbers.Negate(System.Object)"/> of x, else subtract 
            ys from x and returns the result.
            </summary>
            <param name="x">First number to subtract.</param>
            <param name="y">Second number to subtract.</param>
            <param name="more">Rest of the numbers to subtract.</param>
            <returns>
            Returns the result of subtracting y from x then rest of the more values.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.More">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the items after the first. Calls
            <see cref="T:funclib.Components.Core.Seq"/> on its argument. If there are no more items, 
            returns <see cref="F:funclib.Collections.List.EMPTY"/> collection.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.More.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the items after the first. Calls
            <see cref="T:funclib.Components.Core.Seq"/> on its argument. If there are no more items, 
            returns <see cref="F:funclib.Collections.List.EMPTY"/> collection.
            </summary>
            <param name="coll">Should be a <see cref="T:funclib.Collections.ISeqable"/> collection.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the items after the first. Calls
            <see cref="T:funclib.Components.Core.Seq"/> on its argument. If there are no more items, 
            returns <see cref="F:funclib.Collections.List.EMPTY"/> collection.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Multiply">
            <summary>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an 
            implicit 1 passed.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Multiply.Invoke">
            <summary>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an 
            implicit 1 passed.
            </summary>
            <returns>
            Returns 1.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Multiply.Invoke(System.Object)">
            <summary>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an 
            implicit 1 passed.
            </summary>
            <param name="x">First parameter multiply.</param>
            <returns>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an 
            implicit 1 passed.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Multiply.Invoke(System.Object,System.Object)">
            <summary>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an 
            implicit 1 passed.
            </summary>
            <param name="x">First parameter multiply.</param>
            <param name="y">Second parameter multiply.</param>
            <returns>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an 
            implicit 1 passed.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Multiply.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an 
            implicit 1 passed.
            </summary>
            <param name="x">First parameter multiply.</param>
            <param name="y">Second parameter multiply.</param>
            <param name="more">Rest of the parameters to multiply.</param>
            <returns>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an 
            implicit 1 passed.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Next">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the items after the first. Calls
            <see cref="T:funclib.Components.Core.Seq"/> on its argument. If there are no more items, 
            returns null.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Next.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the items after the first. Calls
            <see cref="T:funclib.Components.Core.Seq"/> on its argument. If there are no more items, 
            returns null.
            </summary>
            <param name="coll">Should be a <see cref="T:funclib.Collections.ISeqable"/> collection.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the items after the first. Calls
            <see cref="T:funclib.Components.Core.Seq"/> on its argument. If there are no more items, 
            returns null.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.NFirst">
            <summary>
            Same as <see cref="!:Next.Invoke(First.Invoke(object))"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.NFirst.Invoke(System.Object)">
            <summary>
            Same as <see cref="!:Next.Invoke(First.Invoke(object))"/>.
            </summary>
            <param name="x">Object to return the first item's next item.</param>
            <returns>
            Returns the first item's next item
            </returns>
        </member>
        <member name="T:funclib.Components.Core.NNext">
            <summary>
            Same as <see cref="!:Next.Invoke(Next.Invoke(object))"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.NNext.Invoke(System.Object)">
            <summary>
            Same as <see cref="!:Next.Invoke(Next.Invoke(object))"/>.
            </summary>
            <param name="x">Object to return the next item's next item.</param>
            <returns>
            Returns the next item's next item
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Not">
            <summary>
            Returns <see cref="!:true"/> if x is logical false, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Not.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is logical false, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is logical false, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.NotEmpty">
            <summary>
            Returns <see cref="!:null"/> if coll is empty, otherwise coll
            </summary>
        </member>
        <member name="M:funclib.Components.Core.NotEmpty.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:null"/> if coll is empty, otherwise coll
            </summary>
            <param name="coll">Object to test.</param>
            <returns>
            Returns <see cref="!:null"/> if coll is empty, otherwise coll
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Nth">
            <summary>
            Returns the value at the index. <see cref="T:funclib.Components.Core.Nth"/> throws an exception if index
            is out of bounds or unless notFound is supplied. <see cref="T:funclib.Components.Core.Nth"/> works on 
            strings, arrays, Regex matcher, lists and O(n) time for sequences.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Nth.Invoke(System.Object,System.Object)">
            <summary>
            Returns the value at the index. <see cref="T:funclib.Components.Core.Nth"/> throws an exception if index
            is out of bounds or unless notFound is supplied. <see cref="T:funclib.Components.Core.Nth"/> works on 
            strings, arrays, Regex matcher, lists and O(n) time for sequences.
            </summary>
            <param name="coll">Collection to search for index.</param>
            <param name="index">Index to find.</param>
            <returns>
            Returns the value at the index. <see cref="T:funclib.Components.Core.Nth"/> throws an exception if index
            is out of bounds or unless notFound is supplied. <see cref="T:funclib.Components.Core.Nth"/> works on 
            strings, arrays, Regex matcher, lists and O(n) time for sequences.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Nth.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns the value at the index. <see cref="T:funclib.Components.Core.Nth"/> throws an exception if index
            is out of bounds or unless notFound is supplied. <see cref="T:funclib.Components.Core.Nth"/> works on 
            strings, arrays, Regex matcher, lists and O(n) time for sequences.
            </summary>
            <param name="coll">Collection to search for index.</param>
            <param name="index">Index to find.</param>
            <param name="notFound">Value to return if index is not found.</param>
            <returns>
            Returns the value at the index. <see cref="T:funclib.Components.Core.Nth"/> throws an exception if index
            is out of bounds or unless notFound is supplied. <see cref="T:funclib.Components.Core.Nth"/> works on 
            strings, arrays, Regex matcher, lists and O(n) time for sequences.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.NthNext">
            <summary>
            Returns the nth next of colls. <see cref="T:funclib.Components.Core.Seq"/> is called when n is zero.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.NthNext.Invoke(System.Object,System.Object)">
            <summary>
            Returns the nth next of colls. <see cref="T:funclib.Components.Core.Seq"/> is called when n is zero.
            </summary>
            <param name="coll">The collection to loop.</param>
            <param name="n">Number of Items to drop.</param>
            <returns>
            Returns the nth next of colls. <see cref="T:funclib.Components.Core.Seq"/> is called when n is zero.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.NthRest">
            <summary>
            Returns the nth rest of coll, coll when n is 0.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.NthRest.Invoke(System.Object,System.Object)">
            <summary>
            Returns the nth rest of coll, coll when n is 0.
            </summary>
            <param name="coll">The collection to loop.</param>
            <param name="n">Number of Items to drop.</param>
            <returns>
            Returns the nth rest of coll, coll when n is 0.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Or">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns 
            a logical true value then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Or.Invoke">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns 
            a logical true value then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Or.Invoke(System.Object)">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns 
            a logical true value then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
            <param name="x">Object to return.</param>
            <remarks>
            If x implements interface <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> then the object's
            Invoke() method is executed and sets its results to x.
            </remarks>
            <returns>
            Evaluates objects one at a time, from left to right. If a object returns 
            a logical true value then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Or.Invoke(System.Object,System.Object[])">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns 
            a logical true value then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
            <param name="x">First object to test.</param>
            <param name="next">Rest of the objects to test.</param>
            <returns>
            Evaluates objects one at a time, from left to right. If a object returns 
            a logical true value then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Partial">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f and fewer than the normal arguments, and returns a 
            <see cref="T:funclib.Components.Core.Partial.Function"/> that take the rest of the arguments.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Partial.Invoke(System.Object,System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f and fewer than the normal arguments, and returns a 
            <see cref="T:funclib.Components.Core.Partial.Function"/> that take the rest of the arguments.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="arg1">First argument to the function.</param>
            <returns>
            Returns <see cref="T:funclib.Components.Core.Partial.Function"/> that when executed will take args + additional args.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Partial.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f and fewer than the normal arguments, and returns a 
            <see cref="T:funclib.Components.Core.Partial.Function"/> that take the rest of the arguments.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="arg1">First argument to the function.</param>
            <param name="arg2">Second argument to the function.</param>
            <returns>
            Returns <see cref="T:funclib.Components.Core.Partial.Function"/> that when executed will take args + additional args.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Partial.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f and fewer than the normal arguments, and returns a 
            <see cref="T:funclib.Components.Core.Partial.Function"/> that take the rest of the arguments.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="arg1">First argument to the function.</param>
            <param name="arg2">Second argument to the function.</param>
            <param name="arg3">Third argument to the function.</param>
            <returns>
            Returns <see cref="T:funclib.Components.Core.Partial.Function"/> that when executed will take args + additional args.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Partial.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f and fewer than the normal arguments, and returns a 
            <see cref="T:funclib.Components.Core.Partial.Function"/> that take the rest of the arguments.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="arg1">First argument to the function.</param>
            <param name="arg2">Second argument to the function.</param>
            <param name="arg3">Third argument to the function.</param>
            <param name="more">Rest of the arguments to the function.</param>
            <returns>
            Returns <see cref="T:funclib.Components.Core.Partial.Function"/> that when executed will take args + additional args.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Partial.Function">
            <summary>
            Internal function that does the <see cref="T:funclib.Components.Core.Partial"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Partial.Function.Invoke">
            <summary>
            Executes the function with the initial arguments.
            </summary>
            <returns>
            Returns the result of calling the function with no additional parameters.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Partial.Function.Invoke(System.Object)">
            <summary>
            Executes the function with the initial arguments.
            </summary>
            <param name="x">Last argument to the function.</param>
            <returns>
            Returns the result of calling the function with the args + x
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Partial.Function.Invoke(System.Object,System.Object)">
            <summary>
            Executes the function with the initial arguments.
            </summary>
            <param name="x">Second to last argument to the function.</param>
            <param name="y">Last argument to the function.</param>
            <returns>
            Returns the result of calling the function with the args, x + y
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Partial.Function.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Executes the function with the initial arguments.
            </summary>
            <param name="x">Third to last argument to the function.</param>
            <param name="y">Second to last argument to the function.</param>
            <param name="z">Last argument to the function.</param>
            <returns>
            Returns the result of calling the function with the args, x, y + z
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Partial.Function.Invoke(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Executes the function with the initial arguments.
            </summary>
            <param name="x">Fourth to last argument to the function.</param>
            <param name="y">Third to last argument to the function.</param>
            <param name="z">Second to last argument to the function.</param>
            <param name="args">Last argument list to the function.</param>
            <returns>
            Returns the result of calling the function with the args, x, y, z + args
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Partition">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not 
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Partition.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not 
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </summary>
            <param name="n">A <see cref="T:System.Int32"/> specifying the size of each group.</param>
            <param name="coll">A collection that can be <see cref="T:funclib.Components.Core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not 
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Partition.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not 
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </summary>
            <param name="n">A <see cref="T:System.Int32"/> specifying the size of each group.</param>
            <param name="step">A <see cref="T:System.Int32"/> specifying the starting point for each group.</param>
            <param name="coll">A collection that can be <see cref="T:funclib.Components.Core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not 
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Partition.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not 
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </summary>
            <param name="n">A <see cref="T:System.Int32"/> specifying the size of each group.</param>
            <param name="step">A <see cref="T:System.Int32"/> specifing the starting point for each group.</param>
            <param name="pad">A collection to pad results with.</param>
            <param name="coll">A collection that can be <see cref="T:funclib.Components.Core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not 
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.PartitionAll">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists like <see cref="T:funclib.Components.Core.Partition"/>, but my include
            partitions with fewer then n items at the end.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.PartitionAll.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists like <see cref="T:funclib.Components.Core.Partition"/>, but my include
            partitions with fewer then n items at the end.
            </summary>
            <param name="n">A <see cref="T:System.Int32"/> specifying the size of each group.</param>
            <param name="coll">A collection that can be <see cref="T:funclib.Components.Core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists like <see cref="T:funclib.Components.Core.Partition"/>, but my include
            partitions with fewer then n items at the end.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.PartitionAll.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists like <see cref="T:funclib.Components.Core.Partition"/>, but my include
            partitions with fewer then n items at the end.
            </summary>
            <param name="n">A <see cref="T:System.Int32"/> specifying the size of each group.</param>
            <param name="step">A <see cref="T:System.Int32"/> specifying the starting point for each group.</param>
            <param name="coll">A collection that can be <see cref="T:funclib.Components.Core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists like <see cref="T:funclib.Components.Core.Partition"/>, but my include
            partitions with fewer then n items at the end.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.PartitionBy">
            <summary>
            Applies <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> to each value in coll, splitting it each 
            time f returns a new value. Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of partitions.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.PartitionBy.Invoke(System.Object,System.Object)">
            <summary>
            Applies <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> to each value in coll, splitting it each 
            time f returns a new value. Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of partitions.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">A collection that can be <see cref="T:funclib.Components.Core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of partitions.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Peek">
            <summary>
            Returns the same as <see cref="T:funclib.Collections.List"/>'s <see cref="M:funclib.Collections.List.First"/> method, 
            for <see cref="T:funclib.Collections.Queue"/>'s <see cref="M:funclib.Collections.Queue.Peek"/> method, for 
            <see cref="T:funclib.Collections.Vector"/>'s <see cref="T:funclib.Components.Core.Last"/> (but much more efficient). If the collection
            is empty return null.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Peek.Invoke(System.Object)">
            <summary>
            Returns the same as <see cref="T:funclib.Collections.List"/>'s <see cref="M:funclib.Collections.List.First"/> method, 
            for <see cref="T:funclib.Collections.Queue"/>'s <see cref="M:funclib.Collections.Queue.Peek"/> method, for 
            <see cref="T:funclib.Collections.Vector"/>'s <see cref="T:funclib.Components.Core.Last"/> (but much more efficient). If the collection
            is empty return null.
            </summary>
            <param name="coll">An object that implements the <see cref="T:funclib.Collections.IStack"/> interface.</param>
            <returns>
            Returns the same as <see cref="T:funclib.Collections.List"/>'s <see cref="M:funclib.Collections.List.First"/> method, 
            for <see cref="T:funclib.Collections.Queue"/>'s <see cref="M:funclib.Collections.Queue.Peek"/> method, for 
            <see cref="T:funclib.Collections.Vector"/>'s <see cref="T:funclib.Components.Core.Last"/> (but much more efficient). If the collection
            is empty return null.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Persistentǃ">
            <summary>
            Returns a new, persistent version of the <see cref="T:funclib.Collections.ITransientCollection"/>, in 
            constant time. The <see cref="T:funclib.Collections.ITransientCollection"/> cannot be used after this
            call.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Persistentǃ.Invoke(System.Object)">
            <summary>
            Returns a new, persistent version of the <see cref="T:funclib.Collections.ITransientCollection"/>, in 
            constant time. The <see cref="T:funclib.Collections.ITransientCollection"/> cannot be used after this
            call.
            </summary>
            <param name="coll">An object that implements the <see cref="T:funclib.Collections.ITransientCollection"/> interface.</param>
            <returns>
            Returns a new, persistent version of the <see cref="T:funclib.Collections.ITransientCollection"/>, in 
            constant time.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Plus">
            <summary>
            Returns the sum of numbers. No parameters past returns 0.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Plus.Invoke">
            <summary>
            Returns the sum of numbers. No parameters past returns 0.
            </summary>
            <returns>
            Returns 0.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Plus.Invoke(System.Object)">
            <summary>
            Returns the sum of numbers. No parameters past returns 0.
            </summary>
            <param name="x">First parameter added.</param>
            <returns>
            Returns the sum of numbers. No parameters past returns 0.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Plus.Invoke(System.Object,System.Object)">
            <summary>
            Returns the sum of numbers. No parameters past returns 0.
            </summary>
            <param name="x">First parameter added.</param>
            <param name="y">Second parameter added.</param>
            <returns>
            Returns the sum of numbers. No parameters past returns 0.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Plus.Invoke(System.Object,System.Object,System.Object[])">
            <summary>
            Returns the sum of numbers. No parameters past returns 0.
            </summary>
            <param name="x">First parameter added.</param>
            <param name="y">Second parameter added.</param>
            <param name="more">Rest of the parameters to add.</param>
            <returns>
            Returns the sum of numbers. No parameters past returns 0.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Pop">
            <summary>
            For <see cref="T:funclib.Collections.List"/> or <see cref="T:funclib.Collections.Queue"/> returns a 
            new <see cref="T:funclib.Collections.List"/>/<see cref="T:funclib.Collections.Queue"/> without the first
            item. For <see cref="T:funclib.Collections.Vector"/>, returns a new <see cref="T:funclib.Collections.Vector"/>
            without the last time. If the coll is empty, throws an exception.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Pop.Invoke(System.Object)">
            <summary>
            For <see cref="T:funclib.Collections.List"/> or <see cref="T:funclib.Collections.Queue"/> returns a 
            new <see cref="T:funclib.Collections.List"/>/<see cref="T:funclib.Collections.Queue"/> without the first
            item. For <see cref="T:funclib.Collections.Vector"/>, returns a new <see cref="T:funclib.Collections.Vector"/>
            without the last time. If the coll is empty, throws an exception.
            </summary>
            <param name="coll">An object that implements a <see cref="T:funclib.Collections.IStack"/> interface.</param>
            <returns>
            Returns the same collection type as the input, minus the last item in a <see cref="T:funclib.Collections.Vector"/>
            or first time in a <see cref="T:funclib.Collections.List"/> or <see cref="T:funclib.Collections.Queue"/>
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Popǃ">
            <summary>
            Removes the last time from a <see cref="T:funclib.Collections.Internal.ITransientVector"/>. If
            the collection is empty, throw an exception.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Popǃ.Invoke(System.Object)">
            <summary>
            Removes the last time from a <see cref="T:funclib.Collections.Internal.ITransientVector"/>. If
            the collection is empty, throw an exception.
            </summary>
            <param name="coll">An object that implements the <see cref="T:funclib.Collections.Internal.ITransientVector"/> interface.</param>
            <returns>
            Returns coll.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Print">
            <summary>
            Prints the object(s) to the <see cref="P:funclib.Variables.Out"/> stream.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Print.Invoke">
            <summary>
            Prints the object(s) to the <see cref="P:funclib.Variables.Out"/> stream.
            </summary>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Print.Invoke(System.Object)">
            <summary>
            Prints the object(s) to the <see cref="P:funclib.Variables.Out"/> stream.
            </summary>
            <param name="x">Object to print.</param>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Print.Invoke(System.Object,System.Object[])">
            <summary>
            Prints the object(s) to the <see cref="P:funclib.Variables.Out"/> stream.
            </summary>
            <param name="x">First object to print.</param>
            <param name="more">Rest of the object to print.</param>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.PrintLn">
            <summary>
            The same as <see cref="T:funclib.Components.Core.Print"/> but followed by a <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.PrintLn.Invoke(System.Object[])">
            <summary>
            The same as <see cref="T:funclib.Components.Core.Print"/> but followed by a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="more">Any objects you want to print.</param>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Rand">
            <summary>
            Returns a <see cref="T:System.Random"/> floating point number between 
            0 (inclusive) and n (default 1) (exclusive).
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Rand.Invoke">
            <summary>
            Returns a <see cref="T:System.Random"/> floating point number between 
            0 (inclusive) and n (default 1) (exclusive).
            </summary>
            <returns>
            Returns a <see cref="T:System.Random"/> floating point number between 
            0 (inclusive) and n (default 1) (exclusive).
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Rand.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:System.Random"/> floating point number between 
            0 (inclusive) and n (default 1) (exclusive).
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> for the exclusive value.</param>
            <returns>
            Returns a <see cref="T:System.Random"/> floating point number between 
            0 (inclusive) and n (default 1) (exclusive).
            </returns>
        </member>
        <member name="T:funclib.Components.Core.RandInt">
            <summary>
            Returns a <see cref="T:System.Random"/> <see cref="T:System.Int32"/> between 0 (inclusive) and n (exclusive).
            </summary>
        </member>
        <member name="M:funclib.Components.Core.RandInt.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:System.Random"/> <see cref="T:System.Int32"/> between 0 (inclusive) and n (exclusive).
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> for the exclusive value.</param>
            <returns>
            Returns a <see cref="T:System.Random"/> <see cref="T:System.Int32"/> between 0 (inclusive) and n (exclusive).
            </returns>
        </member>
        <member name="T:funclib.Components.Core.RandNth">
            <summary>
            Return a random element of the <see cref="T:funclib.Collections.ISequential"/> collection.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.RandNth.Invoke(System.Object)">
            <summary>
            Return a random element of the <see cref="T:funclib.Collections.ISequential"/> collection.
            </summary>
            <param name="coll">Collection to search for index.</param>
            <returns>
            Return a random element of the <see cref="T:funclib.Collections.ISequential"/> collection.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Range">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of numbers from start (inclusive) to end
            (Exclusive), by step, where start defaults to 0, step to 1, and end to
            infinity. When step is equal to 0, returns an infinite sequence of
            start. When start is equal to end, returns empty list.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Range.Invoke">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of numbers from start (inclusive) to end
            (Exclusive), by step, where start defaults to 0, step to 1, and end to
            infinity. When step is equal to 0, returns an infinite sequence of
            start. When start is equal to end, returns empty list.
            </summary>
            <returns>
            Returns a <see cref="T:funclib.Collections.Iterate"/> collection starting at 0 continues infinitly.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Range.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of numbers from start (inclusive) to end
            (Exclusive), by step, where start defaults to 0, step to 1, and end to
            infinity. When step is equal to 0, returns an infinite sequence of
            start. When start is equal to end, returns empty list.
            </summary>
            <param name="end">Either a <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/> value to identify the end value.</param>
            <returns>
            Returns either <see cref="T:funclib.Collections.LongRange"/> if end is <see cref="T:System.Int64"/> or <see cref="T:funclib.Collections.Range"/> if end
            is <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Range.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of numbers from start (inclusive) to end
            (Exclusive), by step, where start defaults to 0, step to 1, and end to
            infinity. When step is equal to 0, returns an infinite sequence of
            start. When start is equal to end, returns empty list.
            </summary>
            <param name="start">Either a <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/> value to identify the start value.</param>
            <param name="end">Either a <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/> value to identify the end value.</param>
            <returns>
            Returns either <see cref="T:funclib.Collections.LongRange"/> if end/start is <see cref="T:System.Int64"/> or <see cref="T:funclib.Collections.Range"/> if end/start
            is <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Range.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of numbers from start (inclusive) to end
            (Exclusive), by step, where start defaults to 0, step to 1, and end to
            infinity. When step is equal to 0, returns an infinite sequence of
            start. When start is equal to end, returns empty list.
            </summary>
            <param name="start">Either a <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/> value to identify the start value.</param>
            <param name="end">Either a <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/> value to identify the end value.</param>
            <param name="step">Either a <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/> value to identify the step value.</param>
            <returns>
            Returns either <see cref="T:funclib.Collections.LongRange"/> if end/start/step is <see cref="T:System.Int64"/> or <see cref="T:funclib.Collections.Range"/> if end/start/step
            is <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Reduce">
            <summary>
            f should implement the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface. If val is not supplied,
            returns the result of applying f to the first 2 items in coll, then applying f to the result and 
            the 3rd item, etc. If coll contains no items, f must implement <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> 
            interface and reduce returns the result of calling f with no arguments. If coll has only 1 item,
            it is returned and f is not called. If val is supplied, returns the result of applying f to val
            and the first item in coll, then applying f to the result and the 2nd item, etc. If coll contains 
            no items, val is returned and f is not called.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Reduce.Invoke(System.Object,System.Object)">
            <summary>
            f should implement the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface. If val is not supplied,
            returns the result of applying f to the first 2 items in coll, then applying f to the result and 
            the 3rd item, etc. If coll contains no items, f must implement <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> 
            interface and reduce returns the result of calling f with no arguments. If coll has only 1 item,
            it is returned and f is not called. If val is supplied, returns the result of applying f to val
            and the first item in coll, then applying f to the result and the 2nd item, etc. If coll contains 
            no items, val is returned and f is not called.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface unless coll has not items, then it needs to implement the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> interface.</param>
            <param name="coll">The collection to reduce.</param>
            <returns>
            Returns the result of calling f to the 1st and 2nd items, then calling f with the result and 3rd item, etc.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Reduce.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            f should implement the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface. If val is not supplied,
            returns the result of applying f to the first 2 items in coll, then applying f to the result and 
            the 3rd item, etc. If coll contains no items, f must implement <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> 
            interface and reduce returns the result of calling f with no arguments. If coll has only 1 item,
            it is returned and f is not called. If val is supplied, returns the result of applying f to val
            and the first item in coll, then applying f to the result and the 2nd item, etc. If coll contains 
            no items, val is returned and f is not called.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="val">The initial starting value.</param>
            <param name="coll">The collection to reduce over.</param>
            <returns>
            Returns the result of calling f to val and 1st, then calling f with the result and 2nd, etc.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Reduced">
            <summary>
            Wraps x in a way such that a <see cref="T:funclib.Components.Core.Reduce"/> will terminate with the value x.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Reduced.#ctor">
            <summary>
            Creates a new <see cref="T:funclib.Components.Core.Reduced"/> object.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Reduced.Deref">
            <summary>
            Returns the current state of ref.
            </summary>
            <returns>
            Returns the current state of ref.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Reduced.Invoke(System.Object)">
            <summary>
            Wraps x in a way such that a <see cref="T:funclib.Components.Core.Reduce"/> will terminate with the value x.
            </summary>
            <param name="x">Object to wrap.</param>
            <returns>
            Returns <see cref="T:funclib.Components.Core.Reduced"/> object that wraps x.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ReduceKV.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Reduces a <see cref="T:funclib.Collections.IAssociative"/> collection. f should implement <see cref="T:funclib.Components.Core.Generic.IFunction`4"/> interface.
            Returns the result of applying f to init, the 1st key and value in coll. Then applying f to that result and the
            2nd key and value, etc. If coll contains no entries, returns init and f is not called. Note: <see cref="T:funclib.Components.Core.ReduceKV"/>
            is supported on <see cref="T:funclib.Collections.IVector"/>'s where the keys will be the ordinal values.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`4"/> interface.</param>
            <param name="init">The initial value for the reducing.</param>
            <param name="coll">The collection that implements <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <returns>
            Returns the result of applying f to init, the 1st key and value in coll. Then applying f to that result and the
            2nd key and value, etc. If coll contains no entries, returns init and f is not called.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Reductions">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the intermediate values of the reductions 
            (as per reduce) of coll by f, starting with init.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Reductions.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the intermediate values of the reductions 
            (as per reduce) of coll by f, starting with init.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> if coll contains no items, otherwise <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="coll">A object that can be <see cref="T:funclib.Components.Core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the intermediate values of the reductions 
            (as per reduce) of coll by f, starting with init.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Reductions.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the intermediate values of the reductions 
            (as per reduce) of coll by f, starting with init.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="init">The initial starting value.</param>
            <param name="coll">A object that can be <see cref="T:funclib.Components.Core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the intermediate values of the reductions 
            (as per reduce) of coll by f, starting with init.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.ReFind">
            <summary>
            Returns the next <see cref="T:System.Text.RegularExpressions.Regex"/> match, if any, of string to pattern, using <see cref="!:funclib.ReMatcher.Find"/>.
            Uses <see cref="T:funclib.Components.Core.ReGroups"/> to return the group.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.ReFind.Invoke(System.Object)">
            <summary>
            Returns the next <see cref="T:System.Text.RegularExpressions.Regex"/> match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>.
            Uses <see cref="T:funclib.Components.Core.ReGroups"/> to return the group.
            </summary>
            <param name="m">A <see cref="T:funclib.Components.Core.ReMatcher"/> object already initialized.</param>
            <returns>
            Returns the next <see cref="T:System.Text.RegularExpressions.Regex"/> match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>.
            Uses <see cref="T:funclib.Components.Core.ReGroups"/> to return the group.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ReFind.Invoke(System.Object,System.Object)">
            <summary>
            Returns the next <see cref="T:System.Text.RegularExpressions.Regex"/> match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>.
            Uses <see cref="T:funclib.Components.Core.ReGroups"/> to return the group.
            </summary>
            <param name="re">An object that is already a <see cref="T:System.Text.RegularExpressions.Regex"/> instance.</param>
            <param name="s">The string to search for a match(s).</param>
            <returns>
            Returns the next <see cref="T:System.Text.RegularExpressions.Regex"/> match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>.
            Uses <see cref="T:funclib.Components.Core.ReGroups"/> to return the group.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.ReGroups">
            <summary>
            Returns the groups from the most recent match/find. If there are no
            nested groups, returns a string of the entire match. If there are 
            nested groups, returns a <see cref="T:funclib.Collections.Vector"/> of groups,
            the first element being the entire match.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.ReGroups.Invoke(System.Object)">
            <summary>
            Returns the groups from the most recent match/find. If there are no
            nested groups, returns a string of the entire match. If there are 
            nested groups, returns a <see cref="T:funclib.Collections.Vector"/> of groups,
            the first element being the entire match.
            </summary>
            <param name="m">A <see cref="T:funclib.Components.Core.ReMatcher"/> instance.</param>
            <returns>
            Returns the groups from the most recent match/find. If there are no
            nested groups, returns a string of the entire match. If there are 
            nested groups, returns a <see cref="T:funclib.Collections.Vector"/> of groups,
            the first element being the entire match.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Rem">
            <summary>
            Returns the remainder of dividing the numerator by the denominator.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Rem.Invoke(System.Object,System.Object)">
            <summary>
            Returns the remainder of dividing the numerator by the denominator.
            </summary>
            <param name="num">The numerator.</param>
            <param name="div">the denominator.</param>
            <returns>
            Returns the remainder of dividing the numerator by the denominator.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.ReMatcher">
            <summary>
            Returns an instance of <see cref="T:funclib.Components.Core.ReMatcher"/> for use in <see cref="T:funclib.Components.Core.ReFind"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.ReMatcher.#ctor">
            <summary>
            Creates a new <see cref="T:funclib.Components.Core.ReMatcher"/> object.
            </summary>
        </member>
        <member name="P:funclib.Components.Core.ReMatcher.IsUnrealized">
            <summary>
            Gets the flag indicating if the <see cref="T:System.Text.RegularExpressions.Regex"/> is been unrealized.
            </summary>
        </member>
        <member name="P:funclib.Components.Core.ReMatcher.IsFailed">
            <summary>
            Gets the flag indicating if the <see cref="T:System.Text.RegularExpressions.Regex"/> or match are in a failed state.
            </summary>
        </member>
        <member name="P:funclib.Components.Core.ReMatcher.IsUnrealizedOrFailed">
            <summary>
            Gets a flag indicating if the <see cref="T:funclib.Components.Core.ReMatcher"/> is in a Unrealized or Failed state. 
            </summary>
        </member>
        <member name="M:funclib.Components.Core.ReMatcher.Find">
            <summary>
            Find the next match.
            </summary>
            <returns>
            true if another match has been found, otherwise false.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ReMatcher.Matches">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:funclib.Components.Core.ReMatcher.GroupCount">
            <summary>
            Get the number of groups found.
            </summary>
            <returns>
            Returns a <see cref="T:System.Int32"/> representing the number of groups found.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ReMatcher.Group">
            <summary>
            Return the captured substring from the input string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:funclib.Components.Core.ReMatcher.Group(System.Int32)">
            <summary>
            Enables access to a member of the collection by integer index.
            </summary>
            <param name="groupIndex">The zero-based index of the collection member to be retrieved.</param>
            <returns>
            The member of the collection specified by <paramref name="groupIndex"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ReMatcher.Start">
            <summary>
            Gets the position in the original string where the first character of the captured substring is found.
            </summary>
            <returns>
            The zero-based starting position in the original string where the captured substring is found.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ReMatcher.End">
            <summary>
            Gets the position in the original string where the end character of the captured substring is found.
            </summary>
            <returns>
            The zero-based ending position in the original string where the captured substring is found.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ReMatcher.Value">
            <summary>
            Gets the captured substring from the input string.
            </summary>
            <returns>
            The substring that is captured by the match.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.ReMatcher.Invoke(System.Object,System.Object)">
            <summary>
            Returns an instance of <see cref="T:funclib.Components.Core.ReMatcher"/> to be used in <see cref="T:funclib.Components.Core.ReFind"/>.
            </summary>
            <param name="re">An object that is already a <see cref="T:System.Text.RegularExpressions.Regex"/> instance.</param>
            <param name="s">The string to search for a match(s).</param>
            <returns>
            Returns an instance of <see cref="T:funclib.Components.Core.ReMatcher"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.ReMatches">
            <summary>
            Returns the match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Matches"/>.
            Uses <see cref="T:funclib.Components.Core.ReGroups"/> to return the groups.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.ReMatches.Invoke(System.Object,System.Object)">
            <summary>
            Returns the match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Matches"/>.
            Uses <see cref="T:funclib.Components.Core.ReGroups"/> to return the groups.
            </summary>
            <param name="re">An object that is already a <see cref="!:Regex"/> instance.</param>
            <param name="s">The string to search for a match(s).</param>
            <returns>
            Returns the match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Matches"/>.
            Uses <see cref="T:funclib.Components.Core.ReGroups"/> to return the groups.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.RemoveWatch">
            <summary>
             Removes a watch from the <see cref="T:funclib.Components.Core.ARef"/>'s reference.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.RemoveWatch.Invoke(System.Object,System.Object)">
            <summary>
             Removes a watch from the <see cref="T:funclib.Components.Core.ARef"/>'s reference.
            </summary>
            <param name="ref">An object that implements the <see cref="T:funclib.Components.Core.IRef"/> interface.</param>
            <param name="key">A unique key for the function to be removed.</param>
            <returns>
            Returns this <see cref="T:funclib.Components.Core.ARef"/> object.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.RePattern">
            <summary>
            Returns an instance of <see cref="T:System.Text.RegularExpressions.Regex"/>, for use, e.g. in <see cref="T:funclib.Components.Core.ReMatcher"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.RePattern.Invoke(System.Object)">
            <summary>
            Returns an instance of <see cref="T:System.Text.RegularExpressions.Regex"/>, for use, e.g. in <see cref="T:funclib.Components.Core.ReMatcher"/>.
            </summary>
            <param name="s">The string to search for a match(s).</param>
            <returns>
            Returns an instance of <see cref="T:System.Text.RegularExpressions.Regex"/>, for use, e.g. in <see cref="T:funclib.Components.Core.ReMatcher"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Repeat">
            <summary>
            Returns a (infinite!, or length n is supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of xs.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Repeat.Invoke(System.Object)">
            <summary>
            Returns a (infinite!, or length n is supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of xs.
            </summary>
            <param name="x">Object to repeat.</param>
            <returns>
            Returns a (infinite!, or length n is supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of xs.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Repeat.Invoke(System.Object,System.Object)">
            <summary>
            Returns a (infinite!, or length n is supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of xs.
            </summary>
            <param name="n">A <see cref="T:System.Int64"/> that specifies the number of objects.</param>
            <param name="x">Object to repeat.</param>
            <returns>
            Returns a (infinite!, or length n is supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of xs.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Repeatedly">
            <summary>
            Takes a function of no args, presumably with side effects, and
            returns an infinite (or length n if supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of
            calls to it.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Repeatedly.Invoke(System.Object)">
            <summary>
            Takes a function of no args, presumably with side effects, and
            returns an infinite (or length n if supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of
            calls to it.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> interface.</param>
            <returns>
            Takes a function of no args, presumably with side effects, and
            returns an infinite (or length n if supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of
            calls to it.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Repeatedly.Invoke(System.Object,System.Object)">
            <summary>
            Takes a function of no args, presumably with side effects, and
            returns an infinite (or length n if supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of
            calls to it.
            </summary>
            <param name="n">The length of the sequence.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> interface.</param>
            <returns>
            Takes a function of no args, presumably with side effects, and
            returns an infinite (or length n if supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of
            calls to it.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.ReSeq">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of successive matches of pattern in string,
            using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>, each such match processed with <see cref="T:funclib.Components.Core.ReGroups"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.ReSeq.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of successive matches of pattern in string,
            using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>, each such match processed with <see cref="T:funclib.Components.Core.ReGroups"/>.
            </summary>
            <param name="re">An object that is already a <see cref="!:Regex"/> instance.</param>
            <param name="s">The string to search for a match(s).</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of successive matches of pattern in string,
            using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>, each such match processed with <see cref="T:funclib.Components.Core.ReGroups"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Resetǃ">
            <summary>
            Sets the value of <see cref="T:funclib.Components.Core.IAtom"/> to the new value without regard for
            the current value. Returns newVal;
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Resetǃ.Invoke(System.Object,System.Object)">
            <summary>
            Sets the value of <see cref="T:funclib.Components.Core.IAtom"/> to the new value without regard for
            the current value. Returns newVal;
            </summary>
            <param name="atom">An object that implements the <see cref="T:funclib.Components.Core.IAtom"/> interface.</param>
            <param name="newVal">The new values for the <see cref="T:funclib.Components.Core.IAtom"/>.</param>
            <returns>
            Returns the newVal object.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Rest">
            <summary>
            Returns a possible empty <see cref="T:funclib.Components.Core.Seq"/> of the items after the first.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Rest.Invoke(System.Object)">
            <summary>
            Returns a possible empty <see cref="T:funclib.Components.Core.Seq"/> of the items after the first.
            </summary>
            <param name="coll">An object to return items after the first.</param>
            <returns>
            Returns a possible empty <see cref="T:funclib.Components.Core.Seq"/> of the items after the first.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Reverse">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the items in coll in reverse order.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Reverse.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the items in coll in reverse order.
            </summary>
            <param name="coll">A collection to return.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the items in coll in reverse order.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.RSeq">
            <summary>
            Returns, in constant time, a <see cref="T:funclib.Components.Core.Seq"/> of the items in
            the collection (which can be a <see cref="T:funclib.Collections.Vector"/> or
            <see cref="T:funclib.Collections.SortedMap"/>) in reverse order. If collection
            is empty returns null.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.RSeq.Invoke(System.Object)">
            <summary>
            Returns, in constant time, a <see cref="T:funclib.Components.Core.Seq"/> of the items in
            the collection (which can be a <see cref="T:funclib.Collections.Vector"/> or
            <see cref="T:funclib.Collections.SortedMap"/>) in reverse order. If collection
            is empty returns null.
            </summary>
            <param name="rev">An object that implements the <see cref="T:funclib.Collections.IReversible"/> interface.</param>
            <returns>
            Returns, in constant time, a <see cref="T:funclib.Components.Core.Seq"/> of the items in
            the collection (which can be a <see cref="T:funclib.Collections.Vector"/> or
            <see cref="T:funclib.Collections.SortedMap"/>) in reverse order. If collection
            is empty returns null.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Second">
            <summary>
            Same as <see cref="!:First.Invoke(Next.Invoke(object))"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Second.Invoke(System.Object)">
            <summary>
            Same as <see cref="!:First.Invoke(Next.Invoke(object))"/>.
            </summary>
            <param name="x">Should be a <see cref="T:funclib.Collections.ISeqable"/> collection.</param>
            <returns>
            Returns the 2nd item in the collection.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.SelectKeys">
            <summary>
            Returns a <see cref="T:funclib.Collections.HashMap"/> containing only those entries in map who's key is in keys.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.SelectKeys.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.HashMap"/> containing only those entries in map who's key is in keys.
            </summary>
            <param name="map">An object that implements either <see cref="T:funclib.Collections.IAssociative"/>, <see cref="T:System.Collections.IDictionary"/> or <see cref="!:ITransientAssociative"/> interface.</param>
            <param name="keyseq">An object containing the keys, that can be <see cref="T:funclib.Components.Core.Seq"/>ed over, </param>
            <returns>
            Returns a <see cref="T:funclib.Collections.HashMap"/> containing only those entries in map who's key is in keys.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Seq">
            <summary>
            Returns a <see cref="T:funclib.Collections.ISeq"/> on the collection. If the collection is empty
            returns null. Passing null as the collection, returns null. <see cref="T:funclib.Components.Core.Seq"/>
            works on <see cref="T:System.String"/>s, <see cref="T:System.Array"/>s or any object that implements
            the <see cref="T:System.Collections.IEnumerable"/> interface. Note: that <see cref="T:funclib.Components.Core.Seq"/>
            caches values, thus <see cref="T:funclib.Components.Core.Seq"/> should not be used on any enumerable repeatedly
            returns the same mutable object.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Seq.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.ISeq"/> on the collection. If the collection is empty
            returns null. Passing null as the collection, returns null. <see cref="T:funclib.Components.Core.Seq"/>
            works on <see cref="T:System.String"/>s, <see cref="T:System.Array"/>s or any object that implements
            the <see cref="T:System.Collections.IEnumerable"/> interface. Note: that <see cref="T:funclib.Components.Core.Seq"/>
            caches values, thus <see cref="T:funclib.Components.Core.Seq"/> should not be used on any enumerable repeatedly
            returns the same mutable object.
            </summary>
            <param name="coll">The collection to <see cref="T:funclib.Components.Core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.ISeq"/> on the collection. If the collection is empty
            returns null. Passing null as the collection, returns null. <see cref="T:funclib.Components.Core.Seq"/>
            works on <see cref="T:System.String"/>s, <see cref="T:System.Array"/>s or any object that implements
            the <see cref="T:System.Collections.IEnumerable"/> interface. Note: that <see cref="T:funclib.Components.Core.Seq"/>
            caches values, thus <see cref="T:funclib.Components.Core.Seq"/> should not be used on any enumerable repeatedly
            returns the same mutable object.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Set">
            <summary>
            Returns a <see cref="T:funclib.Collections.HashSet"/> of the distinct elements of coll.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Set.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.HashSet"/> of the distinct elements of coll.
            </summary>
            <param name="coll">Any collection that can be <see cref="T:funclib.Components.Core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.HashSet"/> of the distinct elements of coll.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.SetValidatorǃ">
            <summary>
            Sets the validator function for <see cref="T:funclib.Components.Core.IRef"/> variables. Validator 
            function must be null or a side-effect-free <see cref="T:funclib.Components.Core.IFunction"/> of
            one argument, which will be passed the intended new state of any state
            change. If the new state is unacceptable, the function should either
            return <see cref="!:false"/> or throw an exception.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.SetValidatorǃ.Invoke(System.Object,System.Object)">
            <summary>
            Sets the validator function for <see cref="T:funclib.Components.Core.IRef"/> variables. Validator 
            function must be null or a side-effect-free <see cref="T:funclib.Components.Core.IFunction"/> of
            one argument, which will be passed the intended new state of any state
            change. If the new state is unacceptable, the function should either
            return <see cref="!:false"/> or throw an exception.
            </summary>
            <param name="ref">An object that implements the <see cref="T:funclib.Components.Core.IRef"/> interface.</param>
            <param name="validatorFn">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface, that takes one parameter.</param>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Some">
            <summary>
            Returns the first logical <see cref="!:true"/> value of execute <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> pred passing
            x, where x is any x in coll, otherwise null.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Some.Invoke(System.Object,System.Object)">
            <summary>
            Returns the first logical <see cref="!:true"/> value of execute <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> pred passing
            x, where x is any x in coll, otherwise null.
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">A collection to be <see cref="T:funclib.Components.Core.Seq"/> over.</param>
            <returns>
            Returns the first logical <see cref="!:true"/> value of execute <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> pred passing
            x, where x is any x in coll, otherwise null.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Sort">
            <summary>
            Returns a sorted collection of the items in coll. If no comparator is 
            supplied, use <see cref="T:funclib.Components.Core.Compare"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Sort.Invoke(System.Object)">
            <summary>
            Returns a sorted collection of the items in coll. If no comparator is 
            supplied, use <see cref="T:funclib.Components.Core.Compare"/>.
            </summary>
            <param name="coll">A collection to be sorted.</param>
            <returns>
            Returns a sorted collection of the items in coll. If no comparator is 
            supplied, use <see cref="T:funclib.Components.Core.Compare"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Sort.Invoke(System.Object,System.Object)">
            <summary>
            Returns a sorted collection of the items in coll. If no comparator is 
            supplied, use <see cref="T:funclib.Components.Core.Compare"/>.
            </summary>
            <param name="comp">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="coll">A collection to be sorted.</param>
            <returns>
            Returns a sorted collection of the items in coll. If no comparator is 
            supplied, use <see cref="T:funclib.Components.Core.Compare"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.SortBy">
            <summary>
            Returns a sorted sequence of the items in coll, where the sort
            order is determined by comparing <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> key function.
            If no comparator is suppled, uses <see cref="T:funclib.Components.Core.Compare"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.SortBy.Invoke(System.Object,System.Object)">
            <summary>
            Returns a sorted sequence of the items in coll, where the sort
            order is determined by comparing <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> key function.
            If no comparator is suppled, uses <see cref="T:funclib.Components.Core.Compare"/>.
            </summary>
            <param name="keyfn">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">A collection to sort.</param>
            <returns>
            Returns a sorted sequence of the items in coll, where the sort
            order is determined by comparing <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> key function.
            If no comparator is suppled, uses <see cref="T:funclib.Components.Core.Compare"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.SortBy.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns a sorted sequence of the items in coll, where the sort
            order is determined by comparing <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> key function.
            If no comparator is suppled, uses <see cref="T:funclib.Components.Core.Compare"/>.
            </summary>
            <param name="keyfn">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="comp">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="coll">A collection to sort.</param>
            <returns>
            Returns a sorted sequence of the items in coll, where the sort
            order is determined by comparing <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> key function.
            If no comparator is suppled, uses <see cref="T:funclib.Components.Core.Compare"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.SortedMap">
            <summary>
            Returns a new <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of assoc.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.SortedMap.Invoke">
            <summary>
            Returns a new <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of assoc.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.SortedMap.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.SortedMap.Invoke(System.Object[])">
            <summary>
            Returns a new <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of assoc.
            </summary>
            <param name="keyvals">Key/value pairs adding to the <see cref="T:funclib.Collections.SortedMap"/> data structure.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of assoc.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.SortedMapBy">
            <summary>
            Returns a <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings, using the supplied 
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> comparator. If any keys are equal, they are handled as
            if by repeated uses of <see cref="T:funclib.Components.Core.Assoc"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.SortedMapBy.Invoke(System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings, using the supplied 
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> comparator. If any keys are equal, they are handled as
            if by repeated uses of <see cref="T:funclib.Components.Core.Assoc"/>.
            </summary>
            <param name="comparator">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="keyvals">Key/value pairs adding to the <see cref="T:funclib.Collections.SortedMap"/> data structure.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings, using the supplied 
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> comparator. If any keys are equal, they are handled as
            if by repeated uses of <see cref="T:funclib.Components.Core.Assoc"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.SortedSet">
            <summary>
            Returns a new <see cref="T:funclib.Collections.SortedSet"/> with the supplied keys. Any 
            equal keys are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Conj"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.SortedSet.Invoke">
            <summary>
            Returns a new <see cref="T:funclib.Collections.SortedSet"/> with the supplied keys. Any 
            equal keys are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Conj"/>.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.SortedSet.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.SortedSet.Invoke(System.Object[])">
            <summary>
            Returns a new <see cref="T:funclib.Collections.SortedSet"/> with the supplied keys. Any 
            equal keys are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Conj"/>.
            </summary>
            <param name="keys">Keys to add to <see cref="T:funclib.Collections.SortedSet"/> data structure.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.SortedSet"/> with the supplied keys. Any 
            equal keys are handled as if by repeated uses of <see cref="T:funclib.Components.Core.Conj"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.SortedSetBy">
            <summary>
            Returns a <see cref="T:funclib.Collections.SortedSet"/> with supplied keys, using the supplied 
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> comparator. If any keys are equal, they are handled as
            if by repeated uses of <see cref="T:funclib.Components.Core.Conj"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.SortedSetBy.Invoke(System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Collections.SortedSet"/> with supplied keys, using the supplied 
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> comparator. If any keys are equal, they are handled as
            if by repeated uses of <see cref="T:funclib.Components.Core.Conj"/>.
            </summary>
            <param name="comparator">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="keys">Keys to add to <see cref="T:funclib.Collections.SortedSet"/> data structure.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.SortedSet"/> with supplied keys, using the supplied 
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> comparator. If any keys are equal, they are handled as
            if by repeated uses of <see cref="T:funclib.Components.Core.Conj"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.SplitAt">
            <summary>
            Returns a <see cref="T:funclib.Collections.Vector"/> of [<see cref="M:funclib.Components.Core.Take.Invoke(System.Object,System.Object)"/>, <see cref="M:funclib.Components.Core.Drop.Invoke(System.Object,System.Object)"/>].
            </summary>
        </member>
        <member name="M:funclib.Components.Core.SplitAt.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.Vector"/> of [<see cref="M:funclib.Components.Core.Take.Invoke(System.Object,System.Object)"/>, <see cref="M:funclib.Components.Core.Drop.Invoke(System.Object,System.Object)"/>].
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> of the items split collection at.</param>
            <param name="coll">A collection being split.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> of [<see cref="M:funclib.Components.Core.Take.Invoke(System.Object,System.Object)"/>, <see cref="M:funclib.Components.Core.Drop.Invoke(System.Object,System.Object)"/>].
            </returns>
        </member>
        <member name="T:funclib.Components.Core.SplitWith">
            <summary>
            Returns a <see cref="T:funclib.Collections.Vector"/> of [<see cref="M:funclib.Components.Core.TakeWhile.Invoke(System.Object,System.Object)"/>, <see cref="M:funclib.Components.Core.DropWhile.Invoke(System.Object,System.Object)"/>].
            </summary>
        </member>
        <member name="M:funclib.Components.Core.SplitWith.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.Vector"/> of [<see cref="M:funclib.Components.Core.TakeWhile.Invoke(System.Object,System.Object)"/>, <see cref="M:funclib.Components.Core.DropWhile.Invoke(System.Object,System.Object)"/>].
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="coll">A collection being split.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> of [<see cref="M:funclib.Components.Core.TakeWhile.Invoke(System.Object,System.Object)"/>, <see cref="M:funclib.Components.Core.DropWhile.Invoke(System.Object,System.Object)"/>].
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Str">
            <summary>
            With no args, returns empty string. With one arg, returns arg.ToString(). If 
            arg is null return empty string. With more than one arg, returns the concatenation 
            of args.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Str.Invoke">
            <summary>
            With no args, returns empty string. With one arg, returns arg.ToString(). If 
            arg is null return empty string. With more than one arg, returns the concatenation 
            of args.
            </summary>
            <returns>
            Returns <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Str.Invoke(System.Object)">
            <summary>
            With no args, returns empty string. With one arg, returns arg.ToString(). If 
            arg is null return empty string. With more than one arg, returns the concatenation 
            of args.
            </summary>
            <param name="x">Object to convert into a string.</param>
            <returns>
            Returns <see cref="F:System.String.Empty"/> if x is null, otherwise <see cref="M:System.Object.ToString"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Str.Invoke(System.Object,System.Object[])">
            <summary>
            With no args, returns empty string. With one arg, returns arg.ToString(). If 
            arg is null return empty string. With more than one arg, returns the concatenation 
            of args.
            </summary>
            <param name="x">First object to convert into a string.</param>
            <param name="ys">Rest of the object to convert into a string.</param>
            <returns>
            Returns the concatenation of args into a single <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Subs">
            <summary>
            Returns the <see cref="M:System.String.Substring(System.Int32,System.Int32)"/> of s beginning at start inclusive, and ending 
            at end (defaults to length of string), exclusive.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Subs.Invoke(System.Object,System.Object)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
            character position and continues to the end of the string.
            </summary>
            <param name="s">String to execute the substring with.</param>
            <param name="start">The zero-based starting character position of a substring in this instance.</param>
            <returns>
            A string that is equivalent to the substring that begins at start in this
            instance, or <see cref="F:System.String.Empty"/> if start is equal to the length of this
            instance.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Subs.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
            character position and has a specified length.
            </summary>
            <param name="s">String to execute the substring with.</param>
            <param name="start">The zero-based starting character position of a substring in this instance.</param>
            <param name="end">The number of characters in the substring.</param>
            <returns>
            A string that is equivalent to the substring of length that begins at
            start in this instance, or <see cref="F:System.String.Empty"/> if start is equal to
            the length of this instance and length is zero.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.SubVec">
            <summary>
            Returns a <see cref="T:funclib.Collections.IVector"/> of the items in <see cref="T:funclib.Collections.IVector"/> from start (inclusive)
            to end (exclusive). If end is not supplied, default to <see cref="T:funclib.Components.Core.Count"/> of <see cref="T:funclib.Collections.IVector"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.SubVec.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.IVector"/> of the items in <see cref="T:funclib.Collections.IVector"/> from start (inclusive)
            to end (exclusive). If end is not supplied, default to <see cref="T:funclib.Components.Core.Count"/> of <see cref="T:funclib.Collections.IVector"/>.
            </summary>
            <param name="v">An object that implements the <see cref="T:funclib.Collections.IVector"/> interface.</param>
            <param name="start">The zero-based starting index position.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of the items in <see cref="T:funclib.Collections.IVector"/> from start (inclusive)
            to end (exclusive). If end is not supplied, default to <see cref="T:funclib.Components.Core.Count"/> of <see cref="T:funclib.Collections.IVector"/>.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.SubVec.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.IVector"/> of the items in <see cref="T:funclib.Collections.IVector"/> from start (inclusive)
            to end (exclusive). If end is not supplied, default to <see cref="T:funclib.Components.Core.Count"/> of <see cref="T:funclib.Collections.IVector"/>.
            </summary>
            <param name="v">An object that implements the <see cref="T:funclib.Collections.IVector"/> interface.</param>
            <param name="start">The zero-based starting index position.</param>
            <param name="end">The number of items.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of the items in <see cref="T:funclib.Collections.IVector"/> from start (inclusive)
            to end (exclusive). If end is not supplied, default to <see cref="T:funclib.Components.Core.Count"/> of <see cref="T:funclib.Collections.IVector"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Swapǃ">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Swapǃ.Invoke(System.Object,System.Object)">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
            <param name="atom">An object that implements the <see cref="T:funclib.Components.Core.IAtom"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Swapǃ.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
            <param name="atom">An object that implements the <see cref="T:funclib.Components.Core.IAtom"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Second parameter of the function.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Swapǃ.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
            <param name="atom">An object that implements the <see cref="T:funclib.Components.Core.IAtom"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Second parameter of the function.</param>
            <param name="y">Third parameter of the function.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Swapǃ.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after 
            the swap.
            </summary>
            <param name="atom">An object that implements the <see cref="T:funclib.Components.Core.IAtom"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Second parameter of the function.</param>
            <param name="y">Third parameter of the function.</param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:funclib.Components.Core.Take">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first n items in the coll, or all items
            if there are fewer than n.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Take.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first n items in the coll, or all items
            if there are fewer than n.
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> of the items to take from the collection.</param>
            <param name="coll">The collection to take the first x items from.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first n items in the coll, or all items
            if there are fewer than n.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.TakeLast">
            <summary>
            Returns a <see cref="T:funclib.Collections.ISeq"/> of the last n items in coll. Depending on the 
            type of coll may be no better than linear time.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.TakeLast.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.ISeq"/> of the last n items in coll. Depending on the 
            type of coll may be no better than linear time.
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> of the items to take from the end of the collection.</param>
            <param name="coll">The collection to drop the first x items from.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.ISeq"/> of the last n items in coll. Depending on the 
            type of coll may be no better than linear time.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.TakeNth">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of every nth item in coll.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.TakeNth.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of every nth item in coll.
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> of the items to take every nth from collection.</param>
            <param name="coll">The collection to drop the first x items from.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of every nth item in coll.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.TakeWhile">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of successive items from coll while 
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> pred returns a logical true. pred
            must be free of side-effects.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.TakeWhile.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of successive items from coll while 
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> pred returns a logical true. pred
            must be free of side-effects.
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="coll">List of times to process.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of successive items from coll while 
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> pred returns a logical true. pred
            must be free of side-effects.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Time">
            <summary>
            Evaluates the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> and prints the time it took. 
            Returns the value of <see cref="T:funclib.Components.Core.Generic.IFunction`1"/>.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Time.#ctor(System.Func{System.Object})">
            <summary>
            Evaluates the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> and prints the time it took. 
            Returns the value of <see cref="T:funclib.Components.Core.Generic.IFunction`1"/>.
            </summary>
            <param name="fn">Take a <see cref="T:System.Func`1"/> and convert it to <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> to be executed.</param>
        </member>
        <member name="M:funclib.Components.Core.Time.#ctor(funclib.Components.Core.Generic.IFunction{System.Object})">
            <summary>
            Evaluates the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> and prints the time it took. 
            Returns the value of <see cref="T:funclib.Components.Core.Generic.IFunction`1"/>.
            </summary>
            <param name="fn">A function to be executed.</param>
        </member>
        <member name="M:funclib.Components.Core.Time.Invoke">
            <summary>
            Evaluates the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> and prints the time it took. 
            Returns the value of <see cref="T:funclib.Components.Core.Generic.IFunction`1"/>.
            </summary>
            <returns>
            Returns the value of <see cref="T:funclib.Components.Core.Generic.IFunction`1"/>.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.ToArray">
            <summary>
            Returns an <see cref="!:object[]"/> containing the contents of coll, which 
            can be any collection.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.ToArray.Invoke(System.Object)">
            <summary>
            Returns an <see cref="!:object[]"/> containing the contents of coll, which 
            can be any collection.
            </summary>
            <param name="coll">A collection of items to convert into an object.</param>
            <returns>
            Returns an <see cref="!:object[]"/> containing the contents of coll, which 
            can be any collection. Returns empty <see cref="!:object[]"/> if coll is null.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Trampoline">
            <summary>
            <see cref="T:funclib.Components.Core.Trampoline"/> can be used to convert algorithms requiring mutual
            recursion without stake consumption. Calls f with supplied args, if any. If
            f returns a fn, calls the fn with no arguments and continues to repeat, until
            the return value is not a fn. then returns the non-fn value. Note: that if you
            want to return a fn as a final value, you must wrap it in some data structure
            and unpack it after trampoline returns.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Trampoline.Invoke(System.Object)">
            <summary>
            <see cref="T:funclib.Components.Core.Trampoline"/> can be used to convert algorithms requiring mutual
            recursion without stake consumption. Calls f with supplied args, if any. If
            f returns a fn, calls the fn with no arguments and continues to repeat, until
            the return value is not a fn. then returns the non-fn value. Note: that if you
            want to return a fn as a final value, you must wrap it in some data structure
            and unpack it after trampoline returns.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> interface.</param>
            <returns>
            Returns the first non-fn value.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Trampoline.Invoke(System.Object,System.Object[])">
            <summary>
            <see cref="T:funclib.Components.Core.Trampoline"/> can be used to convert algorithms requiring mutual
            recursion without stake consumption. Calls f with supplied args, if any. If
            f returns a fn, calls the fn with no arguments and continues to repeat, until
            the return value is not a fn. then returns the non-fn value. Note: that if you
            want to return a fn as a final value, you must wrap it in some data structure
            and unpack it after trampoline returns.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="args">A list of parameters</param>
            <returns>
            Returns the first non-fn value.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Transduce">
            <summary>
            This is still experimental!
            Reduce with a transformation of f (xf). If init is not supplied <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> is
            called to produce it. f should be a reducing step function that accepts both 1 and 2 arguments, if
            it accepts only 2 you can add the arity-1 with <see cref="T:funclib.Components.Core.Completing"/>. Returns the result of
            applying (thre transformed) xf to init and the first item in coll, then applying xf to the result 
            of the 2nd item, etc. If coll contains no items, returns init and f is not called. Note: that 
            certain transforms my inject or skip items.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Transduce.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            This is still experimental!
            Reduce with a transformation of f (xf). If init is not supplied <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> is
            called to produce it. f should be a reducing step function that accepts both 1 and 2 arguments, if
            it accepts only 2 you can add the arity-1 with <see cref="T:funclib.Components.Core.Completing"/>. Returns the result of
            applying (thre transformed) xf to init and the first item in coll, then applying xf to the result 
            of the 2nd item, etc. If coll contains no items, returns init and f is not called. Note: that 
            certain transforms my inject or skip items.
            </summary>
            <param name="xform">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="coll">A collection of items to reduce.</param>
            <returns>
            Returns the result of applying (thre transformed) xf to init and the first item in coll, then applying 
            xf to the result of the 2nd item, etc. If coll contains no items, returns init and f is not called.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Transduce.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            This is still experimental!
            Reduce with a transformation of f (xf). If init is not supplied <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> is
            called to produce it. f should be a reducing step function that accepts both 1 and 2 arguments, if
            it accepts only 2 you can add the arity-1 with <see cref="T:funclib.Components.Core.Completing"/>. Returns the result of
            applying (thre transformed) xf to init and the first item in coll, then applying xf to the result 
            of the 2nd item, etc. If coll contains no items, returns init and f is not called. Note: that 
            certain transforms my inject or skip items.
            </summary>
            <param name="xform">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="init">The initial seed value.</param>
            <param name="coll">A collection of items to reduce.</param>
            <returns>
            Returns the result of applying (thre transformed) xf to init and the first item in coll, then applying 
            xf to the result of the 2nd item, etc. If coll contains no items, returns init and f is not called.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Transient">
            <summary>
            Returns a new transient version of the collection, in constant time.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Transient.Invoke(System.Object)">
            <summary>
            Returns a new transient version of the collection, in constant time.
            </summary>
            <param name="coll">An object that implements the <see cref="T:funclib.Collections.IEditableCollection"/> interface.</param>
            <returns>
            Returns a new transient version of the collection, in constant time.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.TreeSeq">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the nodes in a tree, via a depth-first walk.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.TreeSeq.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the nodes in a tree, via a depth-first walk.
            </summary>
            <param name="branch">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface that returns true if passed a node
            that can have children, otherwise false.</param>
            <param name="children">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface that returns a sequence of the children.</param>
            <param name="root">An object for the root node of the tree.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the nodes in a tree. 
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Truthy">
            <summary>
            Returns <see cref="!:true"/> if source is a logical true. i.e.:
            source is not null or if source is boolean true.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Truthy.Invoke(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if source is a logical true. i.e.:
            source is not null or if source is boolean true.
            </summary>
            <param name="source">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if source is a logical true. i.e.:
            source is not null or if source is boolean true.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Unreduce">
            <summary>
            If x is <see cref="T:funclib.Components.Core.IsReduced"/> returns true, return <see cref="M:funclib.Components.Core.Reduced.Deref"/>,
            otherwise return x.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Unreduce.Invoke(System.Object)">
            <summary>
            If x is <see cref="T:funclib.Components.Core.IsReduced"/> returns true, return <see cref="M:funclib.Components.Core.Reduced.Deref"/>,
            otherwise return x.
            </summary>
            <param name="x">Object that can be <see cref="T:funclib.Components.Core.Reduced"/> or is already reduced.</param>
            <returns>
            If x is <see cref="T:funclib.Components.Core.IsReduced"/> returns true, return <see cref="M:funclib.Components.Core.Reduced.Deref"/>,
            otherwise return x.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Update">
            <summary>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return 
            a new value, and returns a new structure. If the key does not exists, null is passed as 
            the old value.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Update.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return 
            a new value, and returns a new structure. If the key does not exists, null is passed as 
            the old value.        
            </summary>
            <param name="m">An object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="k">The key for the value to update.</param>
            <param name="f">A <see cref="T:funclib.Components.Core.IFunction"/> that takes the old value and any additional args and outputs the new value for the key.</param>
            <returns>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return 
            a new value, and returns a new structure. If the key does not exists, null is passed as 
            the old value. 
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Update.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return 
            a new value, and returns a new structure. If the key does not exists, null is passed as 
            the old value.   
            </summary>
            <param name="m">An object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="k">The key for the value to update.</param>
            <param name="f">A <see cref="T:funclib.Components.Core.IFunction"/> that takes the old value and any additional args and outputs the new value for the key.</param>
            <param name="x">Second argument to the passed in function.</param>
            <returns>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return 
            a new value, and returns a new structure. If the key does not exists, null is passed as 
            the old value.  
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Update.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return 
            a new value, and returns a new structure. If the key does not exists, null is passed as 
            the old value.   
            </summary>
            <param name="m">An object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="k">The key for the value to update.</param>
            <param name="f">A <see cref="T:funclib.Components.Core.IFunction"/> that takes the old value and any additional args and outputs the new value for the key.</param>
            <param name="x">Second argument to the passed in function.</param>
            <param name="y">Third argument to the passed in function.</param>
            <returns>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return 
            a new value, and returns a new structure. If the key does not exists, null is passed as 
            the old value.   
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Update.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return 
            a new value, and returns a new structure. If the key does not exists, null is passed as 
            the old value.   
            </summary>
            <param name="m">An object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="k">The key for the value to update.</param>
            <param name="f">A <see cref="T:funclib.Components.Core.IFunction"/> that takes the old value and any additional args and outputs the new value for the key.</param>
            <param name="x">Second argument to the passed in function.</param>
            <param name="y">Third argument to the passed in function.</param>
            <param name="z">Fourth argument to the passed in function.</param>
            <returns>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return 
            a new value, and returns a new structure. If the key does not exists, null is passed as 
            the old value.  
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Update.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return 
            a new value, and returns a new structure. If the key does not exists, null is passed as 
            the old value.   
            </summary>
            <param name="m">An object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="k">The key for the value to update.</param>
            <param name="f">A <see cref="T:funclib.Components.Core.IFunction"/> that takes the old value and any additional args and outputs the new value for the key.</param>
            <param name="x">Second argument to the passed in function.</param>
            <param name="y">Third argument to the passed in function.</param>
            <param name="z">Fourth argument to the passed in function.</param>
            <param name="more">Rest of the arguments to the passed in function.</param>
            <returns>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return 
            a new value, and returns a new structure. If the key does not exists, null is passed as 
            the old value. 
            </returns>
        </member>
        <member name="T:funclib.Components.Core.UpdateIn">
            <summary>
            'Updates' a value in a nested <see cref="T:funclib.Collections.IAssociative"/> structure,
            where ks is a <see cref="T:funclib.Collections.ISeq"/> of keys and f is a <see cref="T:funclib.Components.Core.IFunction"/>
            that will take the old value and any supplied args and return the new value, and
            returns a new nested structure. If any levels do not exists, a <see cref="T:funclib.Components.Core.HashMap"/>
            will be created.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.UpdateIn.Invoke(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            'Updates' a value in a nested <see cref="T:funclib.Collections.IAssociative"/> structure,
            where ks is a <see cref="T:funclib.Collections.ISeq"/> of keys and f is a <see cref="T:funclib.Components.Core.IFunction"/>
            that will take the old value and any supplied args and return the new value, and
            returns a new nested structure. If any levels do not exists, a <see cref="T:funclib.Collections.HashMap"/>
            will be created.
            </summary>
            <param name="m">An object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="ks">An object that implements the <see cref="T:funclib.Collections.ISeq"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="args">A list of supplied arguments.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.HashMap"/> with the value updated.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.UUID">
            <summary>
            Generates a new <see cref="T:System.Guid"/> object.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.UUID.Invoke">
            <summary>
            Generates a new <see cref="T:System.Guid"/> object.
            </summary>
            <returns>
            Returns a new <see cref="T:System.Guid"/> object.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Value">
            <summary>
            Returns the value in the <see cref="T:funclib.Collections.KeyValuePair"/> object.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Value.Invoke(System.Object)">
            <summary>
            Returns the value in the <see cref="T:funclib.Collections.KeyValuePair"/> object.
            </summary>
            <param name="e">A <see cref="T:funclib.Collections.KeyValuePair"/> object pulling the value from.</param>
            <returns>
            Returns the value in the <see cref="T:funclib.Collections.KeyValuePair"/> object.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Values">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the <see cref="T:funclib.Collections.IMap"/>'s values.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Values.Invoke(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the <see cref="T:funclib.Collections.IMap"/>'s values.
            </summary>
            <param name="map">An object that implements the <see cref="T:funclib.Collections.IMap"/> interface.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.Seq"/> of the <see cref="T:funclib.Collections.IMap"/>'s values.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Vec">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the items from coll.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Vec.Invoke(System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the items from coll.
            </summary>
            <param name="coll">A object that implements either <see cref="T:funclib.Collections.ISeq"/> or <see cref="T:System.Collections.IEnumerable"/> interface or anything that can be made into array via <see cref="T:funclib.Components.Core.ToArray"/> method.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> object. If coll is null returns <see cref="F:funclib.Collections.Vector.EMPTY"/> object.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Vector">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Vector.Invoke">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <returns>
            Returns the <see cref="F:funclib.Collections.Vector.EMPTY"/> object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Vector.Invoke(System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Vector.Invoke(System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="b">Second value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Vector.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="b">Second value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="c">Third value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Vector.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="b">Second value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="c">Third value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="d">Fourth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Vector.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="b">Second value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="c">Third value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="d">Fourth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="e">Fifth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Vector.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="b">Second value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="c">Third value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="d">Fourth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="e">Fifth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="f">Sixth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Vector.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="b">Second value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="c">Third value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="d">Fourth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="e">Fifth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="f">Sixth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="args">Rest of the values added to the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.Volatileǃ">
            <summary>
            Creates and returns a <see cref="!:Volatile"/> with an initial value of val.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Volatileǃ.#ctor">
            <summary>
            Creates a new <see cref="T:funclib.Components.Core.Volatileǃ"/> object.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.Volatileǃ.Deref">
            <summary>
            Returns the current state of ref.
            </summary>
            <returns>
            Returns the current state of ref.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Volatileǃ.Reset(System.Object)">
            <summary>
            Resets the <see cref="!:volatile"/> object, and returns it.
            </summary>
            <param name="newVal">New value of the <see cref="!:volatile"/> object.</param>
            <returns>
            Returns the new <see cref="!:volatile"/> object.
            </returns>
        </member>
        <member name="M:funclib.Components.Core.Volatileǃ.Invoke(System.Object)">
            <summary>
            Creates and returns a <see cref="!:Volatile"/> with an initial value of val.
            </summary>
            <param name="val">Initial value.</param>
            <returns>
            Returns the <see cref="!:Volatile"/> set to val.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.VResetǃ">
            <summary>
            Sets the value of <see cref="!:Volatile"/> to a new value without 
            regard for the current value
            </summary>
        </member>
        <member name="M:funclib.Components.Core.VResetǃ.Invoke(System.Object,System.Object)">
            <summary>
            Sets the value of <see cref="!:Volatile"/> to a newValue without 
            regard for the current value
            </summary>
            <param name="vol">A <see cref="!:Volatile"/> object</param>
            <param name="newVal">The new value for the <see cref="!:Volatile"/> object.</param>
            <returns>
            Returns the new <see cref="!:Volatile"/> object set to newVal.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.VSwapǃ">
            <summary>
            Non-atomically swaps the value of volatile.
            </summary>
        </member>
        <member name="M:funclib.Components.Core.VSwapǃ.#ctor(System.Object,System.Object,System.Object[])">
            <summary>
            Non-atomically swaps the value of volatile.
            </summary>
            <param name="vol">A <see cref="!:Volatile"/> object.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="args">Any additional arguments passed to f</param>
        </member>
        <member name="M:funclib.Components.Core.VSwapǃ.Invoke">
            <summary>
            Non-atomically swaps the value of volatile.
            </summary>
            <returns>
            Returns the reseted <see cref="!:Volatile"/> object.
            </returns>
        </member>
        <member name="T:funclib.Components.Core.ZipMap">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.HashMap"/> with the keys mapped to the corresponding values
            </summary>
        </member>
        <member name="M:funclib.Components.Core.ZipMap.Invoke(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.HashMap"/> with the keys mapped to the corresponding values
            </summary>
            <param name="keys">A <see cref="T:funclib.Components.Core.Seq"/> collection for keys.</param>
            <param name="vals">A <see cref="T:funclib.Components.Core.Seq"/> collection for values.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.HashMap"/> with the keys mapped to the corresponding values
            </returns>
        </member>
        <member name="P:funclib.core.AddWatch">
            <summary>
            Adds a watch function to an <see cref="T:funclib.Components.Core.IRef"/> variable. The
            watch function must implement the <see cref="T:funclib.Components.Core.IFunction"/> interface
            and take 4 arguments. The key, the reference, its old-state and its new
            state. Whenever the <see cref="T:funclib.Components.Core.IRef"/>'s state changes all registered
            watches will be called. The functions will be synchronously called. Note:
            an <see cref="T:funclib.Components.Core.IAtom"/>'s state may have changed prior to calling the
            function so use th old/new state argument instead of deref'ing the
            state again.
            </summary>
        </member>
        <member name="P:funclib.core.And">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns
            a logical false (null or false) then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
        </member>
        <member name="P:funclib.core.Apply">
            <summary>
            Applies <see cref="T:funclib.Components.Core.IFunction"/> f to the argument list formed prepending
            intervening arguments to args.
            </summary>
        </member>
        <member name="P:funclib.core.ArrayMap">
            <summary>
            Constructs an <see cref="T:funclib.Collections.ArrayMap"/>. If any keys are equal,
            they are handled as if by repeated uses of <see cref="P:funclib.core.Assoc"/>.
            </summary>
        </member>
        <member name="P:funclib.core.Assoc">
            <summary>
            Assoc[iate]. When applied to a map, returns a new map of the same (hash/sort) type.
            that contains the mapping of key(s) to val(s). When applied to a vector, returns
            a new vector that contains val at index. Note -> index must be less than or equal to
            count of vector.
            </summary>
        </member>
        <member name="P:funclib.core.AssocIn">
            <summary>
            Associates a value n a nested associative structure, where ks is a
            sequence of keys and v is the new value. Returns a new nested structure.
            If any levels do not exists, a new <see cref="T:funclib.Collections.HashMap"/>
            will be created.
            </summary>
        </member>
        <member name="P:funclib.core.Assocǃ">
            <summary>
            When applied to a transient map, addes mapping of key(s) to vals(s).
            When applied to a transient vector, sets the val at index. Note ->
            index must be less than or equal to the count of vector. Returns coll.
            </summary>
        </member>
        <member name="P:funclib.core.Atom">
            <summary>
            Creates and returns an <see cref="P:funclib.core.Atom"/> with an initial value or x
            and zero or more options:
                :validator = validate-fn
            Validate-fn must be nil or a side effect free <see cref="T:funclib.Components.Core.IFunction"/>
            of one argument. Which will be passed the intended new state on any
            state change. If the new state is unacceptable, the validate-fn should
            return false or throw an exception.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:funclib.core.BitAnd" -->
        <member name="P:funclib.core.Boolean">
            <summary>
            If x is a <see cref="T:System.Boolean"/> return x, otherwise return x != null.
            </summary>
        </member>
        <member name="P:funclib.core.ButLast">
            <summary>
            Returns a <see cref="P:funclib.core.Seq"/> of all but the last item. In linear time.
            </summary>
        </member>
        <member name="P:funclib.core.Char">
            <summary>
            Coerce to char
            </summary>
        </member>
        <member name="P:funclib.core.Class">
            <summary>
            Returns the type of an object.
            </summary>
        </member>
        <member name="P:funclib.core.Comp">
            <summary>
            Takes a set of functions and returns a function that is the composition of
            those functions. The returned <see cref="!:Function"/> takes a variable number
            of args, applies the right-most of functions to the args, the next function
            (right-to-left) to the result, ect.
            </summary>
        </member>
        <member name="P:funclib.core.Comparator">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> function that can be coerced into
            the <see cref="T:funclib.FunctionComparer"/> that implements <see cref="T:System.Collections.IComparer"/>
            interface.
            </summary>
        </member>
        <member name="P:funclib.core.Compare">
            <summary>
            Comparator, that returns a negative number, zero, or positive number when x
            is logically 'less than', 'equal to' or 'greater than' y. Same as
            <see cref="M:System.IComparable.CompareTo(System.Object)"/> except it works for null and
            compares numbers and collections in a type-independent manner.
            </summary>
        </member>
        <member name="P:funclib.core.CompareAndSetǃ">
            <summary>
            Atomically sets the value of the <see cref="T:funclib.Components.Core.IAtom"/>
            to the new value if and only if the current value of
            the <see cref="T:funclib.Components.Core.IAtom"/> is identical to the oldVal.
            Returns <see cref="!:true"/> if set happened, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.Complement">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> and returns the function that takes the same arguments
            with the same effects, if any, and returns the opposite truthy value.
            </summary>
        </member>
        <member name="P:funclib.core.Concat">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> representing the concatenation of the elements
            in the supplied colls.
            </summary>
        </member>
        <member name="P:funclib.core.Conj">
            <summary>
            Conj[oin]. Returns a new collection with the x 'added'. If
            coll is null, returns a new <see cref="T:funclib.Collections.List"/> with
            x as its first item. The addition may happen at different places
            depending on the concrete type of the collection.
            </summary>
        </member>
        <member name="P:funclib.core.Conjǃ">
            <summary>
            Adds x to the transient collection. and returns coll. The addition may happen
            at different places depending on the concrete type of the collection.
            </summary>
        </member>
        <member name="P:funclib.core.Cons">
            <summary>
            Returns a new <see cref="T:funclib.Collections.ISeq"/> where x is the first element and seq is the rest.
            </summary>
        </member>
        <member name="P:funclib.core.Constantly">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunctionParams`2"/> that takes any number of
            arguments and returns x.
            </summary>
        </member>
        <member name="P:funclib.core.Contains">
            <summary>
            Returns true if key is present in the given collection, otherwise false. Note
            that for numerically indexed collections like vectors and arrays, this test is the
            number key is within the range of indexes. <see cref="P:funclib.core.Contains"/> operates constant or
            logarithmic time; it will not perform a linear search for a value.
            </summary>
        </member>
        <member name="P:funclib.core.Count">
            <summary>
            Returns the number of items in the collection. Passing null as coll returns 0.
            </summary>
        </member>
        <member name="P:funclib.core.Dec">
            <summary>
            Returns a number one less than num.
            </summary>
        </member>
        <member name="P:funclib.core.Deref">
            <summary>
            Returns the current state of <see cref="T:funclib.Components.Core.IDeref"/> variable.
            </summary>
        </member>
        <member name="P:funclib.core.Disj">
            <summary>
            Disj[oin]. Returns a new set of the same concrete type, that
            does not contain they key(s).
            </summary>
        </member>
        <member name="P:funclib.core.Disjǃ">
            <summary>
            Returns a <see cref="!:ITransientSet"/> of the same concrete type that
            does not contain key(s).
            </summary>
        </member>
        <member name="P:funclib.core.Dissoc">
            <summary>
            Dissoc[iate]. Returns a new map of the same concrete type,
            that does not contain a mapping for the key(s).
            </summary>
        </member>
        <member name="P:funclib.core.Dissocǃ">
            <summary>
            Returns a <see cref="!:ITransientMap"/> of the same concrete type that
            doesn't contain the same <see cref="T:funclib.Collections.KeyValuePair"/>
            </summary>
        </member>
        <member name="P:funclib.core.Distinct">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of elements of coll without duplicate values.
            </summary>
        </member>
        <member name="P:funclib.core.Divide">
            <summary>
            Divides number(s).
            </summary>
        </member>
        <member name="P:funclib.core.Do">
            <summary>
            Evaluates the expressions in order and returns the value of the last.
            If no expressions are supplied, returns null.
            </summary>
        </member>
        <member name="P:funclib.core.DoAll">
            <summary>
            For <see cref="T:funclib.Components.Core.LazySeq"/> that are produced via other functions and have side effects.
            The side effects are not produces until the sequence is consumed. <see cref="P:funclib.core.DoAll"/>
            walks though successive next, retains the head and returns it, thus causing the
            entire seq to reside in memory at one time.
            </summary>
        </member>
        <member name="P:funclib.core.DoRun">
            <summary>
            For <see cref="T:funclib.Components.Core.LazySeq"/> that are produced via other functions and have side effects.
            The side effects are not produces until the sequence is consumed. <see cref="P:funclib.core.DoAll"/>
            walks though successive next, retains the head and returns it, thus causing the
            entire seq to reside in memory at one time.
            </summary>
        </member>
        <member name="P:funclib.core.Drop">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of all but the first n items in coll.
            </summary>
        </member>
        <member name="P:funclib.core.DropLast">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of all but the last n items. Default is 1.
            </summary>
        </member>
        <member name="P:funclib.core.DropWhile">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the items in coll starting from the first item
            for which the predicate returns a logical false.
            </summary>
        </member>
        <member name="P:funclib.core.Empty">
            <summary>
            Returns an empty <see cref="T:funclib.Collections.ICollection"/> of the same category as coll or null.
            </summary>
        </member>
        <member name="P:funclib.core.EnsureReduced">
            <summary>
            If x is already <see cref="P:funclib.core.IsReduced"/>, return it else return <see cref="P:funclib.core.Reduced"/> value.
            </summary>
        </member>
        <member name="P:funclib.core.EveryPred">
            <summary>
            Takes a set of predicates, <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>, and returns a <see cref="T:funclib.Components.Core.IFunction"/>. This
            function composes all the predicates that returns a logical true value against all of its arguments, else
            it returns false. Note: f is short-circuiting in that it will stop execution on the first
            argument that triggers a logical false result against the original predicates.
            </summary>
        </member>
        <member name="P:funclib.core.Falsy">
            <summary>
            Returns <see cref="!:true"/> if the object is a logical false. i.e.
            If source is null or source is bool and that value is false.
            </summary>
        </member>
        <member name="P:funclib.core.FFirst">
            <summary>
            Returns the first item's first item. Same as <see cref="!:First.Invoke(First.Invoke(object))"/>.
            </summary>
        </member>
        <member name="P:funclib.core.Filter">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of items in coll for which predicate returns a logical true.
            </summary>
        </member>
        <member name="P:funclib.core.Find">
            <summary>
            Returns the <see cref="T:funclib.Collections.KeyValuePair"/> for the key, or null if key is not present.
            </summary>
        </member>
        <member name="P:funclib.core.First">
            <summary>
            Returns the first time in the collection. Calls <see cref="P:funclib.core.Seq"/> on the collection.
            If coll is null, return null.
            </summary>
        </member>
        <member name="P:funclib.core.Flatten">
            <summary>
            Takes any nested combination of <see cref="T:funclib.Collections.ISequential"/>
            things (<see cref="T:funclib.Collections.List"/>, <see cref="T:funclib.Collections.Vector"/>, etc.) and returns
            their contents as a single, flat sequence.  <see cref="!:Flatten.Invoke(null)"/> returns an
            empty sequence.
            </summary>
        </member>
        <member name="P:funclib.core.FNext">
            <summary>
            Returns the first item's next list. Same as <see cref="!:First.Invoke(Next.Invoke(object))"/>.
            </summary>
        </member>
        <member name="P:funclib.core.FNull">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f, and returns a <see cref="!:Function"/> that calls f, replacing
            a null first argument with the supplied value x. Higher arity versions can replace arguments in
            the second and third positions.  Note: that the function f can take any number of arguments,
            not just the one(s) being null-patched.
            </summary>
        </member>
        <member name="P:funclib.core.Format">
            <summary>
            Formats a string using <see cref="M:System.String.Format(System.String,System.Object[])"/> format syntax.
            </summary>
        </member>
        <member name="P:funclib.core.Frequencies">
            <summary>
            Returns a map from distinct items in coll to the number of times they appear.
            </summary>
        </member>
        <member name="P:funclib.core.Get">
            <summary>
            Returns the value mapped to the key, notFound or null if key is not present.
            </summary>
        </member>
        <member name="P:funclib.core.GetIn">
            <summary>
            Returns the value in a nested associative structure, where ks
            is a sequence of keys. Returns null if the key is not present,
            otherwise notFound value if supplied.
            </summary>
        </member>
        <member name="P:funclib.core.GetValidator">
            <summary>
            Gets the validator function for a <see cref="T:funclib.Components.Core.IRef"/> variable.
            </summary>
        </member>
        <member name="P:funclib.core.GroupBy">
            <summary>
            Returns a <see cref="P:funclib.core.HashMap"/> of elements of coll keyed by the result of
            <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> f. The value at each key will be a
            <see cref="P:funclib.core.Vector"/> of the corresponding elements, in the order they appeared
            in coll.
            </summary>
        </member>
        <member name="P:funclib.core.HashMap">
            <summary>
            Returns a new <see cref="T:funclib.Collections.HashMap"/> with the supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of <see cref="P:funclib.core.Assoc"/>.
            </summary>
        </member>
        <member name="P:funclib.core.HashSet">
            <summary>
            Returns a new <see cref="T:funclib.Collections.HashSet"/> with the supplied keys. Any
            equal keys are handled as if by repeated uses of <see cref="P:funclib.core.Conj"/>.
            </summary>
        </member>
        <member name="P:funclib.core.Identity">
            <summary>
            Returns its argument.
            </summary>
        </member>
        <member name="P:funclib.core.Inc">
            <summary>
            Returns a number one greater than x.
            </summary>
        </member>
        <member name="P:funclib.core.Interleave">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </summary>
        </member>
        <member name="P:funclib.core.Interpose">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of elements separated by sep.
            </summary>
        </member>
        <member name="P:funclib.core.Into">
            <summary>
            Returns a new collection consisting of to with all of the items of from conjoined.
            </summary>
        </member>
        <member name="P:funclib.core.InvokeFunction">
            <summary>
            Invokes a <see cref="T:funclib.Components.Core.IFunction"/> function with supplied arguments.
            </summary>
        </member>
        <member name="P:funclib.core.IsAny">
            <summary>
            Returns <see cref="!:true"/> given any argument.
            </summary>
        </member>
        <member name="P:funclib.core.IsAssociative">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.IAssociative"/> interface, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsBoolean">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Boolean"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsChar">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Char"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsChunkedSeq">
            <summary>
            Returns <see cref="!:true"/> if s is a <see cref="T:funclib.Collections.IChunkedSeq"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsCounted">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.ICounted"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsDistinct">
            <summary>
            Returns <see cref="!:true"/> if no two arguments are equal, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsDouble">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Double"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsEmpty">
            <summary>
            Returns <see cref="!:true"/> if coll has no items. Same as <see cref="!:Not.Invoke(Seq.Invoke(object))"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsEqualTo">
            <summary>
            Returns <see cref="!:true"/> if values are equal, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsEven">
            <summary>
            Returns <see cref="!:true"/> if n is an even number.
            </summary>
        </member>
        <member name="P:funclib.core.IsEvery">
            <summary>
            Returns <see cref="!:true"/> if <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> pred is a logical
            true for every item in the coll, otherwise <see cref="!:false"/>
            </summary>
        </member>
        <member name="P:funclib.core.IsFalse">
            <summary>
            Returns <see cref="!:true"/> if x is <see cref="!:false"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsFunction">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Components.Core.IFunction"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsGreaterThan">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically decreasing order, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsGreaterThanOrEqualTo">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-increasing order, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsIdentical">
            <summary>
            Returns <see cref="!:true"/> if x is identical to y, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsInstance">
            <summary>
            Returns <see cref="!:true"/> if c <see cref="T:System.Type"/> is an instance of x, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsInt">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Int16"/> or <see cref="T:System.Byte"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsInteger">
            <summary>
            Returns <see cref="!:true"/> if x is a
            <see cref="T:System.Int32"/>,
            <see cref="T:System.Int64"/>,
            <see cref="T:System.Int16"/>
            <see cref="T:System.UInt32"/>,
            <see cref="T:System.UInt64"/>,
            <see cref="T:System.UInt16"/>
            <see cref="T:System.Char"/>
            <see cref="T:System.Byte"/>,
            or <see cref="T:System.SByte"/>,
            otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsLessThan">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically increasing order, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsLessThanOrEqualTo">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-decreasing order, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsList">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.IList"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsMap">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.IMap"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsNatInt">
            <summary>
            Returns <see cref="!:true"/> if x is a non-negative <see cref="T:System.Int32"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsNeg">
            <summary>
            Returns <see cref="!:true"/> if x is less than zero, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsNegInt">
            <summary>
            Returns <see cref="!:true"/> if x is a a negative <see cref="T:System.Int32"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsNotAny">
            <summary>
            Returns <see cref="!:false"/> if x is logical true for any item in coll, otherwise <see cref="!:true"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsNotEqualTo">
            <summary>
            Returns <see cref="!:true"/> if values are not equal, otherwise <see cref="!:false"/>
            </summary>
        </member>
        <member name="P:funclib.core.IsNotEvery">
            <summary>
            Returns <see cref="!:false"/> if x is logical true for every item in coll, otherwise <see cref="!:true"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsNull">
            <summary>
            Returns <see cref="!:true"/> if x is <see cref="!:null"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsNumber">
            <summary>
            Returns <see cref="!:true"/> if x is a number, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsOdd">
            <summary>
            Returns <see cref="!:true"/> if x is an odd number, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsPos">
            <summary>
            Returns <see cref="!:true"/> if x is an greater than zero, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsPosInt">
            <summary>
            Returns <see cref="!:true"/> if x is a positive <see cref="P:funclib.core.IsInt"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsReduced">
            <summary>
            Returns <see cref="!:true"/> if x is of type <see cref="P:funclib.core.Reduced"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsSeq">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.ISeq"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsSeqable">
            <summary>
            Returns <see cref="!:true"/> if x can be supported by the <see cref="P:funclib.core.Seq"/> function, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsSequential">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISequential"/> interface, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsSet">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISet"/> interface, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsSome">
            <summary>
            Returns <see cref="!:true"/> if x is not <see cref="!:null"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsSorted">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISorted"/> interface, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsString">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.String"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsTrue">
            <summary>
            Returns <see cref="!:true"/> if x is <see cref="!:true"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsUUID">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Guid"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsVector">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.IVector"/> interface, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsVolatile">
            <summary>
            Returns <see cref="!:true"/> if x is of type <see cref="!:Volatile"/>, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.IsZero">
            <summary>
            Returns <see cref="!:true"/> if x is zero, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.Iterate">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of x, f.Invoke(x), f.Invoke(f.Inovke(x))...
            f must be free of side-effects.
            </summary>
        </member>
        <member name="P:funclib.core.Juxt">
            <summary>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="!:Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="!:Function"/> takes a variable number or
            args, and returns a <see cref="P:funclib.core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).
            </summary>
        </member>
        <member name="P:funclib.core.Keep">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the non-null results of <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>.
            Note: this means false return values will be included. F must be free of side-effects.
            </summary>
        </member>
        <member name="P:funclib.core.Key">
            <summary>
            Returns the key of the <see cref="T:funclib.Collections.KeyValuePair"/>.
            </summary>
        </member>
        <member name="P:funclib.core.Keys">
            <summary>
            Returns a <see cref="P:funclib.core.Seq"/> of the <see cref="T:funclib.Collections.IMap"/>'s keys.
            </summary>
        </member>
        <member name="P:funclib.core.Last">
            <summary>
            Returns the last item in coll, in linear time.
            </summary>
        </member>
        <member name="P:funclib.core.List">
            <summary>
            Creates a new <see cref="T:funclib.Collections.List"/> containing the times.
            </summary>
        </member>
        <member name="P:funclib.core.ListS">
            <summary>
            Creates a new <see cref="P:funclib.core.Seq"/> containing the items perpended to the rest, the
            last of which will be treated as a sequence.
            </summary>
        </member>
        <member name="P:funclib.core.Map">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </summary>
        </member>
        <member name="P:funclib.core.MapCat">
            <summary>
            Returns the result of applying <see cref="P:funclib.core.Concat"/> to the result of applying
            <see cref="P:funclib.core.Map"/> to f and colls. Thus function f should return a collections.
            </summary>
        </member>
        <member name="P:funclib.core.Max">
            <summary>
            Returns the greatest of the numbers.
            </summary>
        </member>
        <member name="P:funclib.core.Merge">
            <summary>
            Returns a <see cref="T:funclib.Collections.IMap"/> that consists of the rest of the <see cref="T:funclib.Collections.IMap"/> conj-ed onto
            the first. If a key occurs in more than one map, the mapping from the latter (left-to-right)
            will be mapping in the result.
            </summary>
        </member>
        <member name="P:funclib.core.MergeWith">
            <summary>
            Returns a <see cref="T:funclib.Collections.IMap"/> that consists of the rest of the <see cref="!:IMaps"/> conj-ed onto
            the first. If a key occurs in more than one map, the mapping(s0 from the latter (left-to-right)
            will be combined with the mapping in the result by calling f.Invoke(value-in-result, value-in-latter)
            </summary>
        </member>
        <member name="P:funclib.core.Min">
            <summary>
            Returns the least of the numbers.
            </summary>
        </member>
        <member name="P:funclib.core.Minus">
            <summary>
            If y is not suppled return <see cref="M:funclib.Numbers.Negate(System.Object)"/> of x, else subtract
            ys from x and returns the result.
            </summary>
        </member>
        <member name="P:funclib.core.More">
            <summary>
            Returns a <see cref="P:funclib.core.Seq"/> of the items after the first. Calls
            <see cref="P:funclib.core.Seq"/> on its argument. If there are no more items,
            returns <see cref="F:funclib.Collections.List.EMPTY"/> collection.
            </summary>
        </member>
        <member name="P:funclib.core.Multiply">
            <summary>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an
            implicit 1 passed.
            </summary>
        </member>
        <member name="P:funclib.core.Next">
            <summary>
            Returns a <see cref="P:funclib.core.Seq"/> of the items after the first. Calls
            <see cref="P:funclib.core.Seq"/> on its argument. If there are no more items,
            returns null.
            </summary>
        </member>
        <member name="P:funclib.core.NFirst">
            <summary>
            Same as <see cref="!:Next.Invoke(First.Invoke(object))"/>.
            </summary>
        </member>
        <member name="P:funclib.core.NNext">
            <summary>
            Same as <see cref="!:Next.Invoke(Next.Invoke(object))"/>.
            </summary>
        </member>
        <member name="P:funclib.core.Not">
            <summary>
            Returns <see cref="!:true"/> if x is logical false, otherwise <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:funclib.core.NotEmpty">
            <summary>
            Returns <see cref="!:null"/> if coll is empty, otherwise coll
            </summary>
        </member>
        <member name="P:funclib.core.Nth">
            <summary>
            Returns the value at the index. <see cref="P:funclib.core.Nth"/> throws an exception if index
            is out of bounds or unless notFound is supplied. <see cref="P:funclib.core.Nth"/> works on
            strings, arrays, Regex matcher, lists and O(n) time for sequences.
            </summary>
        </member>
        <member name="P:funclib.core.NthNext">
            <summary>
            Returns the nth next of colls. <see cref="P:funclib.core.Seq"/> is called when n is zero.
            </summary>
        </member>
        <member name="P:funclib.core.NthRest">
            <summary>
            Returns the nth rest of coll, coll when n is 0.
            </summary>
        </member>
        <member name="P:funclib.core.Or">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns
            a logical true value then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
        </member>
        <member name="P:funclib.core.Partial">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f and fewer than the normal arguments, and returns a
            <see cref="!:Function"/> that take the rest of the arguments.
            </summary>
        </member>
        <member name="P:funclib.core.Partition">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </summary>
        </member>
        <member name="P:funclib.core.PartitionAll">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists like <see cref="P:funclib.core.Partition"/>, but my include
            partitions with fewer then n items at the end.
            </summary>
        </member>
        <member name="P:funclib.core.PartitionBy">
            <summary>
            Applies <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> to each value in coll, splitting it each
            time f returns a new value. Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of partitions.
            </summary>
        </member>
        <member name="P:funclib.core.Peek">
            <summary>
            Returns the same as <see cref="T:funclib.Collections.List"/>'s <see cref="M:funclib.Collections.List.First"/> method,
            for <see cref="T:funclib.Collections.Queue"/>'s <see cref="M:funclib.Collections.Queue.Peek"/> method, for
            <see cref="T:funclib.Collections.Vector"/>'s <see cref="P:funclib.core.Last"/> (but much more efficient). If the collection
            is empty return null.
            </summary>
        </member>
        <member name="P:funclib.core.Persistentǃ">
            <summary>
            Returns a new, persistent version of the <see cref="T:funclib.Collections.ITransientCollection"/>, in
            constant time. The <see cref="T:funclib.Collections.ITransientCollection"/> cannot be used after this
            call.
            </summary>
        </member>
        <member name="P:funclib.core.Plus">
            <summary>
            Returns the sum of numbers. No parameters past returns 0.
            </summary>
        </member>
        <member name="P:funclib.core.Pop">
            <summary>
            For <see cref="T:funclib.Collections.List"/> or <see cref="T:funclib.Collections.Queue"/> returns a
            new <see cref="T:funclib.Collections.List"/>/<see cref="T:funclib.Collections.Queue"/> without the first
            item. For <see cref="T:funclib.Collections.Vector"/>, returns a new <see cref="T:funclib.Collections.Vector"/>
            without the last time. If the coll is empty, throws an exception.
            </summary>
        </member>
        <member name="P:funclib.core.Popǃ">
            <summary>
            Removes the last time from a <see cref="!:ITransientVector"/>. If
            the collection is empty, throw an exception.
            </summary>
        </member>
        <member name="P:funclib.core.Print">
            <summary>
            Prints the object(s) to the <see cref="P:funclib.Variables.Out"/> stream.
            </summary>
        </member>
        <member name="P:funclib.core.PrintLn">
            <summary>
            The same as <see cref="P:funclib.core.Print"/> but followed by a <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="P:funclib.core.Rand">
            <summary>
            Returns a <see cref="T:System.Random"/> floating point number between
            0 (inclusive) and n (default 1) (exclusive).
            </summary>
        </member>
        <member name="P:funclib.core.RandInt">
            <summary>
            Returns a <see cref="T:System.Random"/> <see cref="T:System.Int32"/> between 0 (inclusive) and n (exclusive).
            </summary>
        </member>
        <member name="P:funclib.core.RandNth">
            <summary>
            Return a random element of the <see cref="T:funclib.Collections.ISequential"/> collection.
            </summary>
        </member>
        <member name="P:funclib.core.Range">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of numbers from start (inclusive) to end
            (Exclusive), by step, where start defaults to 0, step to 1, and end to
            infinity. When step is equal to 0, returns an infinite sequence of
            start. When start is equal to end, returns empty list.
            </summary>
        </member>
        <member name="P:funclib.core.Reduce">
            <summary>
            f should implement the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface. If val is not supplied,
            returns the result of applying f to the first 2 items in coll, then applying f to the result and
            the 3rd item, etc. If coll contains no items, f must implement <see cref="T:funclib.Components.Core.Generic.IFunction`1"/>
            interface and reduce returns the result of calling f with no arguments. If coll has only 1 item,
            it is returned and f is not called. If val is supplied, returns the result of applying f to val
            and the first item in coll, then applying f to the result and the 2nd item, etc. If coll contains
            no items, val is returned and f is not called.
            </summary>
        </member>
        <member name="P:funclib.core.Reduced">
            <summary>
            Wraps x in a way such that a <see cref="P:funclib.core.Reduce"/> will terminate with the value x.
            </summary>
        </member>
        <member name="P:funclib.core.Reductions">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the intermediate values of the reductions
            (as per reduce) of coll by f, starting with init.
            </summary>
        </member>
        <member name="P:funclib.core.ReFind">
            <summary>
            Returns the next <see cref="!:Regex"/> match, if any, of string to pattern, using <see cref="!:funclib.ReMatcher.Find"/>.
            Uses <see cref="P:funclib.core.ReGroups"/> to return the group.
            </summary>
        </member>
        <member name="P:funclib.core.ReGroups">
            <summary>
            Returns the groups from the most recent match/find. If there are no
            nested groups, returns a string of the entire match. If there are
            nested groups, returns a <see cref="T:funclib.Collections.Vector"/> of groups,
            the first element being the entire match.
            </summary>
        </member>
        <member name="P:funclib.core.Rem">
            <summary>
            Returns the remainder of dividing the numerator by the denominator.
            </summary>
        </member>
        <member name="P:funclib.core.ReMatcher">
            <summary>
            Returns an instance of <see cref="P:funclib.core.ReMatcher"/> for use in <see cref="P:funclib.core.ReFind"/>.
            </summary>
        </member>
        <member name="P:funclib.core.ReMatches">
            <summary>
            Returns the match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Matches"/>.
            Uses <see cref="P:funclib.core.ReGroups"/> to return the groups.
            </summary>
        </member>
        <member name="P:funclib.core.RemoveWatch">
            <summary>
             Removes a watch from the <see cref="T:funclib.Components.Core.ARef"/>'s reference.
            </summary>
        </member>
        <member name="P:funclib.core.RePattern">
            <summary>
            Returns an instance of <see cref="!:Regex"/>, for use, e.g. in <see cref="P:funclib.core.ReMatcher"/>.
            </summary>
        </member>
        <member name="P:funclib.core.Repeat">
            <summary>
            Returns a (infinite!, or length n is supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of xs.
            </summary>
        </member>
        <member name="P:funclib.core.Repeatedly">
            <summary>
            Takes a function of no args, presumably with side effects, and
            returns an infinite (or length n if supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of
            calls to it.
            </summary>
        </member>
        <member name="P:funclib.core.ReSeq">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of successive matches of pattern in string,
            using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>, each such match processed with <see cref="P:funclib.core.ReGroups"/>.
            </summary>
        </member>
        <member name="P:funclib.core.Resetǃ">
            <summary>
            Sets the value of <see cref="T:funclib.Components.Core.IAtom"/> to the new value without regard for
            the current value. Returns newVal;
            </summary>
        </member>
        <member name="P:funclib.core.Rest">
            <summary>
            Returns a possible empty <see cref="P:funclib.core.Seq"/> of the items after the first.
            </summary>
        </member>
        <member name="P:funclib.core.Reverse">
            <summary>
            Returns a <see cref="P:funclib.core.Seq"/> of the items in coll in reverse order.
            </summary>
        </member>
        <member name="P:funclib.core.RSeq">
            <summary>
            Returns, in constant time, a <see cref="P:funclib.core.Seq"/> of the items in
            the collection (which can be a <see cref="T:funclib.Collections.Vector"/> or
            <see cref="T:funclib.Collections.SortedMap"/>) in reverse order. If collection
            is empty returns null.
            </summary>
        </member>
        <member name="P:funclib.core.Second">
            <summary>
            Same as <see cref="!:First.Invoke(Next.Invoke(object))"/>.
            </summary>
        </member>
        <member name="P:funclib.core.SelectKeys">
            <summary>
            Returns a <see cref="T:funclib.Collections.HashMap"/> containing only those entries in map who's key is in keys.
            </summary>
        </member>
        <member name="P:funclib.core.Seq">
            <summary>
            Returns a <see cref="T:funclib.Collections.ISeq"/> on the collection. If the collection is empty
            returns null. Passing null as the collection, returns null. <see cref="P:funclib.core.Seq"/>
            works on <see cref="T:System.String"/>s, <see cref="T:System.Array"/>s or any object that implements
            the <see cref="T:System.Collections.IEnumerable"/> interface. Note: that <see cref="P:funclib.core.Seq"/>
            caches values, thus <see cref="P:funclib.core.Seq"/> should not be used on any enumerable repeatedly
            returns the same mutable object.
            </summary>
        </member>
        <member name="P:funclib.core.Set">
            <summary>
            Returns a <see cref="T:funclib.Collections.HashSet"/> of the distinct elements of coll.
            </summary>
        </member>
        <member name="P:funclib.core.SetValidatorǃ">
            <summary>
            Sets the validator function for <see cref="T:funclib.Components.Core.IRef"/> variables. Validator
            function must be null or a side-effect-free <see cref="T:funclib.Components.Core.IFunction"/> of
            one argument, which will be passed the intended new state of any state
            change. If the new state is unacceptable, the function should either
            return <see cref="!:false"/> or throw an exception.
            </summary>
        </member>
        <member name="P:funclib.core.Some">
            <summary>
            Returns the first logical <see cref="!:true"/> value of execute <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> pred passing
            x, where x is any x in coll, otherwise null.
            </summary>
        </member>
        <member name="P:funclib.core.Sort">
            <summary>
            Returns a sorted collection of the items in coll. If no comparator is
            supplied, use <see cref="P:funclib.core.Compare"/>.
            </summary>
        </member>
        <member name="P:funclib.core.SortBy">
            <summary>
            Returns a sorted sequence of the items in coll, where the sort
            order is determined by comparing <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> key function.
            If no comparator is suppled, uses <see cref="P:funclib.core.Compare"/>.
            </summary>
        </member>
        <member name="P:funclib.core.SortedMap">
            <summary>
            Returns a new <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of assoc.
            </summary>
        </member>
        <member name="P:funclib.core.SortedMapBy">
            <summary>
            Returns a <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings, using the supplied
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> comparator. If any keys are equal, they are handled as
            if by repeated uses of <see cref="P:funclib.core.Assoc"/>.
            </summary>
        </member>
        <member name="P:funclib.core.SortedSet">
            <summary>
            Returns a new <see cref="T:funclib.Collections.SortedSet"/> with the supplied keys. Any
            equal keys are handled as if by repeated uses of <see cref="P:funclib.core.Conj"/>.
            </summary>
        </member>
        <member name="P:funclib.core.SortedSetBy">
            <summary>
            Returns a <see cref="T:funclib.Collections.SortedSet"/> with supplied keys, using the supplied
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> comparator. If any keys are equal, they are handled as
            if by repeated uses of <see cref="P:funclib.core.Conj"/>.
            </summary>
        </member>
        <member name="P:funclib.core.SplitAt">
            <summary>
            Returns a <see cref="T:funclib.Collections.Vector"/> of [<see cref="M:funclib.Components.Core.Take.Invoke(System.Object,System.Object)"/>, <see cref="M:funclib.Components.Core.Drop.Invoke(System.Object,System.Object)"/>].
            </summary>
        </member>
        <member name="P:funclib.core.SplitWith">
            <summary>
            Returns a <see cref="T:funclib.Collections.Vector"/> of [<see cref="M:funclib.Components.Core.TakeWhile.Invoke(System.Object,System.Object)"/>, <see cref="M:funclib.Components.Core.DropWhile.Invoke(System.Object,System.Object)"/>].
            </summary>
        </member>
        <member name="P:funclib.core.Str">
            <summary>
            With no args, returns empty string. With one arg, returns arg.ToString(). If
            arg is null return empty string. With more than one arg, returns the concatenation
            of args.
            </summary>
        </member>
        <member name="P:funclib.core.Subs">
            <summary>
            Returns the <see cref="M:System.String.Substring(System.Int32,System.Int32)"/> of s beginning at start inclusive, and ending
            at end (defaults to length of string), exclusive.
            </summary>
        </member>
        <member name="P:funclib.core.SubVec">
            <summary>
            Returns a <see cref="T:funclib.Collections.IVector"/> of the items in <see cref="T:funclib.Collections.IVector"/> from start (inclusive)
            to end (exclusive). If end is not supplied, default to <see cref="P:funclib.core.Count"/> of <see cref="T:funclib.Collections.IVector"/>.
            </summary>
        </member>
        <member name="P:funclib.core.Swapǃ">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after
            the swap.
            </summary>
        </member>
        <member name="P:funclib.core.Take">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first n items in the coll, or all items
            if there are fewer than n.
            </summary>
        </member>
        <member name="P:funclib.core.TakeLast">
            <summary>
            Returns a <see cref="T:funclib.Collections.ISeq"/> of the last n items in coll. Depending on the
            type of coll may be no better than linear time.
            </summary>
        </member>
        <member name="P:funclib.core.TakeNth">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of every nth item in coll.
            </summary>
        </member>
        <member name="P:funclib.core.TakeWhile">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of successive items from coll while
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> pred returns a logical true. pred
            must be free of side-effects.
            </summary>
        </member>
        <member name="P:funclib.core.ToArray">
            <summary>
            Returns an <see cref="!:object[]"/> containing the contents of coll, which
            can be any collection.
            </summary>
        </member>
        <member name="P:funclib.core.Trampoline">
            <summary>
            <see cref="P:funclib.core.Trampoline"/> can be used to convert algorithms requiring mutual
            recursion without stake consumption. Calls f with supplied args, if any. If
            f returns a fn, calls the fn with no arguments and continues to repeat, until
            the return value is not a fn. then returns the non-fn value. Note: that if you
            want to return a fn as a final value, you must wrap it in some data structure
            and unpack it after trampoline returns.
            </summary>
        </member>
        <member name="P:funclib.core.Transduce">
            <summary>
            This is still experimental!
            Reduce with a transformation of f (xf). If init is not supplied <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> is
            called to produce it. f should be a reducing step function that accepts both 1 and 2 arguments, if
            it accepts only 2 you can add the arity-1 with <see cref="P:funclib.core.Completing"/>. Returns the result of
            applying (thre transformed) xf to init and the first item in coll, then applying xf to the result
            of the 2nd item, etc. If coll contains no items, returns init and f is not called. Note: that
            certain transforms my inject or skip items.
            </summary>
        </member>
        <member name="P:funclib.core.Transient">
            <summary>
            Returns a new transient version of the collection, in constant time.
            </summary>
        </member>
        <member name="P:funclib.core.TreeSeq">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the nodes in a tree, via a depth-first walk.
            </summary>
        </member>
        <member name="P:funclib.core.Truthy">
            <summary>
            Returns <see cref="!:true"/> if source is a logical true. i.e.:
            source is not null or if source is boolean true.
            </summary>
        </member>
        <member name="P:funclib.core.Unreduce">
            <summary>
            If x is <see cref="P:funclib.core.IsReduced"/> returns true, return <see cref="M:funclib.Components.Core.Reduced.Deref"/>,
            otherwise return x.
            </summary>
        </member>
        <member name="P:funclib.core.Update">
            <summary>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return
            a new value, and returns a new structure. If the key does not exists, null is passed as
            the old value.
            </summary>
        </member>
        <member name="P:funclib.core.UpdateIn">
            <summary>
            'Updates' a value in a nested <see cref="T:funclib.Collections.IAssociative"/> structure,
            where ks is a <see cref="T:funclib.Collections.ISeq"/> of keys and f is a <see cref="T:funclib.Components.Core.IFunction"/>
            that will take the old value and any supplied args and return the new value, and
            returns a new nested structure. If any levels do not exists, a <see cref="P:funclib.core.HashMap"/>
            will be created.
            </summary>
        </member>
        <member name="P:funclib.core.UUID">
            <summary>
            Generates a new <see cref="T:System.Guid"/> object.
            </summary>
        </member>
        <member name="P:funclib.core.Value">
            <summary>
            Returns the value in the <see cref="T:funclib.Collections.KeyValuePair"/> object.
            </summary>
        </member>
        <member name="P:funclib.core.Values">
            <summary>
            Returns a <see cref="P:funclib.core.Seq"/> of the <see cref="T:funclib.Collections.IMap"/>'s values.
            </summary>
        </member>
        <member name="P:funclib.core.Vec">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the items from coll.
            </summary>
        </member>
        <member name="P:funclib.core.Vector">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
        </member>
        <member name="P:funclib.core.Volatileǃ">
            <summary>
            Creates and returns a <see cref="!:Volatile"/> with an initial value of val.
            </summary>
        </member>
        <member name="P:funclib.core.VResetǃ">
            <summary>
            Sets the value of <see cref="!:Volatile"/> to a new value without
            regard for the current value
            </summary>
        </member>
        <member name="P:funclib.core.ZipMap">
            <summary>
            Returns a <see cref="P:funclib.core.HashMap"/> with the keys mapped to the corresponding values
            </summary>
        </member>
        <member name="M:funclib.core.addWatch(System.Object,System.Object,System.Object)">
            <summary>
            Adds a watch function to an <see cref="T:funclib.Components.Core.IRef"/> variable. The
            watch function must implement the <see cref="T:funclib.Components.Core.IFunction"/> interface
            and take 4 arguments. The key, the reference, its old-state and its new
            state. Whenever the <see cref="T:funclib.Components.Core.IRef"/>'s state changes all registered
            watches will be called. The functions will be synchronously called. Note:
            an <see cref="T:funclib.Components.Core.IAtom"/>'s state may have changed prior to calling the
            function so use th old/new state argument instead of deref'ing the
            state again.
            </summary>
            <param name="ref">An object that implements the <see cref="T:funclib.Components.Core.IRef"/> interface.</param>
            <param name="key">A unique key for the function.</param>
            <param name="fn">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface and takes 4 arguments.</param>
            <returns>
            Returns this <see cref="T:funclib.Components.Core.ARef"/> object.
            </returns>
        </member>
        <member name="M:funclib.core.and">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns
            a logical false (null or false) then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
            <returns>
            Returns true.
            </returns>
        </member>
        <member name="M:funclib.core.and(System.Object)">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns
            a logical false (null or false) then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
            <param name="x">Object to return.</param>
            <remarks>
            If x implements interface <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> then the object's
            Invoke() method is executed and sets its results to x.
            </remarks>
            <returns>
            Returns x or the result of calling Invoke on x.
            </returns>
        </member>
        <member name="M:funclib.core.and(System.Object,System.Object[])">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns
            a logical false (null or false) then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
            <param name="x">First object to test.</param>
            <param name="next">Rest of the objects to test.</param>
            <remarks>
            If x implements interface <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> then the object's
            Invoke() method is executed and sets its results to x.
            </remarks>
            <returns>
            Returns the first logical false, otherwise the last object evaluated.
            </returns>
        </member>
        <member name="M:funclib.core.apply(System.Object,System.Object)">
            <summary>
            Applies <see cref="T:funclib.Components.Core.IFunction"/> f to the argument list formed perpending
            intervening arguments to args.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="args">An object that can be <see cref="P:funclib.core.Seq"/> against for the arguments for f.</param>
            <returns>
            Returns the results of executing f with the given arguments.
            </returns>
        </member>
        <member name="M:funclib.core.apply(System.Object,System.Object,System.Object)">
            <summary>
            Applies <see cref="T:funclib.Components.Core.IFunction"/> f to the argument list formed perpending
            intervening arguments to args.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">First argument pass to f.</param>
            <param name="args">An object that can be <see cref="P:funclib.core.Seq"/> against for the rest of the arguments for f.</param>
            <returns>
            Returns the results of executing f with the given arguments.
            </returns>
        </member>
        <member name="M:funclib.core.apply(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies <see cref="T:funclib.Components.Core.IFunction"/> f to the argument list formed perpending
            intervening arguments to args.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">First argument pass to f.</param>
            <param name="y">Second argument pass to f.</param>
            <param name="args">An object that can be <see cref="P:funclib.core.Seq"/> against for the rest of the arguments for f.</param>
            <returns>
            Returns the results of executing f with the given arguments.
            </returns>
        </member>
        <member name="M:funclib.core.apply(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies <see cref="T:funclib.Components.Core.IFunction"/> f to the argument list formed perpending
            intervening arguments to args.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">First argument pass to f.</param>
            <param name="y">Second argument pass to f.</param>
            <param name="z">Third argument passed to f.</param>
            <param name="args">An object that can be <see cref="P:funclib.core.Seq"/> against for the rest of the arguments for f.</param>
            <returns>
            Returns the results of executing f with the given arguments.
            </returns>
        </member>
        <member name="M:funclib.core.apply(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Applies <see cref="T:funclib.Components.Core.IFunction"/> f to the argument list formed perpending
            intervening arguments to args.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="a">First argument pass to f.</param>
            <param name="b">Second argument pass to f.</param>
            <param name="c">Third argument passed to f.</param>
            <param name="d">Fourth argument passed to f.</param>
            <param name="args">Rest of the arguments passed to f.</param>
            <returns>
            Returns the results of executing f with the given arguments.
            </returns>
        </member>
        <member name="M:funclib.core.arrayMap">
            <summary>
            Constructs an <see cref="T:funclib.Collections.ArrayMap"/>. If any keys are equal,
            they are handled as if by repeated uses of <see cref="P:funclib.core.Assoc"/>.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.ArrayMap.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.core.arrayMap(System.Object[])">
            <summary>
            Constructs an <see cref="T:funclib.Collections.ArrayMap"/>. If any keys are equal,
            they are handled as if by repeated uses of <see cref="P:funclib.core.Assoc"/>.
            </summary>
            <param name="keyvals">List of Key, Value pairs.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.ArrayMap"/> with Key/Value pairs added.
            </returns>
        </member>
        <member name="M:funclib.core.assoc(System.Object,System.Object,System.Object)">
            <summary>
            Assoc[iate]. When applied to a map, returns a new map of the same (hash/sort) type.
            that contains the mapping of key(s) to val(s). When applied to a vector, returns
            a new vector that contains val at index. Note -> index must be less than or equal to
            count of vector.
            </summary>
            <param name="map">Object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="key">The key of the object to associate in the map.</param>
            <param name="val">The value of the object to associate in the map.</param>
            <returns>
            Returns a new map with the same type of the map object.
            </returns>
        </member>
        <member name="M:funclib.core.assoc(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Assoc[iate]. When applied to a map, returns a new map of the same (hash/sort) type.
            that contains the mapping of key(s) to val(s). When applied to a vector, returns
            a new vector that contains val at index. Note -> index must be less than or equal to
            count of vector.
            </summary>
            <param name="map">Object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="key">The key of the object to associate in the map.</param>
            <param name="val">The value of the object to associate in the map.</param>
            <param name="kvs">Rest of the key/value pairs to associate in the map with.</param>
            <returns>
            Returns a new map with the same type of the map object.
            </returns>
        </member>
        <member name="M:funclib.core.assocIn(System.Object,System.Object,System.Object)">
            <summary>
            Associates a value n a nested associative structure, where ks is a
            sequence of keys and v is the new value. Returns a new nested structure.
            If any levels do not exists, a new <see cref="T:funclib.Collections.HashMap"/>
            will be created.
            </summary>
            <param name="m">Object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="ks">A sequence of keys to find the key/value pair to update.</param>
            <param name="v">A new value for the last key to update with.</param>
            <returns>
            A new nested associative with the value replaced.
            </returns>
        </member>
        <member name="M:funclib.core.assocǃ(System.Object,System.Object,System.Object)">
            <summary>
            When applied to a transient map, addes mapping of key(s) to vals(s).
            When applied to a transient vector, sets the val at index. Note ->
            index must be less than or equal to the count of vector. Returns coll.
            </summary>
            <param name="coll">An object that implements the <see cref="!:ITransientAssociative"/> interface.</param>
            <param name="key">The key of the object to associate in the map.</param>
            <param name="val">The value of the object to associate in the map.</param>
            <returns>
            Returns the modified coll object.
            </returns>
        </member>
        <member name="M:funclib.core.assocǃ(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            When applied to a transient map, addes mapping of key(s) to vals(s).
            When applied to a transient vector, sets the val at index. Note ->
            index must be less than or equal to the count of vector. Returns coll.
            </summary>
            <param name="coll">An object that implements the <see cref="!:ITransientAssociative"/> interface.</param>
            <param name="key">The key of the object to associate in the map.</param>
            <param name="val">The value of the object to associate in the map.</param>
            <param name="kvs">Rest of the key/value pairs to associate in the map with.</param>
            <returns>
            Returns the modified coll object.
            </returns>
        </member>
        <member name="M:funclib.core.atom(System.Object)">
            <summary>
            Creates and returns an <see cref="P:funclib.core.Atom"/> with an initial value or x
            and zero or more options:
                :validator = validate-fn
            Validate-fn must be nil or a side effect free <see cref="T:funclib.Components.Core.IFunction"/>
            of one argument. Which will be passed the intended new state on any
            state change. If the new state is unacceptable, the validate-fn should
            return false or throw an exception.
            </summary>
            <param name="x">Initial value of the <see cref="P:funclib.core.Atom"/>.</param>
            <returns>
            Returns a new <see cref="P:funclib.core.Atom"/> with the initial value set.
            </returns>
        </member>
        <member name="M:funclib.core.atom(System.Object,System.Object[])">
            <summary>
            Creates and returns an <see cref="P:funclib.core.Atom"/> with an initial value or x
            and zero or more options:
                :validator = validate-fn
            Validate-fn must be nil or a side effect free <see cref="T:funclib.Components.Core.IFunction"/>
            of one argument. Which will be passed the intended new state on any
            state change. If the new state is unacceptable, the validate-fn should
            return false or throw an exception.
            </summary>
            <param name="x">Initial value of the <see cref="P:funclib.core.Atom"/>.</param>
            <param name="options">Key/Value pair of options. options are:
                :validator = validate-fn
            </param>
            <returns>
            Returns a new <see cref="P:funclib.core.Atom"/> with the initial value set.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:funclib.core.bitAnd(System.Object,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:funclib.core.bitAnd(System.Object,System.Object,System.Object[])" -->
        <member name="M:funclib.core.boolean(System.Object)">
            <summary>
            If x is a <see cref="T:System.Boolean"/> return x, otherwise return x != null.
            </summary>
            <param name="x">Object to coerce into a boolean.</param>
            <returns>
            Returns a <see cref="T:System.Boolean"/> that indicates either the value of x if its a boolean, otherwise the result of x != null.
            </returns>
        </member>
        <member name="M:funclib.core.butLast(System.Object)">
            <summary>
            Returns a <see cref="P:funclib.core.Seq"/> of all but the last item. In linear time.
            </summary>
            <param name="coll">List of times to process.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.ISeq"/> of all items except for the last item.
            </returns>
        </member>
        <member name="M:funclib.core.char(System.Object)">
            <summary>
            Coerce to char
            </summary>
            <param name="x">The number to convert to a <see cref="T:System.Char"/>.</param>
            <returns>
            Returns a <see cref="T:System.Char"/> value.
            </returns>
        </member>
        <member name="M:funclib.core.class(System.Object)">
            <summary>
            Returns the type of an object.
            </summary>
            <param name="x">Object to get the type of.</param>
            <returns>
            Returns the <see cref="T:System.Type"/> of object x.
            </returns>
        </member>
        <member name="M:funclib.core.comp">
            <summary>
            Takes a set of functions and returns a function that is the composition of
            those functions. The returned <see cref="!:Function"/> takes a variable number
            of args, applies the right-most of functions to the args, the next function
            (right-to-left) to the result, ect.
            </summary>
            <returns>
            Returns the <see cref="P:funclib.core.Identity"/> fucntion;
            </returns>
        </member>
        <member name="M:funclib.core.comp(System.Object)">
            <summary>
            Takes a set of functions and returns a function that is the composition of
            those functions. The returned <see cref="!:Function"/> takes a variable number
            of args, applies the right-most of functions to the args, the next function
            (right-to-left) to the result, ect.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <returns>
            Returns the passed in function.
            </returns>
        </member>
        <member name="M:funclib.core.comp(System.Object,System.Object)">
            <summary>
            Takes a set of functions and returns a function that is the composition of
            those functions. The returned <see cref="!:Function"/> takes a variable number
            of args, applies the right-most of functions to the args, the next function
            (right-to-left) to the result, ect.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="g">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Returns <see cref="!:Function"/> with f and g composed together.
            </returns>
        </member>
        <member name="M:funclib.core.comp(System.Object,System.Object,System.Object[])">
            <summary>
            Takes a set of functions and returns a function that is the composition of
            those functions. The returned <see cref="!:Function"/> takes a variable number
            of args, applies the right-most of functions to the args, the next function
            (right-to-left) to the result, ect.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="g">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="fs">Array of objects that implement the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Returns <see cref="!:Function"/> with f, g and fs composed together.
            </returns>
        </member>
        <member name="M:funclib.core.comparator(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> function that can be coerced into
            the <see cref="T:funclib.FunctionComparer"/> that implements <see cref="T:System.Collections.IComparer"/>
            interface.
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> that when invoked should return : -1 if pred.Invoke(x, y) is truthy, or 1 if pred.Invoke(y, x) is truthy, otherwise 0
            </returns>
        </member>
        <member name="M:funclib.core.compare(System.Object,System.Object)">
            <summary>
            Comparator, that returns a negative number, zero, or positive number when x
            is logically 'less than', 'equal to' or 'greater than' y. Same as
            <see cref="M:System.IComparable.CompareTo(System.Object)"/> except it works for null and
            compares numbers and collections in a type-independent manner.
            </summary>
            <param name="x">Object that is either null, number or implements the <see cref="T:System.IComparable"/> interface.</param>
            <param name="y">Other that is eitehr null, number or an object to test.</param>
            <returns>
            Returns a <see cref="T:System.Int32"/> thats a negative number when  x 'less than' y, zero when x 'equal to' y or positive number
            x 'greater than' y.
            </returns>
        </member>
        <member name="M:funclib.core.compareAndSetǃ(System.Object,System.Object,System.Object)">
            <summary>
            Atomically sets the value of the <see cref="T:funclib.Components.Core.IAtom"/>
            to the new value if and only if the current value of
            the <see cref="T:funclib.Components.Core.IAtom"/> is identical to the oldVal.
            Returns <see cref="!:true"/> if set happened, otherwise <see cref="!:false"/>.
            </summary>
            <param name="atom">An object that implements the <see cref="T:funclib.Components.Core.IAtom"/> interface.</param>
            <param name="oldVal">Current state of the atom.</param>
            <param name="newVal">New state of the atom after successful swap.</param>
            <returns>
            Returns <see cref="!:true"/> if set happened, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.complement(System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> and returns the function that takes the same arguments
            with the same effects, if any, and returns the opposite truthy value.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Returns a <see cref="!:Function"/> that returns a <see cref="T:System.Boolean"/> value which is the opposite truthy value.
            </returns>
        </member>
        <member name="M:funclib.core.concat">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> representing the concatenation of the elements
            in the supplied colls.
            </summary>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/>, when invoked returns null.
            </returns>
        </member>
        <member name="M:funclib.core.concat(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> representing the concatenation of the elements
            in the supplied colls.
            </summary>
            <param name="x">Object to return via a lazy implementation.</param>
            <returns>
            Returna a <see cref="T:funclib.Components.Core.LazySeq"/>, when invoked returns x.
            </returns>
        </member>
        <member name="M:funclib.core.concat(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> representing the concatenation of the elements
            in the supplied colls.
            </summary>
            <param name="x">First collection in the concatenation.</param>
            <param name="y">Second collection to be concatenated.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> that will concatenate y to x.
            </returns>
        </member>
        <member name="M:funclib.core.concat(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> representing the concatenation of the elements
            in the supplied colls.
            </summary>
            <param name="x">First collection in the concatenation.</param>
            <param name="y">Second collection to be concatenated.</param>
            <param name="zs">Other collections to be concatenated with.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> that will concatentat zs, y to x.
            </returns>
        </member>
        <member name="M:funclib.core.conj">
            <summary>
            Conj[oin]. Returns a new collection with the x 'added'. If
            coll is null, returns a new <see cref="T:funclib.Collections.List"/> with
            x as its first item. The addition may happen at different places
            depending on the concrete type of the collection.
            </summary>
            <returns>
            Returns an <see cref="F:funclib.Collections.Vector.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.core.conj(System.Object)">
            <summary>
            Conj[oin]. Returns a new collection with the x 'added'. If
            coll is null, returns a new <see cref="T:funclib.Collections.List"/> with
            x as its first item. The addition may happen at different places
            depending on the concrete type of the collection.
            </summary>
            <param name="coll">Object that implements the <see cref="T:funclib.Collections.ICollection"/> interface.</param>
            <returns>
            Returns the coll object.
            </returns>
        </member>
        <member name="M:funclib.core.conj(System.Object,System.Object)">
            <summary>
            Conj[oin]. Returns a new collection with the x 'added'. If
            coll is null, returns a new <see cref="T:funclib.Collections.List"/> with
            x as its first item. The addition may happen at different places
            depending on the concrete type of the collection.
            </summary>
            <param name="coll">Object that implements the <see cref="T:funclib.Collections.ICollection"/> interface.</param>
            <param name="x">Object to add to the collection.</param>
            <returns>
            If coll is null returns a new <see cref="T:funclib.Collections.List"/>, otherwise returns
            a new collection with the same concrete type as coll with x <see cref="M:funclib.Collections.ICollection.Cons(System.Object)"/>
            onto the list.
            </returns>
        </member>
        <member name="M:funclib.core.conj(System.Object,System.Object,System.Object[])">
            <summary>
            Conj[oin]. Returns a new collection with the x 'added'. If
            coll is null, returns a new <see cref="T:funclib.Collections.List"/> with
            x as its first item. The addition may happen at different places
            depending on the concrete type of the collection.
            </summary>
            <param name="coll">Object that implements the <see cref="T:funclib.Collections.ICollection"/> interface.</param>
            <param name="x">Object to add to the collection.</param>
            <param name="xs">Array of other objects to add to the collection.</param>
            <returns>
            Returns a new collection with the same concrete type of coll but with the
            add objects.
            </returns>
        </member>
        <member name="M:funclib.core.conjǃ">
            <summary>
            Adds x to the transient collection. and returns coll. The addition may happen
            at different places depending on the concrete type of the collection.
            </summary>
            <returns>
            Returns a <see cref="T:funclib.Collections.ITransientCollection"/> for an empty <see cref="T:funclib.Collections.Vector"/>.
            </returns>
        </member>
        <member name="M:funclib.core.conjǃ(System.Object)">
            <summary>
            Adds x to the transient collection. and returns coll. The addition may happen
            at different places depending on the concrete type of the collection.
            </summary>
            <param name="coll">Object of the collection to return.</param>
            <returns>
            Returns the coll object.
            </returns>
        </member>
        <member name="M:funclib.core.conjǃ(System.Object,System.Object)">
            <summary>
            Adds x to the transient collection. and returns coll. The addition may happen
            at different places depending on the concrete type of the collection.
            </summary>
            <param name="coll">Object that implement the <see cref="T:funclib.Collections.ITransientCollection"/> interface.</param>
            <param name="x"></param>
            <returns>
            Returns a <see cref="T:funclib.Collections.ITransientCollection"/> with the object added.
            </returns>
        </member>
        <member name="M:funclib.core.cons(System.Object,System.Object)">
            <summary>
            Returns a new <see cref="T:funclib.Collections.ISeq"/> where x is the first element and seq is the rest.
            </summary>
            <param name="x">Object to be the first in the <see cref="T:funclib.Collections.ISeq"/> object.</param>
            <param name="seq">Object to be the rest of the <see cref="T:funclib.Collections.ISeq"/> object.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.ISeq"/> collection.
            </returns>
        </member>
        <member name="M:funclib.core.constantly(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunctionParams`2"/> that takes any number of
            arguments and returns x.
            </summary>
            <param name="x">Object to return.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunctionParams`2"/> when invoked returns x.
            </returns>
        </member>
        <member name="M:funclib.core.contains(System.Object,System.Object)">
             <summary>
             Returns true if key is present in the given collection, otherwise false. Note
             that for numerically indexed collections like vectors and arrays, this test is the
             number key is within the range of indexes. <see cref="P:funclib.core.Contains"/> operates constant or
             logarithmic time; it will not perform a linear search for a value.
             </summary>
             <param name="coll">Collection to check if key exists.</param>
             <param name="key">Object to check if contains in the collection.</param>
             <remarks>
             <code>coll</code> can be either:
             - <see cref="T:funclib.Collections.IAssociative"/>,
             - <see cref="T:System.Collections.IDictionary"/>
             - <see cref="T:System.String"/>
             - <see cref="T:System.Array"/>
             - <see cref="!:ITransientSet"/>
             - <see cref="!:ITransientAssociative"/>
             - <see cref="T:funclib.Collections.ISet"/>
            
             <code>key</code> needs to be an <see cref="T:System.Int32"/> if coll is either a <see cref="T:System.String"/> or <see cref="T:System.Array"/>.
             </remarks>
             <returns>
             Returns a <see cref="T:System.Boolean"/>: true if key is present in the collection, otherwise false.
             </returns>
        </member>
        <member name="M:funclib.core.count(System.Object)">
            <summary>
            Returns the number of items in the collection. Passing null as coll returns 0.
            </summary>
            <param name="coll">Object to count the number of items exists in the collection.</param>
            <remarks>
            <code>coll</code> can be:
            - <see cref="T:funclib.Collections.ICounted"/>
            - <see cref="T:funclib.Collections.ICollection"/>
            - <see cref="T:System.String"/>
            - <see cref="T:System.Collections.ICollection"/>
            - <see cref="T:System.Collections.IDictionary"/>
            - <see cref="T:System.Collections.DictionaryEntry"/>
            - <see cref="T:funclib.Collections.KeyValuePair"/>
            - <see cref="T:System.Array"/>
            </remarks>
            <returns>
            Returns an <see cref="T:System.Int32"/> of the number of items in the collection.
            </returns>
        </member>
        <member name="M:funclib.core.dec(System.Object)">
            <summary>
            Returns a number one less than num.
            </summary>
            <param name="x">A number to decrease by one.</param>
            <returns>
            Returns either a <see cref="T:System.Double"/> or <see cref="T:System.Int64"/> depending on
            what type x is.
            </returns>
        </member>
        <member name="M:funclib.core.deref(System.Object)">
            <summary>
            Returns the current state of <see cref="T:funclib.Components.Core.IDeref"/> variable.
            </summary>
            <param name="ref">Object that implements the <see cref="T:funclib.Components.Core.IDeref"/> interface.</param>
            <returns>
            Returns the current state of <see cref="T:funclib.Components.Core.IDeref"/> variable.
            </returns>
        </member>
        <member name="M:funclib.core.disj(System.Object)">
            <summary>
            Disj[oin]. Returns a new set of the same concrete type, that
            does not contain they key(s).
            </summary>
            <param name="set">Object that implements the <see cref="T:funclib.Collections.ISet"/> interface.</param>
            <returns>
            Returns the set object.
            </returns>
        </member>
        <member name="M:funclib.core.disj(System.Object,System.Object)">
            <summary>
            Disj[oin]. Returns a new set of the same concrete type, that
            does not contain they key(s).
            </summary>
            <param name="set">Object the implements the <see cref="T:funclib.Collections.ISet"/> interface.</param>
            <param name="key">Object to remove from the set.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.ISet"/> collection without the key.
            </returns>
        </member>
        <member name="M:funclib.core.disj(System.Object,System.Object,System.Object[])">
            <summary>
            Disj[oin]. Returns a new set of the same concrete type, that
            does not contain they key(s).
            </summary>
            <param name="set">Object the implements the <see cref="T:funclib.Collections.ISet"/> interface.</param>
            <param name="key">Object to remove from the set.</param>
            <param name="ks">An array of other object to remove from the set.</param>
            <returns>
            Returns null if the set parameter is null, otherwise removes all items from the
            <see cref="T:funclib.Collections.ISet"/> collection and returns a new <see cref="T:funclib.Collections.ISet"/> collection.
            </returns>
        </member>
        <member name="M:funclib.core.disjǃ(System.Object)">
            <summary>
            Returns a <see cref="!:ITransientSet"/> of the same concrete type that
            does not contain key(s).
            </summary>
            <param name="set">Object that implements the <see cref="!:ITransientSet"/> interface.</param>
            <returns>
            Returns the set object.
            </returns>
        </member>
        <member name="M:funclib.core.disjǃ(System.Object,System.Object)">
            <summary>
            Returns a <see cref="!:ITransientSet"/> of the same concrete type that
            does not contain key(s).
            </summary>
            <param name="set">Object that implements the <see cref="!:ITransientSet"/> interface.</param>
            <param name="key">Object to remove from the set.</param>
            <returns>
            Returns a <see cref="!:ITransientSet"/> without the key.
            </returns>
        </member>
        <member name="M:funclib.core.disjǃ(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="!:ITransientSet"/> of the same concrete type that
            does not contain key(s).
            </summary>
            <param name="set">Object that implements the <see cref="!:ITransientSet"/> interface.</param>
            <param name="key">Object to remove from the set.</param>
            <param name="ks">An array of other object to remove from the set.</param>
            <returns>
            Returns a <see cref="!:ITransientSet"/> without all of the items.
            </returns>
        </member>
        <member name="M:funclib.core.dissoc(System.Object)">
            <summary>
            Dissoc[iate]. Returns a new map of the same concrete type,
            that does not contain a mapping for the key(s).
            </summary>
            <param name="map">Object that implements the <see cref="T:funclib.Collections.IMap"/> interface.</param>
            <returns>
            Returns the map object.
            </returns>
        </member>
        <member name="M:funclib.core.dissoc(System.Object,System.Object)">
            <summary>
            Dissoc[iate]. Returns a new map of the same concrete type,
            that does not contain a mapping for the key(s).
            </summary>
            <param name="map">Object that implements the <see cref="T:funclib.Collections.IMap"/> interface.</param>
            <param name="key">Key to be removed from the map.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.IMap"/> collection with out the key.
            </returns>
        </member>
        <member name="M:funclib.core.dissoc(System.Object,System.Object,System.Object[])">
            <summary>
            Dissoc[iate]. Returns a new map of the same concrete type,
            that does not contain a mapping for the key(s).
            </summary>
            <param name="map">Object that implements the <see cref="T:funclib.Collections.IMap"/> interface.</param>
            <param name="key">Key to be removed from the map.</param>
            <param name="ks">An array of other object to remove from the map.</param>
            <returns>
            Returns null if the map parameter is null, otherwise removes all items from
            the <see cref="T:funclib.Collections.IMap"/> collection and returns a new <see cref="T:funclib.Collections.IMap"/> collection.
            </returns>
        </member>
        <member name="M:funclib.core.dissocǃ(System.Object,System.Object)">
            <summary>
            Returns a <see cref="!:ITransientMap"/> of the same concrete type that
            doesn't contain the same <see cref="T:funclib.Collections.KeyValuePair"/>
            </summary>
            <param name="map">Object that implements the <see cref="!:ITransientMap"/> interface.</param>
            <param name="key">Key for the <see cref="T:funclib.Collections.KeyValuePair"/> to remove from the map.</param>
            <returns>
            Returns a <see cref="!:ITransientMap"/> collection without the given key.
            </returns>
        </member>
        <member name="M:funclib.core.dissocǃ(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="!:ITransientMap"/> of the same concrete type that
            doesn't contain the same <see cref="T:funclib.Collections.KeyValuePair"/>
            </summary>
            <param name="map">Object that implements the <see cref="!:ITransientMap"/> interface.</param>
            <param name="key">Key for the <see cref="T:funclib.Collections.KeyValuePair"/> to remove from the map.</param>
            <param name="ks">An array of keys for the <see cref="T:funclib.Collections.KeyValuePair"/> to remove from the map.</param>
            <returns>
            Returns a <see cref="!:ITransientMap"/> collection without all the given keys.
            </returns>
        </member>
        <member name="M:funclib.core.distinct">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of elements of coll without duplicate values.
            </summary>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> that returns a <see cref="!:TransducerFunction"/>.
            </returns>
        </member>
        <member name="M:funclib.core.distinct(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of elements of coll without duplicate values.
            </summary>
            <param name="coll">A collection of items to return distinct with.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of unique items from coll.
            </returns>
        </member>
        <member name="M:funclib.core.divide(System.Object)">
            <summary>
            Divides number(s).
            </summary>
            <param name="x">The numerator of the equation.</param>
            <returns>
            Returns either <see cref="T:System.Double"/> or <see cref="T:System.Int64"/> depending on the input. With 1 as the denominator.
            </returns>
        </member>
        <member name="M:funclib.core.divide(System.Object,System.Object)">
            <summary>
            Divides number(s).
            </summary>
            <param name="x">The denominator of the equation.</param>
            <param name="y">The numerator of the equation.</param>
            <returns>
            Returns either <see cref="T:System.Double"/> or <see cref="T:System.Int64"/> depending on the input for the equation: x/y
            </returns>
        </member>
        <member name="M:funclib.core.divide(System.Object,System.Object,System.Object[])">
            <summary>
            Divides number(s).
            </summary>
            <param name="x">The denominator of the equation.</param>
            <param name="y">The numerator of the equation.</param>
            <param name="more">Rest of the numerators applied left-to-right.</param>
            <returns>
            Returns either <see cref="T:System.Double"/> or <see cref="T:System.Int64"/> depending on the input for the equation: x/y/more...
            </returns>
        </member>
        <member name="M:funclib.core.do(System.Object[])">
            <summary>
            Evaluates the expressions in order and returns the value of the last.
            If no expressions are supplied, returns null.
            </summary>
            <param name="rest">Objects array.</param>
            <returns>
            Returns the value of the last.
            </returns>
        </member>
        <member name="M:funclib.core.doAll(System.Object)">
            <summary>
            For <see cref="T:funclib.Components.Core.LazySeq"/> that are produced via other functions and have side effects.
            The side effects are not produces until the sequence is consumed. <see cref="P:funclib.core.DoAll"/>
            walks though successive next, retains the head and returns it, thus causing the
            entire seq to reside in memory at one time.
            </summary>
            <param name="coll"><see cref="T:funclib.Components.Core.LazySeq"/> to consume.</param>
            <returns>
            Returns the <see cref="T:funclib.Components.Core.LazySeq"/> already consumed.
            </returns>
        </member>
        <member name="M:funclib.core.doAll(System.Object,System.Object)">
            <summary>
            For <see cref="T:funclib.Components.Core.LazySeq"/> that are produced via other functions and have side effects.
            The side effects are not produces until the sequence is consumed. <see cref="P:funclib.core.DoAll"/>
            walks though successive next, retains the head and returns it, thus causing the
            entire seq to reside in memory at one time.
            </summary>
            <param name="n">The <see cref="T:System.Int32"/> times to walk the sequence.</param>
            <param name="coll"><see cref="T:funclib.Components.Core.LazySeq"/> to consume.</param>
            <returns>
            Returns the <see cref="T:funclib.Components.Core.LazySeq"/> already consumed.
            </returns>
        </member>
        <member name="M:funclib.core.doRun(System.Object)">
            <summary>
            For <see cref="T:funclib.Components.Core.LazySeq"/> that are produced via other functions and have side effects.
            The side effects are not produces until the sequence is consumed. <see cref="P:funclib.core.DoAll"/>
            walks though successive next, retains the head and returns it, thus causing the
            entire seq to reside in memory at one time.
            </summary>
            <param name="coll">A <see cref="T:funclib.Components.Core.LazySeq"/> to consume.</param>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="M:funclib.core.doRun(System.Object,System.Object)">
            <summary>
            For <see cref="T:funclib.Components.Core.LazySeq"/> that are produced via other functions and have side effects.
            The side effects are not produces until the sequence is consumed. <see cref="P:funclib.core.DoAll"/>
            walks though successive next, retains the head and returns it, thus causing the
            entire seq to reside in memory at one time.
            </summary>
            <param name="n">The <see cref="T:System.Int32"/> times to walk the sequence.</param>
            <param name="coll"><see cref="T:funclib.Components.Core.LazySeq"/> to consume.</param>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="M:funclib.core.doTimes(System.Int32,System.Func{System.Int32,System.Object})">
            <summary>
            Constructor for the <see cref="T:funclib.Components.Core.DoTimes"/> class.
            </summary>
            <param name="n">Number of times to execute the fn.</param>
            <param name="fn">The function to execute.</param>
        </member>
        <member name="M:funclib.core.doTimes(System.Int32,funclib.Components.Core.Generic.IFunction{System.Int32,System.Object})">
            <summary>
            Constructor for the <see cref="T:funclib.Components.Core.DoTimes"/> class.
            </summary>
            <param name="n">Number of times to execute the fn.</param>
            <param name="fn">The function to execute.</param>
        </member>
        <member name="M:funclib.core.drop(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of all but the first n items in coll.
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> of the items to drop from the collection.</param>
            <param name="coll">The collection to drop the first x items from.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of items without the first x items.
            </returns>
        </member>
        <member name="M:funclib.core.dropLast(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of all but the last n items. Default is 1.
            </summary>
            <param name="coll">Collection of items to remove the last one from.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> with all but the last item.
            </returns>
        </member>
        <member name="M:funclib.core.dropLast(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of all but the last n items. Default is 1.
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> of the last times from the collection.</param>
            <param name="coll">The collection to remove from.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of items without the last n items.
            </returns>
        </member>
        <member name="M:funclib.core.dropWhile(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the items in coll starting from the first item
            for which the predicate returns a logical false.
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="coll">List of times to process.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> with items starting from the first logically false item in coll.
            </returns>
        </member>
        <member name="M:funclib.core.empty(System.Object)">
            <summary>
            Returns an empty <see cref="T:funclib.Collections.ICollection"/> of the same category as coll or null.
            </summary>
            <param name="coll">An object to empty.</param>
            <returns>
            Returns an empty <see cref="T:funclib.Collections.ICollection"/> of the same category as coll. If coll
            doesn't implement the <see cref="T:funclib.Collections.ICollection"/> interface returns null.
            </returns>
        </member>
        <member name="M:funclib.core.ensureReduced(System.Object)">
            <summary>
            If x is already <see cref="P:funclib.core.IsReduced"/>, return it else return <see cref="P:funclib.core.Reduced"/> value.
            </summary>
            <param name="x">Object to reduce or not.</param>
            <returns>
            If x is already <see cref="P:funclib.core.IsReduced"/>, return it else return <see cref="P:funclib.core.Reduced"/> value.
            </returns>
        </member>
        <member name="M:funclib.core.everyPred(System.Object)">
            <summary>
            Takes a set of predicates, <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>, and returns a <see cref="T:funclib.Components.Core.IFunction"/>. This
            function composes all the predicates that returns a logical true value against all of its arguments, else
            it returns false. Note: f is short-circuiting in that it will stop execution on the first
            argument that triggers a logical false result against the original predicates.
            </summary>
            <param name="p">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <returns>
            Returns <see cref="!:true"/> if p returns a logical true, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.everyPred(System.Object,System.Object)">
            <summary>
            Takes a set of predicates, <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>, and returns a <see cref="T:funclib.Components.Core.IFunction"/>. This
            function composes all the predicates that returns a logical true value against all of its arguments, else
            it returns false. Note: f is short-circuiting in that it will stop execution on the first
            argument that triggers a logical false result against the original predicates.
            </summary>
            <param name="p1">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="p2">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <returns>
            Returns <see cref="!:true"/> if p returns a logical true, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.everyPred(System.Object,System.Object,System.Object)">
            <summary>
            Takes a set of predicates, <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>, and returns a <see cref="T:funclib.Components.Core.IFunction"/>. This
            function composes all the predicates that returns a logical true value against all of its arguments, else
            it returns false. Note: f is short-circuiting in that it will stop execution on the first
            argument that triggers a logical false result against the original predicates.
            </summary>
            <param name="p1">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="p2">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="p3">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <returns>
            Returns <see cref="!:true"/> if p returns a logical true, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.everyPred(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Takes a set of predicates, <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>, and returns a <see cref="T:funclib.Components.Core.IFunction"/>. This
            function composes all the predicates that returns a logical true value against all of its arguments, else
            it returns false. Note: f is short-circuiting in that it will stop execution on the first
            argument that triggers a logical false result against the original predicates.
            </summary>
            <param name="p1">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="p2">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="p3">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="ps">Rest of objects that implement <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <returns>
            Returns <see cref="!:true"/> if p returns a logical true, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.falsy(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if the object is a logical false. i.e.
            If source is null or source is bool and that value is false.
            </summary>
            <param name="source">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if the object is a logical false. i.e.
            If source is null or source is bool and that value is false.
            </returns>
        </member>
        <member name="M:funclib.core.ffirst(System.Object)">
            <summary>
            Returns the first item's first item. Same as <see cref="!:First.Invoke(First.Invoke(object))"/>.
            </summary>
            <param name="x">Object to return the first item's first item.</param>
            <returns>
            Returns the first item's first item
            </returns>
        </member>
        <member name="M:funclib.core.filter(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of items in coll for which predicate returns a logical true.
            </summary>
            <param name="pred">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">An object to test.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of items in coll for which predicate returns a logical true.
            </returns>
        </member>
        <member name="M:funclib.core.find(System.Object,System.Object)">
            <summary>
            Returns the <see cref="T:funclib.Collections.KeyValuePair"/> for the key, or null if key is not present.
            </summary>
            <param name="map">An object that implements either <see cref="T:funclib.Collections.IAssociative"/>, <see cref="T:System.Collections.IDictionary"/> or <see cref="!:ITransientAssociative"/> interface.</param>
            <param name="key">The key we want to find in the map.</param>
            <returns>
            Returns the <see cref="T:funclib.Collections.KeyValuePair"/> for the key, or null if key is not present.
            </returns>
        </member>
        <member name="M:funclib.core.first(System.Object)">
            <summary>
            Returns the first time in the collection. Calls <see cref="P:funclib.core.Seq"/> on the collection.
            If coll is null, return null.
            </summary>
            <param name="coll">An object that is <see cref="P:funclib.core.Seq"/>able.</param>
            <returns>
            Returns the first time in the collection. Calls <see cref="P:funclib.core.Seq"/> on the collection.
            If coll is null, return null.
            </returns>
        </member>
        <member name="M:funclib.core.flatten(System.Object)">
            <summary>
            Takes any nested combination of <see cref="T:funclib.Collections.ISequential"/>
            things (<see cref="T:funclib.Collections.List"/>, <see cref="T:funclib.Collections.Vector"/>, etc.) and returns
            their contents as a single, flat sequence.  <see cref="!:Flatten.Invoke(null)"/> returns an
            empty sequence.
            </summary>
            <param name="x">Object to flatten.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> that when invoked flattens the sequence.
            </returns>
        </member>
        <member name="M:funclib.core.fnext(System.Object)">
            <summary>
            Returns the first item's next list. Same as <see cref="!:First.Invoke(Next.Invoke(object))"/>.
            </summary>
            <param name="x">Object to return the first item's next list.</param>
            <returns>
            Returns the first item's next list.
            </returns>
        </member>
        <member name="M:funclib.core.fnull(System.Object,System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f, and returns a <see cref="!:Function"/> that calls f, replacing
            a null first argument with the supplied value x. Higher arity versions can replace arguments in
            the second and third positions.  Note: that the function f can take any number of arguments,
            not just the one(s) being null-patched.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Object to replace a first parameter passed thats null.</param>
            <returns>
            Returns a <see cref="!:Function"/> that is null-patched.
            </returns>
        </member>
        <member name="M:funclib.core.fnull(System.Object,System.Object,System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f, and returns a <see cref="!:Function"/> that calls f, replacing
            a null first argument with the supplied value x. Higher arity versions can replace arguments in
            the second and third positions.  Note: that the function f can take any number of arguments,
            not just the one(s) being null-patched.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Object to replace a first parameter passed thats null.</param>
            <param name="y">Object to replace a second parameter passed thats null.</param>
            <returns>
            Returns a <see cref="!:Function"/> that is null-patched.
            </returns>
        </member>
        <member name="M:funclib.core.fnull(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f, and returns a <see cref="!:Function"/> that calls f, replacing
            a null first argument with the supplied value x. Higher arity versions can replace arguments in
            the second and third positions.  Note: that the function f can take any number of arguments,
            not just the one(s) being null-patched.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Object to replace a first parameter passed thats null.</param>
            <param name="y">Object to replace a second parameter passed thats null.</param>
            <param name="z">Object to replace a third parameter passed thats null.</param>
            <returns>
            Returns a <see cref="!:Function"/> that is null-patched.
            </returns>
        </member>
        <member name="M:funclib.core.format(System.Object,System.Object[])">
            <summary>
            Formats a string using <see cref="M:System.String.Format(System.String,System.Object[])"/> format syntax.
            </summary>
            <param name="fmt">The string to be formatted.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>
            Returns the formated <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:funclib.core.frequencies(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.HashMap"/> from distinct items in coll to the number of times they appear.
            </summary>
            <param name="coll">An object to run distinct against.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.HashMap"/> from distinct items in coll to the number of times they appear.
            </returns>
        </member>
        <member name="M:funclib.core.func``1(System.Func{``0})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`1"/> from a <see cref="T:System.Func`1"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`1"/> to execute.</param>
        </member>
        <member name="M:funclib.core.invoke``1(funclib.Components.Core.Generic.IFunction{``0})">
            <summary>
            Invokes the <see cref="T:System.Func`1"/>.
            </summary>
            <returns>
            Returns the results of the <see cref="T:System.Func`1"/> function.
            </returns>
        </member>
        <member name="M:funclib.core.func``2(System.Func{``0,``1})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`2"/> from a <see cref="T:System.Func`2"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`2"/> to execute.</param>
        </member>
        <member name="M:funclib.core.invoke``2(funclib.Components.Core.Generic.IFunction{``0,``1},``0)">
            <summary>
            Invokes the <see cref="T:System.Func`2"/>.
            </summary>
            <param name="x">First parameter of the function.</param>
            <returns>
            Returns the results of the <see cref="T:System.Func`2"/> function.
            </returns>
        </member>
        <member name="M:funclib.core.func``3(System.Func{``0,``1,``2})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`3"/> from a <see cref="T:System.Func`3"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`3"/> to execute.</param>
        </member>
        <member name="M:funclib.core.invoke``3(funclib.Components.Core.Generic.IFunction{``0,``1,``2},``0,``1)">
            <summary>
            Invokes the <see cref="T:System.Func`3"/>.
            </summary>
            <param name="x">First parameter of the function.</param>
            <param name="y">Second parameter of the function.</param>
            <returns>
            Returns the results of the <see cref="T:System.Func`3"/> function.
            </returns>
        </member>
        <member name="M:funclib.core.func``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`4"/> from a <see cref="T:System.Func`4"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`4"/> to execute.</param>
        </member>
        <member name="M:funclib.core.invoke``4(funclib.Components.Core.Generic.IFunction{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Invokes the <see cref="T:System.Func`4"/>.
            </summary>
            <param name="x">First parameter of the function.</param>
            <param name="y">Second parameter of the function.</param>
            <param name="z">Third parameter of the function.</param>
            <returns>
            Returns the results of the <see cref="T:System.Func`4"/> function.
            </returns>
        </member>
        <member name="M:funclib.core.func``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`5"/> from a <see cref="T:System.Func`5"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`5"/> to execute.</param>
        </member>
        <member name="M:funclib.core.invoke``5(funclib.Components.Core.Generic.IFunction{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Invokes the <see cref="T:System.Func`5"/>.
            </summary>
            <param name="a">First parameter of the function.</param>
            <param name="b">Second parameter of the function.</param>
            <param name="c">Third parameter of the function.</param>
            <param name="d">Fourth parameter of the function.</param>
            <returns>
            Returns the results of the <see cref="T:System.Func`5"/> function.
            </returns>
        </member>
        <member name="M:funclib.core.func``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.Function`6"/> from a <see cref="T:System.Func`6"/>.
            </summary>
            <param name="x">A <see cref="T:System.Func`6"/> to execute.</param>
        </member>
        <member name="M:funclib.core.invoke``6(funclib.Components.Core.Generic.IFunction{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Invokes the <see cref="T:System.Func`5"/>.
            </summary>
            <param name="a">First parameter of the function.</param>
            <param name="b">Second parameter of the function.</param>
            <param name="c">Third parameter of the function.</param>
            <param name="d">Fourth parameter of the function.</param>
            <param name="e">Fifth parameter of the function.</param>
            <returns>
            Returns the results of the <see cref="T:System.Func`6"/> function.
            </returns>
        </member>
        <member name="M:funclib.core.func``2(System.Func{``0[],``1})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.FunctionParams`2"/> from a <see cref="!:Func&lt;T1[], TResult&gt;"/>.
            </summary>
            <param name="x">A <see cref="!:Func&lt;T1[], TResult&gt;"/> to execute.</param>
        </member>
        <member name="M:funclib.core.invoke``2(funclib.Components.Core.Generic.IFunction{``0[],``1},``0[])">
            <summary>
            Invokes the <see cref="!:Func&lt;T1[], TResult&gt;"/>.
            </summary>
            <param name="args">Array of parameters of the function.</param>
            <returns>
            Returns the results of the <see cref="!:Func&lt;T1[], TResult&gt;"/> function.
            </returns>
        </member>
        <member name="M:funclib.core.func``3(System.Func{``0,``1[],``2})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.FunctionParams`3"/> from a <see cref="!:Func&lt;T1, T2[], TResult&gt;"/>.
            </summary>
            <param name="x">A <see cref="!:Func&lt;T1, T2[], TResult&gt;"/> to execute.</param>
        </member>
        <member name="M:funclib.core.invoke``3(funclib.Components.Core.Generic.IFunction{``0,``1[],``2},``0,``1[])">
            <summary>
            Invokes the <see cref="!:Func&lt;T1, T2[], TResult&gt;"/>.
            </summary>
            <param name="x">First parameter of the function.</param>
            <param name="args">Array of parameters.</param>
            <returns>
            Returns the results of the <see cref="!:Func&lt;T1, T2[], TResult&gt;"/> function.
            </returns>
        </member>
        <member name="M:funclib.core.func``4(System.Func{``0,``1,``2[],``3})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.FunctionParams`4"/> from a <see cref="!:Func&lt;T1, T2, T3[], TResult&gt;"/>.
            </summary>
            <param name="x">A <see cref="!:Func&lt;T1, T2, T3[], TResult&gt;"/> to execute.</param>
        </member>
        <member name="M:funclib.core.invoke``4(funclib.Components.Core.Generic.IFunction{``0,``1,``2[],``3},``0,``1,``2[])">
            <summary>
            Invokes the <see cref="!:Func&lt;T1, T2, T3[], TResult&gt;"/>.
            </summary>
            <param name="x">First parameter of the function.</param>
            <param name="y">Second parameter of the function.</param>
            <param name="args">Array of parameters.</param>
            <returns>
            Returns the results of the <see cref="!:Func&lt;T1, T2, T3[], TResult&gt;"/> function.
            </returns>
        </member>
        <member name="M:funclib.core.func``5(System.Func{``0,``1,``2,``3[],``4})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Generic.FunctionParams`5"/> from a <see cref="!:Func&lt;T1, T2, T3, T4[], TResult&gt;"/>.
            </summary>
            <param name="x">A <see cref="!:Func&lt;T1, T2, T3, T4[], TResult&gt;"/> to execute.</param>
        </member>
        <member name="M:funclib.core.invoke``5(funclib.Components.Core.Generic.IFunction{``0,``1,``2,``3[],``4},``0,``1,``2,``3[])">
            <summary>
            Invokes the <see cref="!:Func&lt;T1, T2, T3, T4[], TResult&gt;"/>.
            </summary>
            <param name="x">First parameter of the function.</param>
            <param name="y">Second parameter of the function.</param>
            <param name="z">Third parameter of the function.</param>
            <param name="args">Array of parameters.</param>
            <returns>
            Returns the results of the <see cref="!:Func&lt;T1, T2, T3, T4[], TResult&gt;"/> function.
            </returns>
        </member>
        <member name="M:funclib.core.get(System.Object,System.Object)">
            <summary>
            Returns the value mapped to the key, notFound or null if key is not present.
            </summary>
            <param name="map">Object to pull key from.</param>
            <param name="key">If object is a map object, key is the key, otherwise key is an integer of the index.</param>
            <returns>
            Returns the value mapped to the key, notFound or null if key is not present.
            </returns>
        </member>
        <member name="M:funclib.core.get(System.Object,System.Object,System.Object)">
            <summary>
            Returns the value mapped to the key, notFound or null if key is not present.
            </summary>
            <param name="map">Object to pull key from.</param>
            <param name="key">If object is a map object, key is the key, otherwise key is an integer of the index.</param>
            <param name="notFound">Object that returns if the key is not found.</param>
            <returns>
            Returns the value mapped to the key, notFound or null if key is not present.
            </returns>
        </member>
        <member name="M:funclib.core.getIn(System.Object,System.Object)">
            <summary>
            Returns the value in a nested associative structure, where ks
            is a sequence of keys. Returns null if the key is not present,
            otherwise notFound value if supplied.
            </summary>
            <param name="m">Object to pull the final key from.</param>
            <param name="ks">Sequence of keys.</param>
            <returns>
            Returns the key found otherwise null.
            </returns>
        </member>
        <member name="M:funclib.core.getIn(System.Object,System.Object,System.Object)">
            <summary>
            Returns the value in a nested associative structure, where ks
            is a sequence of keys. Returns null if the key is not present,
            otherwise notFound value if supplied.
            </summary>
            <param name="m">Object to pull the final key from.</param>
            <param name="ks">Sequence of keys.</param>
            <param name="notFound">Object to return if key is not found.</param>
            <returns>
            Returns the key found otherwise notFound.
            </returns>
        </member>
        <member name="M:funclib.core.getValidator(System.Object)">
            <summary>
            Gets the validator function for a <see cref="T:funclib.Components.Core.IRef"/> variable.
            </summary>
            <param name="ref">An object that implements the <see cref="T:funclib.Components.Core.IRef"/> interface.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.IFunction"/> that takes one parameter.
            </returns>
        </member>
        <member name="M:funclib.core.groupBy(System.Object,System.Object)">
            <summary>
            Returns a <see cref="P:funclib.core.HashMap"/> of elements of coll keyed by the result of
            <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> f. The value at each key will be a
            <see cref="P:funclib.core.Vector"/> of the corresponding elements, in the order they appeared
            in coll.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">A collection of items to group by.</param>
            <returns>
            Returns a <see cref="P:funclib.core.HashMap"/> of elements of coll keyed by the result of
            <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> f.
            </returns>
        </member>
        <member name="M:funclib.core.hashMap">
            <summary>
            Returns a new <see cref="T:funclib.Collections.HashMap"/> with the supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of <see cref="P:funclib.core.Assoc"/>.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.HashMap.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.core.hashMap(System.Object[])">
            <summary>
            Returns a new <see cref="T:funclib.Collections.HashMap"/> with the supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of <see cref="P:funclib.core.Assoc"/>.
            </summary>
            <param name="keyvals">Key/value pairs adding to the <see cref="T:funclib.Collections.HashMap"/> data structure.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.HashMap"/> with the supplied mappings.
            </returns>
        </member>
        <member name="M:funclib.core.hashSet">
            <summary>
            Returns a new <see cref="T:funclib.Collections.HashSet"/> with the supplied keys. Any
            equal keys are handled as if by repeated uses of <see cref="P:funclib.core.Conj"/>.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.HashSet.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.core.hashSet(System.Object[])">
            <summary>
            Returns a new <see cref="T:funclib.Collections.HashSet"/> with the supplied keys. Any
            equal keys are handled as if by repeated uses of <see cref="P:funclib.core.Conj"/>.
            </summary>
            <param name="keys">Keys to add to <see cref="T:funclib.Collections.HashSet"/> data structure.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.HashSet"/> with the supplied keys.
            </returns>
        </member>
        <member name="M:funclib.core.identity(System.Object)">
            <summary>
            Returns its argument.
            </summary>
            <param name="x">Argument to return.</param>
            <returns>
            Returns its argument.
            </returns>
        </member>
        <member name="M:funclib.core.inc(System.Object)">
            <summary>
            Returns a number one greater than x.
            </summary>
            <param name="x">Number to incremental by one.</param>
            <returns>
            Returns a number one greater than x.
            </returns>
        </member>
        <member name="M:funclib.core.interleave">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.List.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.core.interleave(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </summary>
            <param name="c1">The collection returned lazily.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of c1.
            </returns>
        </member>
        <member name="M:funclib.core.interleave(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </summary>
            <param name="c1">First collection to interleave.</param>
            <param name="c2">Second collection to interleave.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </returns>
        </member>
        <member name="M:funclib.core.interleave(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </summary>
            <param name="c1">First collection to interleave.</param>
            <param name="c2">Second collection to interleave.</param>
            <param name="colls">Rest of the collections to interleave.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first item in each coll, then the second, etc.
            </returns>
        </member>
        <member name="M:funclib.core.interpose(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of elements separated by sep.
            </summary>
            <param name="sep">Separator object.</param>
            <param name="coll">Collection to insert the separtor with.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of elements separated by sep.
            </returns>
        </member>
        <member name="M:funclib.core.into">
            <summary>
            Returns a new collection consisting of to with all of the items of from conjoined.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.Vector.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.core.into(System.Object)">
            <summary>
            Returns a new collection consisting of to with all of the items of from conjoined.
            </summary>
            <param name="to">Object returned.</param>
            <returns>
            Returns the to object.
            </returns>
        </member>
        <member name="M:funclib.core.into(System.Object,System.Object)">
            <summary>
            Returns a new collection consisting of to with all of the items of from conjoined.
            </summary>
            <param name="to">Object to conjoin values to.</param>
            <param name="from">Object pulling values to be conjoined.</param>
            <returns>
            Returns a new collection with the same data type of to consisting of to with all of the items of from conjoined.
            </returns>
        </member>
        <member name="M:funclib.core.into(System.Object,System.Object,System.Object)">
            <summary>
            Returns a new collection consisting of to with all of the items of from conjoined.
            </summary>
            <param name="to">Object to conjoin values to.</param>
            <param name="xform">A transducer</param>
            <param name="from">Object pulling values to be conjoined.</param>
            <returns>
            Returns a new collection with the same data type of to consisting of to with all of the items of from conjoined.
            </returns>
        </member>
        <member name="M:funclib.core.invoke(System.Object)">
            <summary>
            Invokes a <see cref="T:funclib.Components.Core.IFunction"/> function with supplied arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Returns the result of calling f with no parameters.
            </returns>
        </member>
        <member name="M:funclib.core.invoke(System.Object,System.Object)">
            <summary>
            Invokes a <see cref="T:funclib.Components.Core.IFunction"/> function with supplied arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">First parameter for the function.</param>
            <returns>
            Returns the result of calling f with one parameters.
            </returns>
        </member>
        <member name="M:funclib.core.invoke(System.Object,System.Object,System.Object)">
            <summary>
            Invokes a <see cref="T:funclib.Components.Core.IFunction"/> function with supplied arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">First parameter for the function.</param>
            <param name="y">Second parameter for the function.</param>
            <returns>
            Returns the result of calling f with two parameters.
            </returns>
        </member>
        <member name="M:funclib.core.invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Invokes a <see cref="T:funclib.Components.Core.IFunction"/> function with supplied arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">First parameter for the function.</param>
            <param name="y">Second parameter for the function.</param>
            <param name="z">Third parameter for the function.</param>
            <returns>
            Returns the result of calling f with three parameters.
            </returns>
        </member>
        <member name="M:funclib.core.invoke(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Invokes a <see cref="T:funclib.Components.Core.IFunction"/> function with supplied arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="a">First parameter for the function.</param>
            <param name="b">Second parameter for the function.</param>
            <param name="c">Third parameter for the function.</param>
            <param name="ds">Rest of the parameter for the function.</param>
            <returns>
            Returns the result of calling f with all parameters.
            </returns>
        </member>
        <member name="M:funclib.core.isAny(System.Object)">
            <summary>
            Returns <see cref="!:true"/> given any argument.
            </summary>
            <param name="x">Given argument.</param>
            <returns>
            Returns <see cref="!:true"/> given any argument.
            </returns>
        </member>
        <member name="M:funclib.core.isAssociative(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.IAssociative"/> interface, otherwise <see cref="!:false"/>.
            </summary>
            <param name="coll">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.IAssociative"/> interface, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isBoolean(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Boolean"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Boolean"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isChar(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Char"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Char"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isChunkedSeq(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if s is a <see cref="T:funclib.Collections.IChunkedSeq"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="s">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if s is a <see cref="T:funclib.Collections.IChunkedSeq"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isCounted(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.ICounted"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.ICounted"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isDistinct(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if no two arguments are equal, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Other to test.</param>
            <returns>
            Always returns <see cref="!:true"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isDistinct(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if no two arguments are equal, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First object to test.</param>
            <param name="y">Second object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if no two arguments are equal, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isDistinct(System.Object,System.Object,System.Object[])">
            <summary>
            Returns <see cref="!:true"/> if no two arguments are equal, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First object to test.</param>
            <param name="y">Second object to test.</param>
            <param name="more">Rest of the objects to test.</param>
            <returns>
            Returns <see cref="!:true"/> if no two arguments are equal, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isDouble(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Double"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Double"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isEmpty(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if coll has no items. Same as <see cref="!:Not.Invoke(Seq.Invoke(object))"/>.
            </summary>
            <param name="coll">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if coll has no items. Same as <see cref="!:Not.Invoke(Seq.Invoke(object))"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isEqualTo(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if values are equal, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="M:funclib.core.isEqualTo(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if values are equal, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test against.</param>
            <returns>
            Returns <see cref="!:true"/> if x is equal to y, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isEqualTo(System.Object,System.Object,System.Object[])">
            <summary>
            Returns <see cref="!:true"/> if values are equal, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test against.</param>
            <param name="more">All other elements to test.</param>
            <returns>
            Returns <see cref="!:true"/> if values are equal, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isEven(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if n is an even number.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if n is an even number.
            </returns>
        </member>
        <member name="M:funclib.core.isEvery(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> pred is a logical
            true for every item in the coll, otherwise <see cref="!:false"/>
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">The collection to test.</param>
            <returns>
            Returns <see cref="!:true"/> if <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> pred is a logical
            true for every item in the coll, otherwise <see cref="!:false"/>
            </returns>
        </member>
        <member name="M:funclib.core.isFalse(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="!:false"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="!:false"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isFunction(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Components.Core.IFunction"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Components.Core.IFunction"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isGreaterThan(System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically decreasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <returns>
            Returns true.
            </returns>
        </member>
        <member name="M:funclib.core.isGreaterThan(System.Object,System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically decreasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically decreasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isGreaterThan(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically decreasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <param name="more">Rest of the elements to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically decreasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isGreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-increasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <returns>
            Returns true.
            </returns>
        </member>
        <member name="M:funclib.core.isGreaterThanOrEqualTo(System.Object,System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-increasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically non-increasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isGreaterThanOrEqualTo(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-increasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <param name="more">Rest of the elements to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically non-increasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isIdentical(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is identical to y, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First object.</param>
            <param name="y">Object to test against.</param>
            <returns>
            Returns <see cref="!:true"/> if x is identical to y, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isInstance(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if c <see cref="T:System.Type"/> is an instance of x, otherwise <see cref="!:false"/>.
            </summary>
            <param name="c">An <see cref="T:System.Type"/> object.</param>
            <param name="x">An object to check type of.</param>
            <returns>
            Returns <see cref="!:true"/> if c <see cref="T:System.Type"/> is an instance of x, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isInt(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Int16"/> or <see cref="T:System.Byte"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Int16"/> or <see cref="T:System.Byte"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isInteger(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a
            <see cref="T:System.Int32"/>,
            <see cref="T:System.Int64"/>,
            <see cref="T:System.Int16"/>
            <see cref="T:System.UInt32"/>,
            <see cref="T:System.UInt64"/>,
            <see cref="T:System.UInt16"/>
            <see cref="T:System.Char"/>
            <see cref="T:System.Byte"/>,
            or <see cref="T:System.SByte"/>,
            otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a
            <see cref="T:System.Int32"/>,
            <see cref="T:System.Int64"/>,
            <see cref="T:System.Int16"/>
            <see cref="T:System.UInt32"/>,
            <see cref="T:System.UInt64"/>,
            <see cref="T:System.UInt16"/>
            <see cref="T:System.Char"/>
            <see cref="T:System.Byte"/>,
            or <see cref="T:System.SByte"/>,
            otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isLessThan(System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically increasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <returns>
            Returns true.
            </returns>
        </member>
        <member name="M:funclib.core.isLessThan(System.Object,System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically increasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically increasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isLessThan(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically increasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <param name="more">Rest of the elements to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically increasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isLessThanOrEqualTo(System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-decreasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <returns>
            Returns true.
            </returns>
        </member>
        <member name="M:funclib.core.isLessThanOrEqualTo(System.Object,System.Object)">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-decreasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically non-decreasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isLessThanOrEqualTo(System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="!:true"/>, numbers are monotonically non-decreasing order, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test.</param>
            <param name="more">Rest of the elements to test.</param>
            <returns>
            Returns a <see cref="!:true"/>, numbers are monotonically non-decreasing order, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isList(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.IList"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.IList"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isMap(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.IMap"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.IMap"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isNatInt(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a non-negative <see cref="T:System.Int32"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a non-negative <see cref="T:System.Int32"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isNeg(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is less than zero, otherwise <see cref="!:false"/>.
            </summary>
            <param name="num">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is less than zero, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isNegInt(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a a negative <see cref="T:System.Int32"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a a negative <see cref="T:System.Int32"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isNotAny(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is logical true for any item in coll, otherwise <see cref="!:false"/>.
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">A collection of items to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is logical true for any item in coll, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isNotEqualTo(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if values are not equal, otherwise <see cref="!:false"/>
            </summary>
            <param name="x">First element to test.</param>
            <returns>
            Returns false.
            </returns>
        </member>
        <member name="M:funclib.core.isNotEqualTo(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:true"/> if values are not equal, otherwise <see cref="!:false"/>
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test</param>
            <returns>
            Returns <see cref="!:true"/> if values are not equal, otherwise <see cref="!:false"/>
            </returns>
        </member>
        <member name="M:funclib.core.isNotEqualTo(System.Object,System.Object,System.Object[])">
            <summary>
            Returns <see cref="!:true"/> if values are not equal, otherwise <see cref="!:false"/>
            </summary>
            <param name="x">First element to test.</param>
            <param name="y">Second element to test against.</param>
            <param name="more">All other elements to test.</param>
            <returns>
            Returns <see cref="!:true"/> if values are not equal, otherwise <see cref="!:false"/>
            </returns>
        </member>
        <member name="M:funclib.core.isNotEvery(System.Object,System.Object)">
            <summary>
            Returns <see cref="!:false"/> if x is logical true for every item in coll, otherwise <see cref="!:true"/>.
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">A collection of items to test.</param>
            <returns>
            Returns <see cref="!:false"/> if x is logical true for every item in coll, otherwise <see cref="!:true"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isNull(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is <see cref="!:null"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is <see cref="!:null"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isNumber(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a number, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a number, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isOdd(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is an odd number, otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is an odd number, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isPos(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is an greater than zero, otherwise <see cref="!:false"/>.
            </summary>
            <param name="num">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is an greater than zero, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isPosInt(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a positive <see cref="P:funclib.core.IsInt"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a positive <see cref="P:funclib.core.IsInt"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isReduced(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is of type <see cref="P:funclib.core.Reduced"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is of type <see cref="P:funclib.core.Reduced"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isSeq(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.ISeq"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:funclib.Collections.ISeq"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isSeqable(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x can be supported by the <see cref="P:funclib.core.Seq"/> function, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x can be supported by the <see cref="P:funclib.core.Seq"/> function, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isSequential(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISequential"/> interface, otherwise <see cref="!:false"/>.
            </summary>
            <param name="coll">An object to test against.</param>
            <returns>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISequential"/> interface, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isSet(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISequential"/> interface, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISequential"/> interface, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isSome(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is not <see cref="!:null"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is not <see cref="!:null"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isSorted(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISorted"/> interface, otherwise <see cref="!:false"/>.
            </summary>
            <param name="coll">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.ISorted"/> interface, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isString(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.String"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.String"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isTrue(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is <see cref="!:true"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is <see cref="!:true"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isUUID(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Guid"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is a <see cref="T:System.Guid"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isVector(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.IVector"/> interface, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if coll implements <see cref="T:funclib.Collections.IVector"/> interface, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isVolatile(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is of type <see cref="!:Volatile"/>, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is of type <see cref="!:Volatile"/>, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.isZero(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is zero, otherwise <see cref="!:false"/>.
            </summary>
            <param name="n">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is zero, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.iterate(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of x, f.Invoke(x), f.Invoke(f.Inovke(x))...
            f must be free of side-effects.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="x">First object of sequence.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of x, f.Invoke(x), f.Invoke(f.Inovke(x))...
            f must be free of side-effects.
            </returns>
        </member>
        <member name="M:funclib.core.juxt(System.Object)">
            <summary>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="!:Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="!:Function"/> takes a variable number or
            args, and returns a <see cref="P:funclib.core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="!:Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="!:Function"/> takes a variable number or
            args, and returns a <see cref="P:funclib.core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).
            </returns>
        </member>
        <member name="M:funclib.core.juxt(System.Object,System.Object)">
            <summary>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="!:Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="!:Function"/> takes a variable number or
            args, and returns a <see cref="P:funclib.core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).</summary>
            <param name="f">First object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="g">Second object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="!:Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="!:Function"/> takes a variable number or
            args, and returns a <see cref="P:funclib.core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).
            </returns>
        </member>
        <member name="M:funclib.core.juxt(System.Object,System.Object,System.Object)">
            <summary>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="!:Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="!:Function"/> takes a variable number or
            args, and returns a <see cref="P:funclib.core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).</summary>
            <param name="f">First object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="g">Second object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="h">Third object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="!:Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="!:Function"/> takes a variable number or
            args, and returns a <see cref="P:funclib.core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).
            </returns>
        </member>
        <member name="M:funclib.core.juxt(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="!:Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="!:Function"/> takes a variable number or
            args, and returns a <see cref="P:funclib.core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).</summary>
            <param name="f">First object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="g">Second object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="h">Third object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="fs">Rest of the object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Takes a set of <see cref="T:funclib.Components.Core.IFunction"/> and returns <see cref="!:Function"/> that is the juxtaposition
            of those <see cref="T:funclib.Components.Core.IFunction"/>. The returned <see cref="!:Function"/> takes a variable number or
            args, and returns a <see cref="P:funclib.core.Vector"/> containing the result of applying each <see cref="T:funclib.Components.Core.IFunction"/>
            to the args (left-to-right).
            </returns>
        </member>
        <member name="M:funclib.core.keep(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the non-null results of <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>.
            Note: this means false return values will be included. F must be free of side-effects.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> implements.</param>
            <param name="coll">A collection of items.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the non-null results of <see cref="T:funclib.Components.Core.Generic.IFunction`2"/>.
            Note: this means false return values will be included. F must be free of side-effects.
            </returns>
        </member>
        <member name="M:funclib.core.key(System.Object)">
            <summary>
            Returns the key of the <see cref="T:funclib.Collections.KeyValuePair"/>.
            </summary>
            <param name="e">An <see cref="T:funclib.Collections.KeyValuePair"/> object.</param>
            <returns>
            Returns the key of the <see cref="T:funclib.Collections.KeyValuePair"/>.
            </returns>
        </member>
        <member name="M:funclib.core.keys(System.Object)">
            <summary>
            Returns a <see cref="P:funclib.core.Seq"/> of the <see cref="T:funclib.Collections.IMap"/>'s keys.
            </summary>
            <param name="map">An object that implements the <see cref="T:funclib.Collections.IMap"/> interface.</param>
            <returns>
            Returns a <see cref="P:funclib.core.Seq"/> of the <see cref="T:funclib.Collections.IMap"/>'s keys.
            </returns>
        </member>
        <member name="M:funclib.core.last(System.Object)">
            <summary>
            Returns the last item in coll, in linear time.
            </summary>
            <param name="s">Object to return the last time for.</param>
            <returns>
            Returns the last item in coll, in linear time.
            </returns>
        </member>
        <member name="M:funclib.core.lazySeq">
            <summary>
            Creates an empty <see cref="T:funclib.Components.Core.LazySeq"/> that yields null.
            </summary>
        </member>
        <member name="M:funclib.core.lazySeq(System.Func{System.Object})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.LazySeq"/> with the fn as its body.
            </summary>
            <param name="fn">A function to evaluate during each <see cref="M:funclib.Components.Core.LazySeq.Seq"/> call.</param>
        </member>
        <member name="M:funclib.core.lazySeq(funclib.Components.Core.Generic.IFunction{System.Object})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.LazySeq"/> with the fn as its body.
            </summary>
            <param name="fn">A function to evaluate during each <see cref="M:funclib.Components.Core.LazySeq.Seq"/> call.</param>
        </member>
        <member name="M:funclib.core.lazySeq(System.Object)">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.LazySeq"/> with the fn returning the object as its body.
            </summary>
            <param name="body">The object to return when <see cref="M:funclib.Components.Core.LazySeq.Seq"/> is called.</param>
        </member>
        <member name="M:funclib.core.lazySeq(funclib.Collections.ISeq)">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.LazySeq"/> with the items of the sequence.
            </summary>
            <param name="e">The sequence of items.</param>
        </member>
        <member name="M:funclib.core.list(System.Object[])">
            <summary>
            Creates a new <see cref="T:funclib.Collections.List"/> containing the times.
            </summary>
            <param name="items">List of items to add.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.List"/> containing the items.
            </returns>
        </member>
        <member name="M:funclib.core.listS(System.Object)">
            <summary>
            Creates a new <see cref="P:funclib.core.Seq"/> containing the items perpended to the rest, the
            last of which will be treated as a sequence.
            </summary>
            <param name="args">An object is passed to the <see cref="P:funclib.core.Seq"/> function.</param>
            <returns>
            Returns the result of calling <see cref="P:funclib.core.Seq"/> with args.
            </returns>
        </member>
        <member name="M:funclib.core.listS(System.Object,System.Object)">
            <summary>
            Creates a new <see cref="P:funclib.core.Seq"/> containing the items perpended to the rest, the
            last of which will be treated as a sequence.
            </summary>
            <param name="a">First item in the list.</param>
            <param name="args">Rest of the items.</param>
            <returns>
            Returns the result of calling <see cref="P:funclib.core.Cons"/>.
            </returns>
        </member>
        <member name="M:funclib.core.listS(System.Object,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="P:funclib.core.Seq"/> containing the items perpended to the rest, the
            last of which will be treated as a sequence.
            </summary>
            <param name="a">First item in the list.</param>
            <param name="b">Second item in the list.</param>
            <param name="args">Rest of the times.</param>
            <returns>
            Returns the result of calling <see cref="P:funclib.core.Cons"/>.
            </returns>
        </member>
        <member name="M:funclib.core.listS(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="P:funclib.core.Seq"/> containing the items perpended to the rest, the
            last of which will be treated as a sequence.
            </summary>
            <param name="a">First item in the list.</param>
            <param name="b">Second item in the list.</param>
            <param name="c">Third item in the list.</param>
            <param name="args">Rest of the times.</param>
            <returns>
            Returns the result of calling <see cref="P:funclib.core.Cons"/>.
            </returns>
        </member>
        <member name="M:funclib.core.listS(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Creates a new <see cref="P:funclib.core.Seq"/> containing the items perpended to the rest, the
            last of which will be treated as a sequence.
            </summary>
            <param name="a">First item in the list.</param>
            <param name="b">Second item in the list.</param>
            <param name="c">Third item in the list.</param>
            <param name="d">Fourth item in the list.</param>
            <param name="args">Rest of the times.</param>
            <returns>
            Returns the result of calling <see cref="P:funclib.core.Cons"/>.
            </returns>
        </member>
        <member name="M:funclib.core.locking(System.Object,System.Func{System.Object})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Locking"/> object.
            </summary>
            <param name="x">Object to lock.</param>
            <param name="fn"><see cref="T:System.Func`1"/> to execute.</param>
        </member>
        <member name="M:funclib.core.locking(System.Object,funclib.Components.Core.Generic.IFunction{System.Object})">
            <summary>
            Creates a <see cref="T:funclib.Components.Core.Locking"/> object.
            </summary>
            <param name="x">Object to lock.</param>
            <param name="fn"><see cref="T:funclib.Components.Core.Generic.IFunction`1"/> to execute.</param>
        </member>
        <member name="M:funclib.core.map(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="coll">A collection of items.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </returns>
        </member>
        <member name="M:funclib.core.map(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="c1">A collection of items.</param>
            <param name="c2">A collection of items.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </returns>
        </member>
        <member name="M:funclib.core.map(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="c1">A collection of items.</param>
            <param name="c2">A collection of items.</param>
            <param name="c3">A collection of items.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </returns>
        </member>
        <member name="M:funclib.core.map(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="c1">A collection of items.</param>
            <param name="c2">A collection of items.</param>
            <param name="c3">A collection of items.</param>
            <param name="colls">Rest of the collections of items.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> consisting of the results of applying <see cref="T:funclib.Components.Core.IFunction"/>
            to the set of first items of each coll, followed by applying <see cref="T:funclib.Components.Core.IFunction"/> to the set
            of second items in each coll, until any one of the colls are exhausted.  Any remaining items in
            other colls are ignored. <see cref="T:funclib.Components.Core.IFunction"/> should accept number of colls arguments.
            </returns>
        </member>
        <member name="M:funclib.core.mapCat(System.Object,System.Object[])">
            <summary>
            Returns the result of applying <see cref="P:funclib.core.Concat"/> to the result of applying
            <see cref="P:funclib.core.Map"/> to f and colls. Thus function f should return a collections.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="colls">A collection of items.</param>
            <returns>
            Returns a collection.
            </returns>
        </member>
        <member name="M:funclib.core.max(System.Object)">
            <summary>
            Returns the greatest of the numbers.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns x.
            </returns>
        </member>
        <member name="M:funclib.core.max(System.Object,System.Object)">
            <summary>
            Returns the greatest of the numbers.
            </summary>
            <param name="x">First object to test.</param>
            <param name="y">Second object to test.</param>
            <returns>
            Returns the greatest of the numbers.
            </returns>
        </member>
        <member name="M:funclib.core.max(System.Object,System.Object,System.Object[])">
            <summary>
            Returns the greatest of the numbers.
            </summary>
            <param name="x">First object to test.</param>
            <param name="y">Second object to test.</param>
            <param name="more">Rest of the objects to test.</param>
            <returns>
            Returns the greatest of the numbers.
            </returns>
        </member>
        <member name="M:funclib.core.merge(System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Collections.IMap"/> that consists of the rest of the <see cref="T:funclib.Collections.IMap"/> conj-ed onto
            the first. If a key occurs in more than one map, the mapping from the latter (left-to-right)
            will be mapping in the result.
            </summary>
            <param name="maps">List of <see cref="T:funclib.Collections.IMap"/>s to merge together.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IMap"/> that consists of the rest of the <see cref="T:funclib.Collections.IMap"/> conj-ed onto
            the first. If a key occurs in more than one map, the mapping from the latter (left-to-right)
            will be mapping in the result.
            </returns>
        </member>
        <member name="M:funclib.core.mergeWith(System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Collections.IMap"/> that consists of the rest of the <see cref="!:IMaps"/> conj-ed onto
            the first. If a key occurs in more than one map, the mapping(s0 from the latter (left-to-right)
            will be combined with the mapping in the result by calling f.Invoke(value-in-result, value-in-latter)
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="maps">A list of object maps to merge.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IMap"/> that consists of the rest of the <see cref="!:IMaps"/> conj-ed onto
            the first. If a key occurs in more than one map, the mapping(s0 from the latter (left-to-right)
            will be combined with the mapping in the result by calling f.Invoke(value-in-result, value-in-latter)
            </returns>
        </member>
        <member name="M:funclib.core.min(System.Object)">
            <summary>
            Returns the least of the numbers.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns x.
            </returns>
        </member>
        <member name="M:funclib.core.min(System.Object,System.Object)">
            <summary>
            Returns the least of the numbers.
            </summary>
            <param name="x">First object to test.</param>
            <param name="y">Second object to test.</param>
            <returns>
            Returns the greatest of the numbers.
            </returns>
        </member>
        <member name="M:funclib.core.min(System.Object,System.Object,System.Object[])">
            <summary>
            Returns the least of the numbers.
            </summary>
            <param name="x">First object to test.</param>
            <param name="y">Second object to test.</param>
            <param name="more">Rest of the objects to test.</param>
            <returns>
            Returns the greatest of the numbers.
            </returns>
        </member>
        <member name="M:funclib.core.minus(System.Object)">
            <summary>
            If y is not suppled return <see cref="M:funclib.Numbers.Negate(System.Object)"/> of x, else subtract
            ys from x and returns the result.
            </summary>
            <param name="x">Object to <see cref="M:funclib.Numbers.Negate(System.Object)"/>.</param>
            <returns>
            Returns <see cref="M:funclib.Numbers.Negate(System.Object)"/> of x.
            </returns>
        </member>
        <member name="M:funclib.core.minus(System.Object,System.Object)">
            <summary>
            If y is not suppled return <see cref="M:funclib.Numbers.Negate(System.Object)"/> of x, else subtract
            ys from x and returns the result.
            </summary>
            <param name="x">First number to subtract.</param>
            <param name="y">Second number to subtract.</param>
            <returns>
            Returns the result from subtracting y from x.
            </returns>
        </member>
        <member name="M:funclib.core.minus(System.Object,System.Object,System.Object[])">
            <summary>
            If y is not suppled return <see cref="M:funclib.Numbers.Negate(System.Object)"/> of x, else subtract
            ys from x and returns the result.
            </summary>
            <param name="x">First number to subtract.</param>
            <param name="y">Second number to subtract.</param>
            <param name="more">Rest of the numbers to subtract.</param>
            <returns>
            Returns the result of subtracting y from x then rest of the more values.
            </returns>
        </member>
        <member name="M:funclib.core.more(System.Object)">
            <summary>
            Returns a <see cref="P:funclib.core.Seq"/> of the items after the first. Calls
            <see cref="P:funclib.core.Seq"/> on its argument. If there are no more items,
            returns <see cref="F:funclib.Collections.List.EMPTY"/> collection.
            </summary>
            <param name="coll">Should be a <see cref="T:funclib.Collections.ISeqable"/> collection.</param>
            <returns>
            Returns a <see cref="P:funclib.core.Seq"/> of the items after the first. Calls
            <see cref="P:funclib.core.Seq"/> on its argument. If there are no more items,
            returns <see cref="F:funclib.Collections.List.EMPTY"/> collection.
            </returns>
        </member>
        <member name="M:funclib.core.multiply">
            <summary>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an
            implicit 1 passed.
            </summary>
            <returns>
            Returns 1.
            </returns>
        </member>
        <member name="M:funclib.core.multiply(System.Object)">
            <summary>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an
            implicit 1 passed.
            </summary>
            <param name="x">First parameter multiply.</param>
            <returns>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an
            implicit 1 passed.
            </returns>
        </member>
        <member name="M:funclib.core.multiply(System.Object,System.Object)">
            <summary>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an
            implicit 1 passed.
            </summary>
            <param name="x">First parameter multiply.</param>
            <param name="y">Second parameter multiply.</param>
            <returns>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an
            implicit 1 passed.
            </returns>
        </member>
        <member name="M:funclib.core.multiply(System.Object,System.Object,System.Object[])">
            <summary>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an
            implicit 1 passed.
            </summary>
            <param name="x">First parameter multiply.</param>
            <param name="y">Second parameter multiply.</param>
            <param name="more">Rest of the parameters to multiply.</param>
            <returns>
            Returns the product of numbers. No parameters past returns 1. Single parameter there is an
            implicit 1 passed.
            </returns>
        </member>
        <member name="M:funclib.core.next(System.Object)">
            <summary>
            Returns a <see cref="P:funclib.core.Seq"/> of the items after the first. Calls
            <see cref="P:funclib.core.Seq"/> on its argument. If there are no more items,
            returns null.
            </summary>
            <param name="coll">Should be a <see cref="T:funclib.Collections.ISeqable"/> collection.</param>
            <returns>
            Returns a <see cref="P:funclib.core.Seq"/> of the items after the first. Calls
            <see cref="P:funclib.core.Seq"/> on its argument. If there are no more items,
            returns null.
            </returns>
        </member>
        <member name="M:funclib.core.nfirst(System.Object)">
            <summary>
            Same as <see cref="!:Next.Invoke(First.Invoke(object))"/>.
            </summary>
            <param name="x">Object to return the first item's next item.</param>
            <returns>
            Returns the first item's next item
            </returns>
        </member>
        <member name="M:funclib.core.nnext(System.Object)">
            <summary>
            Same as <see cref="!:Next.Invoke(Next.Invoke(object))"/>.
            </summary>
            <param name="x">Object to return the next item's next item.</param>
            <returns>
            Returns the next item's next item
            </returns>
        </member>
        <member name="M:funclib.core.not(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if x is logical false, otherwise <see cref="!:false"/>.
            </summary>
            <param name="x">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if x is logical false, otherwise <see cref="!:false"/>.
            </returns>
        </member>
        <member name="M:funclib.core.notEmpty(System.Object)">
            <summary>
            Returns <see cref="!:null"/> if coll is empty, otherwise coll
            </summary>
            <param name="coll">Object to test.</param>
            <returns>
            Returns <see cref="!:null"/> if coll is empty, otherwise coll
            </returns>
        </member>
        <member name="M:funclib.core.nth(System.Object,System.Object)">
            <summary>
            Returns the value at the index. <see cref="P:funclib.core.Nth"/> throws an exception if index
            is out of bounds or unless notFound is supplied. <see cref="P:funclib.core.Nth"/> works on
            strings, arrays, Regex matcher, lists and O(n) time for sequences.
            </summary>
            <param name="coll">Collection to search for index.</param>
            <param name="index">Index to find.</param>
            <returns>
            Returns the value at the index. <see cref="P:funclib.core.Nth"/> throws an exception if index
            is out of bounds or unless notFound is supplied. <see cref="P:funclib.core.Nth"/> works on
            strings, arrays, Regex matcher, lists and O(n) time for sequences.
            </returns>
        </member>
        <member name="M:funclib.core.nth(System.Object,System.Object,System.Object)">
            <summary>
            Returns the value at the index. <see cref="P:funclib.core.Nth"/> throws an exception if index
            is out of bounds or unless notFound is supplied. <see cref="P:funclib.core.Nth"/> works on
            strings, arrays, Regex matcher, lists and O(n) time for sequences.
            </summary>
            <param name="coll">Collection to search for index.</param>
            <param name="index">Index to find.</param>
            <param name="notFound">Value to return if index is not found.</param>
            <returns>
            Returns the value at the index. <see cref="P:funclib.core.Nth"/> throws an exception if index
            is out of bounds or unless notFound is supplied. <see cref="P:funclib.core.Nth"/> works on
            strings, arrays, Regex matcher, lists and O(n) time for sequences.
            </returns>
        </member>
        <member name="M:funclib.core.nthNext(System.Object,System.Object)">
            <summary>
            Returns the nth next of colls. <see cref="P:funclib.core.Seq"/> is called when n is zero.
            </summary>
            <param name="coll">The collection to loop.</param>
            <param name="n">Number of Items to drop.</param>
            <returns>
            Returns the nth next of colls. <see cref="P:funclib.core.Seq"/> is called when n is zero.
            </returns>
        </member>
        <member name="M:funclib.core.nthRest(System.Object,System.Object)">
            <summary>
            Returns the nth rest of coll, coll when n is 0.
            </summary>
            <param name="coll">The collection to loop.</param>
            <param name="n">Number of Items to drop.</param>
            <returns>
            Returns the nth rest of coll, coll when n is 0.
            </returns>
        </member>
        <member name="M:funclib.core.or">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns
            a logical true value then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="M:funclib.core.or(System.Object)">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns
            a logical true value then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
            <param name="x">Object to return.</param>
            <remarks>
            If x implements interface <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> then the object's
            Invoke() method is executed and sets its results to x.
            </remarks>
            <returns>
            Evaluates objects one at a time, from left to right. If a object returns
            a logical true value then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </returns>
        </member>
        <member name="M:funclib.core.or(System.Object,System.Object[])">
            <summary>
            Evaluates objects one at a time, from left to right. If a object returns
            a logical true value then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </summary>
            <param name="x">First object to test.</param>
            <param name="next">Rest of the objects to test.</param>
            <returns>
            Evaluates objects one at a time, from left to right. If a object returns
            a logical true value then it is returned and stops evaluating
            all other expressions. Otherwise, it returns the value of the last object.
            </returns>
        </member>
        <member name="M:funclib.core.partial(System.Object,System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f and fewer than the normal arguments, and returns a
            <see cref="!:Function"/> that take the rest of the arguments.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="arg1">First argument to the function.</param>
            <returns>
            Returns <see cref="!:Function"/> that when executed will take args + additional args.
            </returns>
        </member>
        <member name="M:funclib.core.partial(System.Object,System.Object,System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f and fewer than the normal arguments, and returns a
            <see cref="!:Function"/> that take the rest of the arguments.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="arg1">First argument to the function.</param>
            <param name="arg2">Second argument to the function.</param>
            <returns>
            Returns <see cref="!:Function"/> that when executed will take args + additional args.
            </returns>
        </member>
        <member name="M:funclib.core.partial(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f and fewer than the normal arguments, and returns a
            <see cref="!:Function"/> that take the rest of the arguments.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="arg1">First argument to the function.</param>
            <param name="arg2">Second argument to the function.</param>
            <param name="arg3">Third argument to the function.</param>
            <returns>
            Returns <see cref="!:Function"/> that when executed will take args + additional args.
            </returns>
        </member>
        <member name="M:funclib.core.partial(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Takes a <see cref="T:funclib.Components.Core.IFunction"/> f and fewer than the normal arguments, and returns a
            <see cref="!:Function"/> that take the rest of the arguments.
            </summary>
            <param name="f">Object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="arg1">First argument to the function.</param>
            <param name="arg2">Second argument to the function.</param>
            <param name="arg3">Third argument to the function.</param>
            <param name="more">Rest of the arguments to the function.</param>
            <returns>
            Returns <see cref="!:Function"/> that when executed will take args + additional args.
            </returns>
        </member>
        <member name="M:funclib.core.partition(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </summary>
            <param name="n">A <see cref="T:System.Int32"/> specifying the size of each group.</param>
            <param name="coll">A collection that can be <see cref="P:funclib.core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </returns>
        </member>
        <member name="M:funclib.core.partition(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </summary>
            <param name="n">A <see cref="T:System.Int32"/> specifying the size of each group.</param>
            <param name="step">A <see cref="T:System.Int32"/> specifying the starting point for each group.</param>
            <param name="coll">A collection that can be <see cref="P:funclib.core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </returns>
        </member>
        <member name="M:funclib.core.partition(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </summary>
            <param name="n">A <see cref="T:System.Int32"/> specifying the size of each group.</param>
            <param name="step">A <see cref="T:System.Int32"/> specifing the starting point for each group.</param>
            <param name="pad">A collection to pad results with.</param>
            <param name="coll">A collection that can be <see cref="P:funclib.core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists of n items each, at offsets step
            apart. If step is not supplied, defaults to n, i.e. the partitions do not
            overlap. If a pad collections is supplied, use its elements a necessary
            to complete last partition up to n items. In case there are not enough
            padding elements, return a partition with  less than n items.
            </returns>
        </member>
        <member name="M:funclib.core.partitionAll(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists like <see cref="P:funclib.core.Partition"/>, but my include
            partitions with fewer then n items at the end.
            </summary>
            <param name="n">A <see cref="T:System.Int32"/> specifying the size of each group.</param>
            <param name="coll">A collection that can be <see cref="P:funclib.core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists like <see cref="P:funclib.core.Partition"/>, but my include
            partitions with fewer then n items at the end.
            </returns>
        </member>
        <member name="M:funclib.core.partitionAll(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists like <see cref="P:funclib.core.Partition"/>, but my include
            partitions with fewer then n items at the end.
            </summary>
            <param name="n">A <see cref="T:System.Int32"/> specifying the size of each group.</param>
            <param name="step">A <see cref="T:System.Int32"/> specifying the starting point for each group.</param>
            <param name="coll">A collection that can be <see cref="P:funclib.core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of lists like <see cref="P:funclib.core.Partition"/>, but my include
            partitions with fewer then n items at the end.
            </returns>
        </member>
        <member name="M:funclib.core.partitionBy(System.Object,System.Object)">
            <summary>
            Applies <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> to each value in coll, splitting it each
            time f returns a new value. Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of partitions.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">A collection that can be <see cref="P:funclib.core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of partitions.
            </returns>
        </member>
        <member name="M:funclib.core.peek(System.Object)">
            <summary>
            Returns the same as <see cref="T:funclib.Collections.List"/>'s <see cref="M:funclib.Collections.List.First"/> method,
            for <see cref="T:funclib.Collections.Queue"/>'s <see cref="M:funclib.Collections.Queue.Peek"/> method, for
            <see cref="T:funclib.Collections.Vector"/>'s <see cref="P:funclib.core.Last"/> (but much more efficient). If the collection
            is empty return null.
            </summary>
            <param name="coll">An object that implements the <see cref="T:funclib.Collections.IStack"/> interface.</param>
            <returns>
            Returns the same as <see cref="T:funclib.Collections.List"/>'s <see cref="M:funclib.Collections.List.First"/> method,
            for <see cref="T:funclib.Collections.Queue"/>'s <see cref="M:funclib.Collections.Queue.Peek"/> method, for
            <see cref="T:funclib.Collections.Vector"/>'s <see cref="P:funclib.core.Last"/> (but much more efficient). If the collection
            is empty return null.
            </returns>
        </member>
        <member name="M:funclib.core.persistentǃ(System.Object)">
            <summary>
            Returns a new, persistent version of the <see cref="T:funclib.Collections.ITransientCollection"/>, in
            constant time. The <see cref="T:funclib.Collections.ITransientCollection"/> cannot be used after this
            call.
            </summary>
            <param name="coll">An object that implements the <see cref="T:funclib.Collections.ITransientCollection"/> interface.</param>
            <returns>
            Returns a new, persistent version of the <see cref="T:funclib.Collections.ITransientCollection"/>, in
            constant time.
            </returns>
        </member>
        <member name="M:funclib.core.plus">
            <summary>
            Returns the sum of numbers. No parameters past returns 0.
            </summary>
            <returns>
            Returns 0.
            </returns>
        </member>
        <member name="M:funclib.core.plus(System.Object)">
            <summary>
            Returns the sum of numbers. No parameters past returns 0.
            </summary>
            <param name="x">First parameter added.</param>
            <returns>
            Returns the sum of numbers. No parameters past returns 0.
            </returns>
        </member>
        <member name="M:funclib.core.plus(System.Object,System.Object)">
            <summary>
            Returns the sum of numbers. No parameters past returns 0.
            </summary>
            <param name="x">First parameter added.</param>
            <param name="y">Second parameter added.</param>
            <returns>
            Returns the sum of numbers. No parameters past returns 0.
            </returns>
        </member>
        <member name="M:funclib.core.plus(System.Object,System.Object,System.Object[])">
            <summary>
            Returns the sum of numbers. No parameters past returns 0.
            </summary>
            <param name="x">First parameter added.</param>
            <param name="y">Second parameter added.</param>
            <param name="more">Rest of the parameters to add.</param>
            <returns>
            Returns the sum of numbers. No parameters past returns 0.
            </returns>
        </member>
        <member name="M:funclib.core.pop(System.Object)">
            <summary>
            For <see cref="T:funclib.Collections.List"/> or <see cref="T:funclib.Collections.Queue"/> returns a
            new <see cref="T:funclib.Collections.List"/>/<see cref="T:funclib.Collections.Queue"/> without the first
            item. For <see cref="T:funclib.Collections.Vector"/>, returns a new <see cref="T:funclib.Collections.Vector"/>
            without the last time. If the coll is empty, throws an exception.
            </summary>
            <param name="coll">An object that implements a <see cref="T:funclib.Collections.IStack"/> interface.</param>
            <returns>
            Returns the same collection type as the input, minus the last item in a <see cref="T:funclib.Collections.Vector"/>
            or first time in a <see cref="T:funclib.Collections.List"/> or <see cref="T:funclib.Collections.Queue"/>
            </returns>
        </member>
        <member name="M:funclib.core.popǃ(System.Object)">
            <summary>
            Removes the last time from a <see cref="!:ITransientVector"/>. If
            the collection is empty, throw an exception.
            </summary>
            <param name="coll">An object that implements the <see cref="!:ITransientVector"/> interface.</param>
            <returns>
            Returns coll.
            </returns>
        </member>
        <member name="M:funclib.core.print">
            <summary>
            Prints the object(s) to the <see cref="P:funclib.Variables.Out"/> stream.
            </summary>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="M:funclib.core.print(System.Object)">
            <summary>
            Prints the object(s) to the <see cref="P:funclib.Variables.Out"/> stream.
            </summary>
            <param name="x">Object to print.</param>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="M:funclib.core.print(System.Object,System.Object[])">
            <summary>
            Prints the object(s) to the <see cref="P:funclib.Variables.Out"/> stream.
            </summary>
            <param name="x">First object to print.</param>
            <param name="more">Rest of the object to print.</param>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="M:funclib.core.printLn(System.Object[])">
            <summary>
            The same as <see cref="P:funclib.core.Print"/> but followed by a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="more">Any objects you want to print.</param>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="M:funclib.core.rand">
            <summary>
            Returns a <see cref="T:System.Random"/> floating point number between
            0 (inclusive) and n (default 1) (exclusive).
            </summary>
            <returns>
            Returns a <see cref="T:System.Random"/> floating point number between
            0 (inclusive) and n (default 1) (exclusive).
            </returns>
        </member>
        <member name="M:funclib.core.rand(System.Object)">
            <summary>
            Returns a <see cref="T:System.Random"/> floating point number between
            0 (inclusive) and n (default 1) (exclusive).
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> for the exclusive value.</param>
            <returns>
            Returns a <see cref="T:System.Random"/> floating point number between
            0 (inclusive) and n (default 1) (exclusive).
            </returns>
        </member>
        <member name="M:funclib.core.randInt(System.Object)">
            <summary>
            Returns a <see cref="T:System.Random"/> <see cref="T:System.Int32"/> between 0 (inclusive) and n (exclusive).
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> for the exclusive value.</param>
            <returns>
            Returns a <see cref="T:System.Random"/> <see cref="T:System.Int32"/> between 0 (inclusive) and n (exclusive).
            </returns>
        </member>
        <member name="M:funclib.core.randNth(System.Object)">
            <summary>
            Return a random element of the <see cref="T:funclib.Collections.ISequential"/> collection.
            </summary>
            <param name="coll">Collection to search for index.</param>
            <returns>
            Return a random element of the <see cref="T:funclib.Collections.ISequential"/> collection.
            </returns>
        </member>
        <member name="M:funclib.core.range">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of numbers from start (inclusive) to end
            (Exclusive), by step, where start defaults to 0, step to 1, and end to
            infinity. When step is equal to 0, returns an infinite sequence of
            start. When start is equal to end, returns empty list.
            </summary>
            <returns>
            Returns a <see cref="T:funclib.Collections.Iterate"/> collection starting at 0 continues infinitly.
            </returns>
        </member>
        <member name="M:funclib.core.range(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of numbers from start (inclusive) to end
            (Exclusive), by step, where start defaults to 0, step to 1, and end to
            infinity. When step is equal to 0, returns an infinite sequence of
            start. When start is equal to end, returns empty list.
            </summary>
            <param name="end">Either a <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/> value to identify the end value.</param>
            <returns>
            Returns either <see cref="T:funclib.Collections.LongRange"/> if end is <see cref="T:System.Int64"/> or <see cref="T:funclib.Collections.Range"/> if end
            is <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:funclib.core.range(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of numbers from start (inclusive) to end
            (Exclusive), by step, where start defaults to 0, step to 1, and end to
            infinity. When step is equal to 0, returns an infinite sequence of
            start. When start is equal to end, returns empty list.
            </summary>
            <param name="start">Either a <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/> value to identify the start value.</param>
            <param name="end">Either a <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/> value to identify the end value.</param>
            <returns>
            Returns either <see cref="T:funclib.Collections.LongRange"/> if end/start is <see cref="T:System.Int64"/> or <see cref="T:funclib.Collections.Range"/> if end/start
            is <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:funclib.core.range(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of numbers from start (inclusive) to end
            (Exclusive), by step, where start defaults to 0, step to 1, and end to
            infinity. When step is equal to 0, returns an infinite sequence of
            start. When start is equal to end, returns empty list.
            </summary>
            <param name="start">Either a <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/> value to identify the start value.</param>
            <param name="end">Either a <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/> value to identify the end value.</param>
            <param name="step">Either a <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/> value to identify the step value.</param>
            <returns>
            Returns either <see cref="T:funclib.Collections.LongRange"/> if end/start/step is <see cref="T:System.Int64"/> or <see cref="T:funclib.Collections.Range"/> if end/start/step
            is <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:funclib.core.reduce(System.Object,System.Object)">
            <summary>
            f should implement the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface. If val is not supplied,
            returns the result of applying f to the first 2 items in coll, then applying f to the result and
            the 3rd item, etc. If coll contains no items, f must implement <see cref="T:funclib.Components.Core.Generic.IFunction`1"/>
            interface and reduce returns the result of calling f with no arguments. If coll has only 1 item,
            it is returned and f is not called. If val is supplied, returns the result of applying f to val
            and the first item in coll, then applying f to the result and the 2nd item, etc. If coll contains
            no items, val is returned and f is not called.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface unless coll has not items, then it needs to implement the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> interface.</param>
            <param name="coll">The collection to reduce.</param>
            <returns>
            Returns the result of calling f to the 1st and 2nd items, then calling f with the result and 3rd item, etc.
            </returns>
        </member>
        <member name="M:funclib.core.reduce(System.Object,System.Object,System.Object)">
            <summary>
            f should implement the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface. If val is not supplied,
            returns the result of applying f to the first 2 items in coll, then applying f to the result and
            the 3rd item, etc. If coll contains no items, f must implement <see cref="T:funclib.Components.Core.Generic.IFunction`1"/>
            interface and reduce returns the result of calling f with no arguments. If coll has only 1 item,
            it is returned and f is not called. If val is supplied, returns the result of applying f to val
            and the first item in coll, then applying f to the result and the 2nd item, etc. If coll contains
            no items, val is returned and f is not called.
            </summary>
            <param name="f">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="val">The initial starting value.</param>
            <param name="coll">The collection to reduce over.</param>
            <returns>
            Returns the result of calling f to val and 1st, then calling f with the result and 2nd, etc.
            </returns>
        </member>
        <member name="M:funclib.core.reduced(System.Object)">
            <summary>
            Wraps x in a way such that a <see cref="P:funclib.core.Reduce"/> will terminate with the value x.
            </summary>
            <param name="x">Object to wrap.</param>
            <returns>
            Returns <see cref="P:funclib.core.Reduced"/> object that wraps x.
            </returns>
        </member>
        <member name="M:funclib.core.reduceKV(System.Object,System.Object,System.Object)">
            <summary>
            Reduces a <see cref="T:funclib.Collections.IAssociative"/> collection. f should implement <see cref="T:funclib.Components.Core.Generic.IFunction`4"/> interface.
            Returns the result of applying f to init, the 1st key and value in coll. Then applying f to that result and the
            2nd key and value, etc. If coll contains no entries, returns init and f is not called. Note: <see cref="P:funclib.core.ReduceKV"/>
            is supported on <see cref="T:funclib.Collections.IVector"/>'s where the keys will be the ordinal values.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`4"/> interface.</param>
            <param name="init">The initial value for the reducing.</param>
            <param name="coll">The collection that implements <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <returns>
            Returns the result of applying f to init, the 1st key and value in coll. Then applying f to that result and the
            2nd key and value, etc. If coll contains no entries, returns init and f is not called.
            </returns>
        </member>
        <member name="M:funclib.core.reductions(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the intermediate values of the reductions
            (as per reduce) of coll by f, starting with init.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> if coll contains no items, otherwise <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="coll">A object that can be <see cref="P:funclib.core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the intermediate values of the reductions
            (as per reduce) of coll by f, starting with init.
            </returns>
        </member>
        <member name="M:funclib.core.reductions(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the intermediate values of the reductions
            (as per reduce) of coll by f, starting with init.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="init">The initial starting value.</param>
            <param name="coll">A object that can be <see cref="P:funclib.core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the intermediate values of the reductions
            (as per reduce) of coll by f, starting with init.
            </returns>
        </member>
        <member name="M:funclib.core.reFind(System.Object)">
            <summary>
            Returns the next <see cref="!:Regex"/> match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>.
            Uses <see cref="P:funclib.core.ReGroups"/> to return the group.
            </summary>
            <param name="m">A <see cref="P:funclib.core.ReMatcher"/> object already initialized.</param>
            <returns>
            Returns the next <see cref="!:Regex"/> match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>.
            Uses <see cref="P:funclib.core.ReGroups"/> to return the group.
            </returns>
        </member>
        <member name="M:funclib.core.reFind(System.Object,System.Object)">
            <summary>
            Returns the next <see cref="!:Regex"/> match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>.
            Uses <see cref="P:funclib.core.ReGroups"/> to return the group.
            </summary>
            <param name="re">An object that is already a <see cref="!:Regex"/> instance.</param>
            <param name="s">The string to search for a match(s).</param>
            <returns>
            Returns the next <see cref="!:Regex"/> match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>.
            Uses <see cref="P:funclib.core.ReGroups"/> to return the group.
            </returns>
        </member>
        <member name="M:funclib.core.reGroups(System.Object)">
            <summary>
            Returns the groups from the most recent match/find. If there are no
            nested groups, returns a string of the entire match. If there are
            nested groups, returns a <see cref="T:funclib.Collections.Vector"/> of groups,
            the first element being the entire match.
            </summary>
            <param name="m">A <see cref="P:funclib.core.ReMatcher"/> instance.</param>
            <returns>
            Returns the groups from the most recent match/find. If there are no
            nested groups, returns a string of the entire match. If there are
            nested groups, returns a <see cref="T:funclib.Collections.Vector"/> of groups,
            the first element being the entire match.
            </returns>
        </member>
        <member name="M:funclib.core.rem(System.Object,System.Object)">
            <summary>
            Returns the remainder of dividing the numerator by the denominator.
            </summary>
            <param name="num">The numerator.</param>
            <param name="div">the denominator.</param>
            <returns>
            Returns the remainder of dividing the numerator by the denominator.
            </returns>
        </member>
        <member name="M:funclib.core.reMatcher(System.Object,System.Object)">
            <summary>
            Returns an instance of <see cref="P:funclib.core.ReMatcher"/> to be used in <see cref="P:funclib.core.ReFind"/>.
            </summary>
            <param name="re">An object that is already a <see cref="!:Regex"/> instance.</param>
            <param name="s">The string to search for a match(s).</param>
            <returns>
            Returns an instance of <see cref="P:funclib.core.ReMatcher"/>.
            </returns>
        </member>
        <member name="M:funclib.core.reMatches(System.Object,System.Object)">
            <summary>
            Returns the match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Matches"/>.
            Uses <see cref="P:funclib.core.ReGroups"/> to return the groups.
            </summary>
            <param name="re">An object that is already a <see cref="!:Regex"/> instance.</param>
            <param name="s">The string to search for a match(s).</param>
            <returns>
            Returns the match, if any, of string to pattern, using <see cref="M:funclib.Components.Core.ReMatcher.Matches"/>.
            Uses <see cref="P:funclib.core.ReGroups"/> to return the groups.
            </returns>
        </member>
        <member name="M:funclib.core.removeWatch(System.Object,System.Object)">
            <summary>
             Removes a watch from the <see cref="T:funclib.Components.Core.ARef"/>'s reference.
            </summary>
            <param name="ref">An object that implements the <see cref="T:funclib.Components.Core.IRef"/> interface.</param>
            <param name="key">A unique key for the function to be removed.</param>
            <returns>
            Returns this <see cref="T:funclib.Components.Core.ARef"/> object.
            </returns>
        </member>
        <member name="M:funclib.core.rePattern(System.Object)">
            <summary>
            Returns an instance of <see cref="!:Regex"/>, for use, e.g. in <see cref="P:funclib.core.ReMatcher"/>.
            </summary>
            <param name="s">The string to search for a match(s).</param>
            <returns>
            Returns an instance of <see cref="!:Regex"/>, for use, e.g. in <see cref="P:funclib.core.ReMatcher"/>.
            </returns>
        </member>
        <member name="M:funclib.core.repeat(System.Object)">
            <summary>
            Returns a (infinite!, or length n is supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of xs.
            </summary>
            <param name="x">Object to repeat.</param>
            <returns>
            Returns a (infinite!, or length n is supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of xs.
            </returns>
        </member>
        <member name="M:funclib.core.repeat(System.Object,System.Object)">
            <summary>
            Returns a (infinite!, or length n is supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of xs.
            </summary>
            <param name="n">A <see cref="T:System.Int64"/> that specifies the number of objects.</param>
            <param name="x">Object to repeat.</param>
            <returns>
            Returns a (infinite!, or length n is supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of xs.
            </returns>
        </member>
        <member name="M:funclib.core.repeatedly(System.Object)">
            <summary>
            Takes a function of no args, presumably with side effects, and
            returns an infinite (or length n if supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of
            calls to it.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> interface.</param>
            <returns>
            Takes a function of no args, presumably with side effects, and
            returns an infinite (or length n if supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of
            calls to it.
            </returns>
        </member>
        <member name="M:funclib.core.repeatedly(System.Object,System.Object)">
            <summary>
            Takes a function of no args, presumably with side effects, and
            returns an infinite (or length n if supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of
            calls to it.
            </summary>
            <param name="n">The length of the sequence.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> interface.</param>
            <returns>
            Takes a function of no args, presumably with side effects, and
            returns an infinite (or length n if supplied) <see cref="T:funclib.Components.Core.LazySeq"/> of
            calls to it.
            </returns>
        </member>
        <member name="M:funclib.core.reSeq(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of successive matches of pattern in string,
            using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>, each such match processed with <see cref="P:funclib.core.ReGroups"/>.
            </summary>
            <param name="re">An object that is already a <see cref="!:Regex"/> instance.</param>
            <param name="s">The string to search for a match(s).</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of successive matches of pattern in string,
            using <see cref="M:funclib.Components.Core.ReMatcher.Find"/>, each such match processed with <see cref="P:funclib.core.ReGroups"/>.
            </returns>
        </member>
        <member name="M:funclib.core.resetǃ(System.Object,System.Object)">
            <summary>
            Sets the value of <see cref="T:funclib.Components.Core.IAtom"/> to the new value without regard for
            the current value. Returns newVal;
            </summary>
            <param name="atom">An object that implements the <see cref="T:funclib.Components.Core.IAtom"/> interface.</param>
            <param name="newVal">The new values for the <see cref="T:funclib.Components.Core.IAtom"/>.</param>
            <returns>
            Returns the newVal object.
            </returns>
        </member>
        <member name="M:funclib.core.rest(System.Object)">
            <summary>
            Returns a possible empty <see cref="P:funclib.core.Seq"/> of the items after the first.
            </summary>
            <param name="coll">An object to return items after the first.</param>
            <returns>
            Returns a possible empty <see cref="P:funclib.core.Seq"/> of the items after the first.
            </returns>
        </member>
        <member name="M:funclib.core.reverse(System.Object)">
            <summary>
            Returns a <see cref="P:funclib.core.Seq"/> of the items in coll in reverse order.
            </summary>
            <param name="coll">A collection to return.</param>
            <returns>
            Returns a <see cref="P:funclib.core.Seq"/> of the items in coll in reverse order.
            </returns>
        </member>
        <member name="M:funclib.core.rseq(System.Object)">
            <summary>
            Returns, in constant time, a <see cref="P:funclib.core.Seq"/> of the items in
            the collection (which can be a <see cref="T:funclib.Collections.Vector"/> or
            <see cref="T:funclib.Collections.SortedMap"/>) in reverse order. If collection
            is empty returns null.
            </summary>
            <param name="rev">An object that implements the <see cref="T:funclib.Collections.IReversible"/> interface.</param>
            <returns>
            Returns, in constant time, a <see cref="P:funclib.core.Seq"/> of the items in
            the collection (which can be a <see cref="T:funclib.Collections.Vector"/> or
            <see cref="T:funclib.Collections.SortedMap"/>) in reverse order. If collection
            is empty returns null.
            </returns>
        </member>
        <member name="M:funclib.core.second(System.Object)">
            <summary>
            Same as <see cref="!:First.Invoke(Next.Invoke(object))"/>.
            </summary>
            <param name="x">Should be a <see cref="T:funclib.Collections.ISeqable"/> collection.</param>
            <returns>
            Returns the 2nd item in the collection.
            </returns>
        </member>
        <member name="M:funclib.core.selectKeys(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.HashMap"/> containing only those entries in map who's key is in keys.
            </summary>
            <param name="map">An object that implements either <see cref="T:funclib.Collections.IAssociative"/>, <see cref="T:System.Collections.IDictionary"/> or <see cref="!:ITransientAssociative"/> interface.</param>
            <param name="keyseq">An object containing the keys, that can be <see cref="P:funclib.core.Seq"/>ed over, </param>
            <returns>
            Returns a <see cref="T:funclib.Collections.HashMap"/> containing only those entries in map who's key is in keys.
            </returns>
        </member>
        <member name="M:funclib.core.seq(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.ISeq"/> on the collection. If the collection is empty
            returns null. Passing null as the collection, returns null. <see cref="P:funclib.core.Seq"/>
            works on <see cref="T:System.String"/>s, <see cref="T:System.Array"/>s or any object that implements
            the <see cref="T:System.Collections.IEnumerable"/> interface. Note: that <see cref="P:funclib.core.Seq"/>
            caches values, thus <see cref="P:funclib.core.Seq"/> should not be used on any enumerable repeatedly
            returns the same mutable object.
            </summary>
            <param name="coll">The collection to <see cref="P:funclib.core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.ISeq"/> on the collection. If the collection is empty
            returns null. Passing null as the collection, returns null. <see cref="P:funclib.core.Seq"/>
            works on <see cref="T:System.String"/>s, <see cref="T:System.Array"/>s or any object that implements
            the <see cref="T:System.Collections.IEnumerable"/> interface. Note: that <see cref="P:funclib.core.Seq"/>
            caches values, thus <see cref="P:funclib.core.Seq"/> should not be used on any enumerable repeatedly
            returns the same mutable object.
            </returns>
        </member>
        <member name="M:funclib.core.set(System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.HashSet"/> of the distinct elements of coll.
            </summary>
            <param name="coll">Any collection that can be <see cref="P:funclib.core.Seq"/> over.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.HashSet"/> of the distinct elements of coll.
            </returns>
        </member>
        <member name="M:funclib.core.setValidatorǃ(System.Object,System.Object)">
            <summary>
            Sets the validator function for <see cref="T:funclib.Components.Core.IRef"/> variables. Validator
            function must be null or a side-effect-free <see cref="T:funclib.Components.Core.IFunction"/> of
            one argument, which will be passed the intended new state of any state
            change. If the new state is unacceptable, the function should either
            return <see cref="!:false"/> or throw an exception.
            </summary>
            <param name="ref">An object that implements the <see cref="T:funclib.Components.Core.IRef"/> interface.</param>
            <param name="validatorFn">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface, that takes one parameter.</param>
            <returns>
            Returns null.
            </returns>
        </member>
        <member name="M:funclib.core.some(System.Object,System.Object)">
            <summary>
            Returns the first logical <see cref="!:true"/> value of execute <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> pred passing
            x, where x is any x in coll, otherwise null.
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">A collection to be <see cref="P:funclib.core.Seq"/> over.</param>
            <returns>
            Returns the first logical <see cref="!:true"/> value of execute <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> pred passing
            x, where x is any x in coll, otherwise null.
            </returns>
        </member>
        <member name="M:funclib.core.sort(System.Object)">
            <summary>
            Returns a sorted collection of the items in coll. If no comparator is
            supplied, use <see cref="P:funclib.core.Compare"/>.
            </summary>
            <param name="coll">A collection to be sorted.</param>
            <returns>
            Returns a sorted collection of the items in coll. If no comparator is
            supplied, use <see cref="P:funclib.core.Compare"/>.
            </returns>
        </member>
        <member name="M:funclib.core.sort(System.Object,System.Object)">
            <summary>
            Returns a sorted collection of the items in coll. If no comparator is
            supplied, use <see cref="P:funclib.core.Compare"/>.
            </summary>
            <param name="comp">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="coll">A collection to be sorted.</param>
            <returns>
            Returns a sorted collection of the items in coll. If no comparator is
            supplied, use <see cref="P:funclib.core.Compare"/>.
            </returns>
        </member>
        <member name="M:funclib.core.sortBy(System.Object,System.Object)">
            <summary>
            Returns a sorted sequence of the items in coll, where the sort
            order is determined by comparing <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> key function.
            If no comparator is suppled, uses <see cref="P:funclib.core.Compare"/>.
            </summary>
            <param name="keyfn">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="coll">A collection to sort.</param>
            <returns>
            Returns a sorted sequence of the items in coll, where the sort
            order is determined by comparing <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> key function.
            If no comparator is suppled, uses <see cref="P:funclib.core.Compare"/>.
            </returns>
        </member>
        <member name="M:funclib.core.sortBy(System.Object,System.Object,System.Object)">
            <summary>
            Returns a sorted sequence of the items in coll, where the sort
            order is determined by comparing <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> key function.
            If no comparator is suppled, uses <see cref="P:funclib.core.Compare"/>.
            </summary>
            <param name="keyfn">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="comp">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="coll">A collection to sort.</param>
            <returns>
            Returns a sorted sequence of the items in coll, where the sort
            order is determined by comparing <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> key function.
            If no comparator is suppled, uses <see cref="P:funclib.core.Compare"/>.
            </returns>
        </member>
        <member name="M:funclib.core.sortedMap">
            <summary>
            Returns a new <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of assoc.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.SortedMap.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.core.sortedMap(System.Object[])">
            <summary>
            Returns a new <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of assoc.
            </summary>
            <param name="keyvals">Key/value pairs adding to the <see cref="T:funclib.Collections.SortedMap"/> data structure.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings. If any keys are
            equal, they are handled as if by repeated uses of assoc.
            </returns>
        </member>
        <member name="M:funclib.core.sortedMapBy(System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings, using the supplied
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> comparator. If any keys are equal, they are handled as
            if by repeated uses of <see cref="P:funclib.core.Assoc"/>.
            </summary>
            <param name="comparator">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="keyvals">Key/value pairs adding to the <see cref="T:funclib.Collections.SortedMap"/> data structure.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.SortedMap"/> with supplied mappings, using the supplied
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> comparator. If any keys are equal, they are handled as
            if by repeated uses of <see cref="P:funclib.core.Assoc"/>.
            </returns>
        </member>
        <member name="M:funclib.core.sortedSet">
            <summary>
            Returns a new <see cref="T:funclib.Collections.SortedSet"/> with the supplied keys. Any
            equal keys are handled as if by repeated uses of <see cref="P:funclib.core.Conj"/>.
            </summary>
            <returns>
            Returns <see cref="F:funclib.Collections.SortedSet.EMPTY"/>.
            </returns>
        </member>
        <member name="M:funclib.core.sortedSet(System.Object[])">
            <summary>
            Returns a new <see cref="T:funclib.Collections.SortedSet"/> with the supplied keys. Any
            equal keys are handled as if by repeated uses of <see cref="P:funclib.core.Conj"/>.
            </summary>
            <param name="keys">Keys to add to <see cref="T:funclib.Collections.SortedSet"/> data structure.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.SortedSet"/> with the supplied keys. Any
            equal keys are handled as if by repeated uses of <see cref="P:funclib.core.Conj"/>.
            </returns>
        </member>
        <member name="M:funclib.core.sortedSetBy(System.Object,System.Object[])">
            <summary>
            Returns a <see cref="T:funclib.Collections.SortedSet"/> with supplied keys, using the supplied
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> comparator. If any keys are equal, they are handled as
            if by repeated uses of <see cref="P:funclib.core.Conj"/>.
            </summary>
            <param name="comparator">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="keys">Keys to add to <see cref="T:funclib.Collections.SortedSet"/> data structure.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.SortedSet"/> with supplied keys, using the supplied
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> comparator. If any keys are equal, they are handled as
            if by repeated uses of <see cref="P:funclib.core.Conj"/>.
            </returns>
        </member>
        <member name="M:funclib.core.splitAt(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.Vector"/> of [<see cref="M:funclib.Components.Core.Take.Invoke(System.Object,System.Object)"/>, <see cref="M:funclib.Components.Core.Drop.Invoke(System.Object,System.Object)"/>].
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> of the items split collection at.</param>
            <param name="coll">A collection being split.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> of [<see cref="M:funclib.Components.Core.Take.Invoke(System.Object,System.Object)"/>, <see cref="M:funclib.Components.Core.Drop.Invoke(System.Object,System.Object)"/>].
            </returns>
        </member>
        <member name="M:funclib.core.splitWith(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.Vector"/> of [<see cref="M:funclib.Components.Core.TakeWhile.Invoke(System.Object,System.Object)"/>, <see cref="M:funclib.Components.Core.DropWhile.Invoke(System.Object,System.Object)"/>].
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="coll">A collection being split.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> of [<see cref="M:funclib.Components.Core.TakeWhile.Invoke(System.Object,System.Object)"/>, <see cref="M:funclib.Components.Core.DropWhile.Invoke(System.Object,System.Object)"/>].
            </returns>
        </member>
        <member name="M:funclib.core.str">
            <summary>
            With no args, returns empty string. With one arg, returns arg.ToString(). If
            arg is null return empty string. With more than one arg, returns the concatenation
            of args.
            </summary>
            <returns>
            Returns <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:funclib.core.str(System.Object)">
            <summary>
            With no args, returns empty string. With one arg, returns arg.ToString(). If
            arg is null return empty string. With more than one arg, returns the concatenation
            of args.
            </summary>
            <param name="x">Object to convert into a string.</param>
            <returns>
            Returns <see cref="F:System.String.Empty"/> if x is null, otherwise <see cref="M:System.Object.ToString"/>.
            </returns>
        </member>
        <member name="M:funclib.core.str(System.Object,System.Object[])">
            <summary>
            With no args, returns empty string. With one arg, returns arg.ToString(). If
            arg is null return empty string. With more than one arg, returns the concatenation
            of args.
            </summary>
            <param name="x">First object to convert into a string.</param>
            <param name="ys">Rest of the object to convert into a string.</param>
            <returns>
            Returns the concatenation of args into a single <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:funclib.core.subs(System.Object,System.Object)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
            character position and continues to the end of the string.
            </summary>
            <param name="s">String to execute the substring with.</param>
            <param name="start">The zero-based starting character position of a substring in this instance.</param>
            <returns>
            A string that is equivalent to the substring that begins at start in this
            instance, or <see cref="F:System.String.Empty"/> if start is equal to the length of this
            instance.
            </returns>
        </member>
        <member name="M:funclib.core.subs(System.Object,System.Object,System.Object)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
            character position and has a specified length.
            </summary>
            <param name="s">String to execute the substring with.</param>
            <param name="start">The zero-based starting character position of a substring in this instance.</param>
            <param name="end">The number of characters in the substring.</param>
            <returns>
            A string that is equivalent to the substring of length that begins at
            start in this instance, or <see cref="F:System.String.Empty"/> if start is equal to
            the length of this instance and length is zero.
            </returns>
        </member>
        <member name="M:funclib.core.subVec(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.IVector"/> of the items in <see cref="T:funclib.Collections.IVector"/> from start (inclusive)
            to end (exclusive). If end is not supplied, default to <see cref="P:funclib.core.Count"/> of <see cref="T:funclib.Collections.IVector"/>.
            </summary>
            <param name="v">An object that implements the <see cref="T:funclib.Collections.IVector"/> interface.</param>
            <param name="start">The zero-based starting index position.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of the items in <see cref="T:funclib.Collections.IVector"/> from start (inclusive)
            to end (exclusive). If end is not supplied, default to <see cref="P:funclib.core.Count"/> of <see cref="T:funclib.Collections.IVector"/>.
            </returns>
        </member>
        <member name="M:funclib.core.subVec(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.IVector"/> of the items in <see cref="T:funclib.Collections.IVector"/> from start (inclusive)
            to end (exclusive). If end is not supplied, default to <see cref="P:funclib.core.Count"/> of <see cref="T:funclib.Collections.IVector"/>.
            </summary>
            <param name="v">An object that implements the <see cref="T:funclib.Collections.IVector"/> interface.</param>
            <param name="start">The zero-based starting index position.</param>
            <param name="end">The number of items.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of the items in <see cref="T:funclib.Collections.IVector"/> from start (inclusive)
            to end (exclusive). If end is not supplied, default to <see cref="P:funclib.core.Count"/> of <see cref="T:funclib.Collections.IVector"/>.
            </returns>
        </member>
        <member name="M:funclib.core.swapǃ(System.Object,System.Object)">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after
            the swap.
            </summary>
            <param name="atom">An object that implements the <see cref="T:funclib.Components.Core.IAtom"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after
            the swap.
            </returns>
        </member>
        <member name="M:funclib.core.swapǃ(System.Object,System.Object,System.Object)">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after
            the swap.
            </summary>
            <param name="atom">An object that implements the <see cref="T:funclib.Components.Core.IAtom"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Second parameter of the function.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after
            the swap.
            </returns>
        </member>
        <member name="M:funclib.core.swapǃ(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after
            the swap.
            </summary>
            <param name="atom">An object that implements the <see cref="T:funclib.Components.Core.IAtom"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Second parameter of the function.</param>
            <param name="y">Third parameter of the function.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after
            the swap.
            </returns>
        </member>
        <member name="M:funclib.core.swapǃ(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Atomically swaps the value of atom to be: invoke(f, current-value-of-atom, ...args).
            Note: f may be called multiple times and thus should be free of side effects.
            Returns a <see cref="T:funclib.Collections.IVector"/> of old, new. The value of the atom before and after
            the swap.
            </summary>
            <param name="atom">An object that implements the <see cref="T:funclib.Components.Core.IAtom"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="x">Second parameter of the function.</param>
            <param name="y">Third parameter of the function.</param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:funclib.core.take(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first n items in the coll, or all items
            if there are fewer than n.
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> of the items to take from the collection.</param>
            <param name="coll">The collection to take the first x items from.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the first n items in the coll, or all items
            if there are fewer than n.
            </returns>
        </member>
        <member name="M:funclib.core.takeLast(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Collections.ISeq"/> of the last n items in coll. Depending on the
            type of coll may be no better than linear time.
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> of the items to take from the end of the collection.</param>
            <param name="coll">The collection to drop the first x items from.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.ISeq"/> of the last n items in coll. Depending on the
            type of coll may be no better than linear time.
            </returns>
        </member>
        <member name="M:funclib.core.takeNth(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of every nth item in coll.
            </summary>
            <param name="n">An <see cref="T:System.Int32"/> of the items to take every nth from collection.</param>
            <param name="coll">The collection to drop the first x items from.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of every nth item in coll.
            </returns>
        </member>
        <member name="M:funclib.core.takeWhile(System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of successive items from coll while
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> pred returns a logical true. pred
            must be free of side-effects.
            </summary>
            <param name="pred">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> interface.</param>
            <param name="coll">List of times to process.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of successive items from coll while
            <see cref="T:funclib.Components.Core.Generic.IFunction`3"/> pred returns a logical true. pred
            must be free of side-effects.
            </returns>
        </member>
        <member name="M:funclib.core.time(System.Func{System.Object})">
            <summary>
            Evaluates the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> and prints the time it took.
            Returns the value of <see cref="T:funclib.Components.Core.Generic.IFunction`1"/>.
            </summary>
            <param name="fn">Take a <see cref="T:System.Func`1"/> and convert it to <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> to be executed.</param>
        </member>
        <member name="M:funclib.core.time(funclib.Components.Core.Generic.IFunction{System.Object})">
            <summary>
            Evaluates the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> and prints the time it took.
            Returns the value of <see cref="T:funclib.Components.Core.Generic.IFunction`1"/>.
            </summary>
            <param name="fn">A function to be executed.</param>
        </member>
        <member name="M:funclib.core.toArray(System.Object)">
            <summary>
            Returns an <see cref="!:object[]"/> containing the contents of coll, which
            can be any collection.
            </summary>
            <param name="coll">A collection of items to convert into an object.</param>
            <returns>
            Returns an <see cref="!:object[]"/> containing the contents of coll, which
            can be any collection. Returns empty <see cref="!:object[]"/> if coll is null.
            </returns>
        </member>
        <member name="M:funclib.core.trampoline(System.Object)">
            <summary>
            <see cref="P:funclib.core.Trampoline"/> can be used to convert algorithms requiring mutual
            recursion without stake consumption. Calls f with supplied args, if any. If
            f returns a fn, calls the fn with no arguments and continues to repeat, until
            the return value is not a fn. then returns the non-fn value. Note: that if you
            want to return a fn as a final value, you must wrap it in some data structure
            and unpack it after trampoline returns.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> interface.</param>
            <returns>
            Returns the first non-fn value.
            </returns>
        </member>
        <member name="M:funclib.core.trampoline(System.Object,System.Object[])">
            <summary>
            <see cref="P:funclib.core.Trampoline"/> can be used to convert algorithms requiring mutual
            recursion without stake consumption. Calls f with supplied args, if any. If
            f returns a fn, calls the fn with no arguments and continues to repeat, until
            the return value is not a fn. then returns the non-fn value. Note: that if you
            want to return a fn as a final value, you must wrap it in some data structure
            and unpack it after trampoline returns.
            </summary>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="args">A list of parameters</param>
            <returns>
            Returns the first non-fn value.
            </returns>
        </member>
        <member name="M:funclib.core.transduce(System.Object,System.Object,System.Object)">
            <summary>
            This is still experimental!
            Reduce with a transformation of f (xf). If init is not supplied <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> is
            called to produce it. f should be a reducing step function that accepts both 1 and 2 arguments, if
            it accepts only 2 you can add the arity-1 with <see cref="P:funclib.core.Completing"/>. Returns the result of
            applying (thre transformed) xf to init and the first item in coll, then applying xf to the result
            of the 2nd item, etc. If coll contains no items, returns init and f is not called. Note: that
            certain transforms my inject or skip items.
            </summary>
            <param name="xform">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="coll">A collection of items to reduce.</param>
            <returns>
            Returns the result of applying (thre transformed) xf to init and the first item in coll, then applying
            xf to the result of the 2nd item, etc. If coll contains no items, returns init and f is not called.
            </returns>
        </member>
        <member name="M:funclib.core.transduce(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            This is still experimental!
            Reduce with a transformation of f (xf). If init is not supplied <see cref="T:funclib.Components.Core.Generic.IFunction`1"/> is
            called to produce it. f should be a reducing step function that accepts both 1 and 2 arguments, if
            it accepts only 2 you can add the arity-1 with <see cref="P:funclib.core.Completing"/>. Returns the result of
            applying (thre transformed) xf to init and the first item in coll, then applying xf to the result
            of the 2nd item, etc. If coll contains no items, returns init and f is not called. Note: that
            certain transforms my inject or skip items.
            </summary>
            <param name="xform">An object that implements the <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="init">The initial seed value.</param>
            <param name="coll">A collection of items to reduce.</param>
            <returns>
            Returns the result of applying (thre transformed) xf to init and the first item in coll, then applying
            xf to the result of the 2nd item, etc. If coll contains no items, returns init and f is not called.
            </returns>
        </member>
        <member name="M:funclib.core.transient(System.Object)">
            <summary>
            Returns a new transient version of the collection, in constant time.
            </summary>
            <param name="coll">An object that implements the <see cref="T:funclib.Collections.IEditableCollection"/> interface.</param>
            <returns>
            Returns a new transient version of the collection, in constant time.
            </returns>
        </member>
        <member name="M:funclib.core.treeSeq(System.Object,System.Object,System.Object)">
            <summary>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the nodes in a tree, via a depth-first walk.
            </summary>
            <param name="branch">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface that returns true if passed a node
            that can have children, otherwise false.</param>
            <param name="children">An object that implements <see cref="T:funclib.Components.Core.Generic.IFunction`2"/> interface that returns a sequence of the children.</param>
            <param name="root">An object for the root node of the tree.</param>
            <returns>
            Returns a <see cref="T:funclib.Components.Core.LazySeq"/> of the nodes in a tree.
            </returns>
        </member>
        <member name="M:funclib.core.truthy(System.Object)">
            <summary>
            Returns <see cref="!:true"/> if source is a logical true. i.e.:
            source is not null or if source is boolean true.
            </summary>
            <param name="source">Object to test.</param>
            <returns>
            Returns <see cref="!:true"/> if source is a logical true. i.e.:
            source is not null or if source is boolean true.
            </returns>
        </member>
        <member name="M:funclib.core.unreduce(System.Object)">
            <summary>
            If x is <see cref="P:funclib.core.IsReduced"/> returns true, return <see cref="M:funclib.Components.Core.Reduced.Deref"/>,
            otherwise return x.
            </summary>
            <param name="x">Object that can be <see cref="P:funclib.core.Reduced"/> or is already reduced.</param>
            <returns>
            If x is <see cref="P:funclib.core.IsReduced"/> returns true, return <see cref="M:funclib.Components.Core.Reduced.Deref"/>,
            otherwise return x.
            </returns>
        </member>
        <member name="M:funclib.core.update(System.Object,System.Object,System.Object)">
            <summary>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return
            a new value, and returns a new structure. If the key does not exists, null is passed as
            the old value.
            </summary>
            <param name="m">An object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="k">The key for the value to update.</param>
            <param name="f">A <see cref="T:funclib.Components.Core.IFunction"/> that takes the old value and any additional args and outputs the new value for the key.</param>
            <returns>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return
            a new value, and returns a new structure. If the key does not exists, null is passed as
            the old value.
            </returns>
        </member>
        <member name="M:funclib.core.update(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return
            a new value, and returns a new structure. If the key does not exists, null is passed as
            the old value.
            </summary>
            <param name="m">An object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="k">The key for the value to update.</param>
            <param name="f">A <see cref="T:funclib.Components.Core.IFunction"/> that takes the old value and any additional args and outputs the new value for the key.</param>
            <param name="x">Second argument to the passed in function.</param>
            <returns>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return
            a new value, and returns a new structure. If the key does not exists, null is passed as
            the old value.
            </returns>
        </member>
        <member name="M:funclib.core.update(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return
            a new value, and returns a new structure. If the key does not exists, null is passed as
            the old value.
            </summary>
            <param name="m">An object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="k">The key for the value to update.</param>
            <param name="f">A <see cref="T:funclib.Components.Core.IFunction"/> that takes the old value and any additional args and outputs the new value for the key.</param>
            <param name="x">Second argument to the passed in function.</param>
            <param name="y">Third argument to the passed in function.</param>
            <returns>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return
            a new value, and returns a new structure. If the key does not exists, null is passed as
            the old value.
            </returns>
        </member>
        <member name="M:funclib.core.update(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return
            a new value, and returns a new structure. If the key does not exists, null is passed as
            the old value.
            </summary>
            <param name="m">An object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="k">The key for the value to update.</param>
            <param name="f">A <see cref="T:funclib.Components.Core.IFunction"/> that takes the old value and any additional args and outputs the new value for the key.</param>
            <param name="x">Second argument to the passed in function.</param>
            <param name="y">Third argument to the passed in function.</param>
            <param name="z">Fourth argument to the passed in function.</param>
            <returns>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return
            a new value, and returns a new structure. If the key does not exists, null is passed as
            the old value.
            </returns>
        </member>
        <member name="M:funclib.core.update(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return
            a new value, and returns a new structure. If the key does not exists, null is passed as
            the old value.
            </summary>
            <param name="m">An object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="k">The key for the value to update.</param>
            <param name="f">A <see cref="T:funclib.Components.Core.IFunction"/> that takes the old value and any additional args and outputs the new value for the key.</param>
            <param name="x">Second argument to the passed in function.</param>
            <param name="y">Third argument to the passed in function.</param>
            <param name="z">Fourth argument to the passed in function.</param>
            <param name="more">Rest of the arguments to the passed in function.</param>
            <returns>
            'Updates' a value in an <see cref="T:funclib.Collections.IAssociative"/> structure. where k is a key and f is
            a <see cref="T:funclib.Components.Core.IFunction"/> that will take the old value and any supplied args and return
            a new value, and returns a new structure. If the key does not exists, null is passed as
            the old value.
            </returns>
        </member>
        <member name="M:funclib.core.updateIn(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            'Updates' a value in a nested <see cref="T:funclib.Collections.IAssociative"/> structure,
            where ks is a <see cref="T:funclib.Collections.ISeq"/> of keys and f is a <see cref="T:funclib.Components.Core.IFunction"/>
            that will take the old value and any supplied args and return the new value, and
            returns a new nested structure. If any levels do not exists, a <see cref="T:funclib.Collections.HashMap"/>
            will be created.
            </summary>
            <param name="m">An object that implements the <see cref="T:funclib.Collections.IAssociative"/> interface.</param>
            <param name="ks">An object that implements the <see cref="T:funclib.Collections.ISeq"/> interface.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="args">A list of supplied arguments.</param>
            <returns>
            Returns a new <see cref="T:funclib.Collections.HashMap"/> with the value updated.
            </returns>
        </member>
        <member name="M:funclib.core.uuid">
            <summary>
            Generates a new <see cref="T:System.Guid"/> object.
            </summary>
            <returns>
            Returns a new <see cref="T:System.Guid"/> object.
            </returns>
        </member>
        <member name="M:funclib.core.value(System.Object)">
            <summary>
            Returns the value in the <see cref="T:funclib.Collections.KeyValuePair"/> object.
            </summary>
            <param name="e">A <see cref="T:funclib.Collections.KeyValuePair"/> object pulling the value from.</param>
            <returns>
            Returns the value in the <see cref="T:funclib.Collections.KeyValuePair"/> object.
            </returns>
        </member>
        <member name="M:funclib.core.values(System.Object)">
            <summary>
            Returns a <see cref="P:funclib.core.Seq"/> of the <see cref="T:funclib.Collections.IMap"/>'s values.
            </summary>
            <param name="map">An object that implements the <see cref="T:funclib.Collections.IMap"/> interface.</param>
            <returns>
            Returns a <see cref="P:funclib.core.Seq"/> of the <see cref="T:funclib.Collections.IMap"/>'s values.
            </returns>
        </member>
        <member name="M:funclib.core.vec(System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the items from coll.
            </summary>
            <param name="coll">A object that implements either <see cref="T:funclib.Collections.ISeq"/> or <see cref="T:System.Collections.IEnumerable"/> interface or anything that can be made into array via <see cref="P:funclib.core.ToArray"/> method.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> object. If coll is null returns <see cref="F:funclib.Collections.Vector.EMPTY"/> object.
            </returns>
        </member>
        <member name="M:funclib.core.vector">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <returns>
            Returns the <see cref="F:funclib.Collections.Vector.EMPTY"/> object.
            </returns>
        </member>
        <member name="M:funclib.core.vector(System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.core.vector(System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="b">Second value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.core.vector(System.Object,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="b">Second value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="c">Third value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.core.vector(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="b">Second value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="c">Third value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="d">Fourth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.core.vector(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="b">Second value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="c">Third value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="d">Fourth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="e">Fifth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.core.vector(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="b">Second value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="c">Third value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="d">Fourth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="e">Fifth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="f">Sixth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.core.vector(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Creates a new <see cref="T:funclib.Collections.Vector"/> containing the args.
            </summary>
            <param name="a">First value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="b">Second value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="c">Third value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="d">Fourth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="e">Fifth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="f">Sixth value of the <see cref="T:funclib.Collections.Vector"/>.</param>
            <param name="args">Rest of the values added to the <see cref="T:funclib.Collections.Vector"/>.</param>
            <returns>
            Returns a <see cref="T:funclib.Collections.Vector"/> containing the args.
            </returns>
        </member>
        <member name="M:funclib.core.volatileǃ(System.Object)">
            <summary>
            Creates and returns a <see cref="!:Volatile"/> with an initial value of val.
            </summary>
            <param name="val">Initial value.</param>
            <returns>
            Returns the <see cref="!:Volatile"/> set to val.
            </returns>
        </member>
        <member name="M:funclib.core.vresetǃ(System.Object,System.Object)">
            <summary>
            Sets the value of <see cref="!:Volatile"/> to a newValue without
            regard for the current value
            </summary>
            <param name="vol">A <see cref="!:Volatile"/> object</param>
            <param name="newVal">The new value for the <see cref="!:Volatile"/> object.</param>
            <returns>
            Returns the new <see cref="!:Volatile"/> object set to newVal.
            </returns>
        </member>
        <member name="M:funclib.core.vswapǃ(System.Object,System.Object,System.Object[])">
            <summary>
            Non-atomically swaps the value of volatile.
            </summary>
            <param name="vol">A <see cref="!:Volatile"/> object.</param>
            <param name="f">An object that implements the <see cref="T:funclib.Components.Core.IFunction"/> interface.</param>
            <param name="args">Any additional arguments passed to f</param>
        </member>
        <member name="M:funclib.core.zipMap(System.Object,System.Object)">
            <summary>
            Returns a <see cref="P:funclib.core.HashMap"/> with the keys mapped to the corresponding values
            </summary>
            <param name="keys">A <see cref="P:funclib.core.Seq"/> collection for keys.</param>
            <param name="vals">A <see cref="P:funclib.core.Seq"/> collection for values.</param>
            <returns>
            Returns a <see cref="P:funclib.core.HashMap"/> with the keys mapped to the corresponding values
            </returns>
        </member>
    </members>
</doc>
